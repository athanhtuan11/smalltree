"""
Enhanced Curriculum AI với Multi-AI Support
Hỗ trợ fallback giữa nhiều AI providers
"""

import logging

logger = logging.getLogger(__name__)

class EnhancedCurriculumAI:
    def __init__(self):
        """Initialize Enhanced Curriculum AI với multi-provider support"""
        self.current_provider = "gemini"  # Default
        self.multi_ai_service = None
        self._init_multi_ai()
    
    def _init_multi_ai(self):
        """Initialize Multi-AI Service nếu available"""
        try:
            from .multi_ai_service import MultiAIService
            import sys
            import os
            
            # Add parent directory to path
            current_dir = os.path.dirname(os.path.abspath(__file__))
            parent_dir = os.path.dirname(current_dir)
            if parent_dir not in sys.path:
                sys.path.append(parent_dir)
            
            from multi_ai_config import MultiAIConfig
            
            config = MultiAIConfig.get_config()
            if config:
                self.multi_ai_service = MultiAIService(config)
                logger.info("✅ Enhanced Curriculum AI initialized with Multi-AI support")
            else:
                logger.warning("⚠️ No AI providers configured, using fallback")
        except Exception as e:
            logger.warning(f"⚠️ Multi-AI not available: {e}")
    
    def generate_curriculum_suggestions(self, age_group="2-3 tuổi", week_number=1, themes="", special_focus=""):
        """
        Generate curriculum suggestions - compatible với routes.py
        """
        return self.generate_curriculum(age_group, week_number, use_multi_ai=True)
    
    def generate_curriculum(self, age_group="2-3 tuổi", week_number=1, use_multi_ai=True):
        """
        Generate curriculum với multi-AI fallback support
        Returns structured data that matches the curriculum template
        """
        # Tạo prompt cho curriculum
        prompt = self._create_curriculum_prompt(age_group, week_number)
        
        # Try Multi-AI first if available and enabled
        if use_multi_ai and self.multi_ai_service:
            logger.info("🚀 Using Multi-AI Service for curriculum generation")
            result = self.multi_ai_service.generate_text(prompt)
            
            if result["success"]:
                logger.info(f"✅ Curriculum generated by {result['provider'].upper()}")
                
                # DEBUG: Log raw AI response to understand quality issues
                logger.info(f"🔍 [DEBUG] Raw AI response length: {len(result['content'])} chars")
                logger.info(f"🔍 [DEBUG] Raw AI response preview: {result['content'][:500]}...")
                
                parsed_result = self._parse_curriculum_response(result["content"], result["provider"])
                
                if parsed_result.get("success"):
                    # DEBUG: Log parsed data to check quality
                    data = parsed_result.get('data', {})
                    logger.info(f"🔍 [DEBUG] Parsed days: {list(data.keys())}")
                    if 'mon' in data:
                        sample_activities = list(data['mon'].values())[:3]
                        logger.info(f"🔍 [DEBUG] Sample Monday activities: {sample_activities}")
                    
                    return parsed_result
                else:
                    logger.warning(f"⚠️ Parsing failed: {parsed_result.get('error')}")
                    # Fallback to original curriculum service
            else:
                logger.warning(f"⚠️ Multi-AI failed: {result['error']}")
                # Fallback to original curriculum service
        
        # Fallback to original Curriculum service
        logger.info("🔄 Falling back to original Curriculum service")
        return self._fallback_curriculum(age_group, week_number)

    def _create_curriculum_prompt(self, age_group, week_number):
        """Tạo prompt cho AI curriculum generation theo template thực tế với output cụ thể"""
        prompt = f"""
Bạn là chuyên gia giáo dục mầm non. Tạo chương trình học tuần {week_number} cho trẻ {age_group} theo mẫu dự án hoạt động thực tế.

YÊU CẦU QUAN TRỌNG:
- Tạo hoạt động CỤ THỂ, CHI TIẾT cho từng khung giờ
- Mỗi hoạt động phải có tên rõ ràng và mô tả ngắn gọn
- Phù hợp với độ tuổi {age_group}
- Theo đúng khung giờ cố định

CHỌN CHỦ ĐỀ PHÙ HỢP CHO TUẦN {week_number}:
(Ví dụ: "Thế giới động vật", "Gia đình yêu thương", "Màu sắc và hình khối", "Thế giới cây cỏ", "Các nghề nghiệp", "Phương tiện giao thông")

FORMAT TRẢ VỀ - TỪNG NGÀY CỤ THỂ:

**Thứ 2:**
morning_1: Đón trẻ, massage kích thích giác quan với bóng mềm, ăn sáng (cháo gà, bánh mì, sữa)
morning_2: Thể dục sáng - Bài "Thỏ con nhảy nhót", trò chuyện về chủ đề tuần, kiểm tra thân thể
morning_3: HĐNT - Quan sát động vật trong vườn (chim, bướm, kiến)
morning_4: English: Animals - Dog/Woof, Cat/Meow, Bird/Tweet, Fish/Splash + games "What is it?"
morning_5: Khám phá động vật có 4 chân - Quan sát hình ảnh, mô phỏng di chuyển, học tên gọi
morning_6: Vệ sinh tay chân, ăn trưa (cơm, thịt, rau), ngủ trưa với nhạc ru êm dịu
afternoon_1: Lego time - Xây dựng nhà cho thú cưng (chó, mèo) với hướng dẫn từng bước
afternoon_2: Uống nước ép trái cây, vận động nhẹ - nhảy như thỏ, bò như mèo, ăn xế bánh quy
afternoon_3: Yoga động vật - Tư thế mèo, tư thế chó, tư thế rắn + thở sâu
afternoon_4: Hoạt động tự do - Xem sách tranh về động vật, đợi bố mẹ đến đón

**Thứ 3:**
morning_1: Đón trẻ, STEAM - Khám phá âm thanh động vật qua đồ chơi, ăn sáng
morning_2: Thể dục sáng - Bài "Gà mái với đàn con", thảo luận về giấc mơ của trẻ
morning_3: HĐNT - Thu thập lá cây để làm thức ăn giả cho động vật
morning_4: English Review - Animal sounds với trò chơi đoán âm thanh, hát "Old MacDonald"
morning_5: Tìm hiểu động vật ăn cỏ - Thỏ, dê, bò qua hình ảnh và video ngắn
morning_6: Vệ sinh, ăn trưa (bún thịt nướng, canh chua), ngủ trưa
afternoon_1: Hoạt động với giáo cụ - Ghép hình 12 mảnh động vật, xếp hình khối thành chuồng
afternoon_2: Uống nước, ăn xế (chuối, sữa chua), vận động - bắt chước tiếng động vật
afternoon_3: Vẽ và tô màu động vật yêu thích - Cung cấp mẫu đơn giản để trẻ tô
afternoon_4: Kể chuyện "Ba chú heo con", chuẩn bị đồ dùng cá nhân

**Thứ 4 - Thứ 4 vui vẻ:**
morning_1: Đón trẻ, hoạt động đặc biệt - Trang trí mặt nạ động vật đơn giản, ăn sáng
morning_2: Thể dục đặc biệt - Múa theo nhạc "Jungle Boogie", trò chuyện vui vẻ
morning_3: HĐNT đặc biệt - Trò chơi "Săn tìm kho báu động vật" trong sân chơi
morning_4: English Fun Day - Animal charades, hát "If You're Happy and You Know It" phiên bản động vật
morning_5: Thứ 4 vui vẻ - Làm bánh quy hình động vật đơn giản (không nướng)
morning_6: Vệ sinh, ăn trưa (cơm chiên dương châu), ngủ trưa
afternoon_1: Hoạt động đặc biệt - Kịch múa "Rừng xanh và những người bạn"
afternoon_2: Tiệc nhỏ - Ăn bánh quy đã làm, uống nước cam
afternoon_3: Yoga thư giãn - Tư thế thư giãn, nghe nhạc chill
afternoon_4: Xem phim hoạt hình ngắn về động vật, chia sẻ cảm xúc

**Thứ 5:**
morning_1: Đón trẻ, STEAM - Khám phá kết cấu lông vũ, vảy cá qua kính lúp, ăn sáng
morning_2: Thể dục sáng - Bài "Voi con", chia sẻ về hoạt động hôm qua
morning_3: HĐNT - Chăm sóc cây xanh, tưới nước cho cây (môi trường cho động vật)
morning_4: English: Zoo animals - Elephant, Lion, Monkey, Giraffe + trò chơi "Zoo keeper"
morning_5: Động vật hoang dã - Tìm hiểu sư tử, voi, khỉ qua tranh ảnh lớn và mô phỏng
morning_6: Vệ sinh, ăn trưa (phở gà, nem), ngủ trưa
afternoon_1: Lego nâng cao - Xây dựng vườn thú mini có nhiều khu vực khác nhau
afternoon_2: Uống nước, ăn xế (bánh flan), vận động - chạy như báo, đi chậm như rùa
afternoon_3: Thực hành từ vựng - Chỉ và đọc tên động vật qua flashcard lớn
afternoon_4: Hoạt động yên tĩnh - Xếp puzzle động vật, đọc sách

**Thứ 6:**
morning_1: Đón trẻ, STEAM - Quan sát tổ chim nhỏ (mô hình), ăn sáng
morning_2: Thể dục sáng - Bài "Bươm bướm bay bay", tổng kết tuần học
morning_3: HĐNT - Thu gọn đồ chơi, sắp xếp góc thiên nhiên
morning_4: English Review - Ôn tập tất cả từ vựng động vật tuần qua với trò chơi bingo
morning_5: Tổng kết chủ đề - Trình bày động vật yêu thích, chia sẻ điều học được
morning_6: Vệ sinh, ăn trưa (cơm gà xối mỡ), ngủ trưa
afternoon_1: Hoạt động tổng kết - Làm cuốn sách nhỏ về động vật với hình vẽ của trẻ
afternoon_2: Uống nước, ăn xế cuối tuần (bánh kem nhỏ), vận động tự do
afternoon_3: Tiết mục cuối tuần - Trẻ trình diễn mô phỏng động vật yêu thích
afternoon_4: Dọn dẹp, chia sẻ kế hoạch cuối tuần, đón bố mẹ

LƯU Ý:
- Mỗi hoạt động phải CỤ THỂ, có tên rõ ràng
- Bao gồm cả đồ ăn, đồ chơi, phương pháp cụ thể
- Khuyến khích sự tham gia tích cực của trẻ
- Chú ý an toàn và phù hợp độ tuổi {age_group}
"""
        return prompt
        return prompt
    
    def _parse_curriculum_response(self, content, provider):
        """Parse AI response thành format curriculum template structure"""
        try:
            import json
            import re
            
            print(f"🔍 [DEBUG] Parsing curriculum response from {provider}")
            print(f"🔍 [DEBUG] Content length: {len(content)}")
            print(f"🔍 [DEBUG] First 500 chars: {content[:500]}")
            
            # Define the curriculum structure matching the template (5 days only: Mon-Fri)
            curriculum_data = {
                'mon': {}, 'tue': {}, 'wed': {}, 'thu': {}, 'fri': {}
            }
            
            morning_slots = ['morning_1', 'morning_2', 'morning_3', 'morning_4', 'morning_5', 'morning_6']
            afternoon_slots = ['afternoon_1', 'afternoon_2', 'afternoon_3', 'afternoon_4']
            
            # Initialize with sample activities (fallback)
            sample_activities = {
                'morning_1': 'Đón trẻ, massage kích thích giác quan, ăn sáng',
                'morning_2': 'Thể dục buổi sáng, trò chuyện đầu ngày',
                'morning_3': 'Hoạt động ngoài trời (HĐNT)',
                'morning_4': 'English: Vocabulary + Structure',
                'morning_5': 'Hoạt động học tập chính',
                'morning_6': 'Vệ sinh, ăn trưa, ngủ trưa',
                'afternoon_1': 'Hoạt động Lego/Giáo cụ',
                'afternoon_2': 'Uống nước, vận động nhẹ, ăn xế',
                'afternoon_3': 'Yoga/Dance, hoạt động sáng tạo',
                'afternoon_4': 'Trả trẻ, trao đổi với phụ huynh'
            }
            
            # Initialize with sample activities for all days
            days = ['mon', 'tue', 'wed', 'thu', 'fri']
            for day in days:
                for slot in morning_slots + afternoon_slots:
                    curriculum_data[day][slot] = sample_activities.get(slot, f"Hoạt động {slot}")
            
            # Parse the AI response
            lines = content.split('\n')
            current_day = None
            day_mapping = {
                'Thứ 2': 'mon', 'Thứ hai': 'mon', 'Monday': 'mon', 'THỨ 2': 'mon',
                'Thứ 3': 'tue', 'Thứ ba': 'tue', 'Tuesday': 'tue', 'THỨ 3': 'tue',
                'Thứ 4': 'wed', 'Thứ tư': 'wed', 'Wednesday': 'wed', 'THỨ 4': 'wed',
                'Thứ 5': 'thu', 'Thứ năm': 'thu', 'Thursday': 'thu', 'THỨ 5': 'thu',
                'Thứ 6': 'fri', 'Thứ sáu': 'fri', 'Friday': 'fri', 'THỨ 6': 'fri'
            }
            
            activity_count = 0
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # Detect day headers (more flexible)
                day_detected = False
                for day_name, day_code in day_mapping.items():
                    if day_name in line or f"**{day_name}" in line:
                        current_day = day_code
                        day_detected = True
                        print(f"🔍 [DEBUG] Detected day: {day_name} -> {day_code}")
                        break
                
                if day_detected:
                    continue
                
                # Try to parse activity lines with various formats
                if current_day and ':' in line:
                    # Handle direct slot mapping
                    for slot in morning_slots + afternoon_slots:
                        if line.startswith(f"{slot}:"):
                            content_text = line.replace(f"{slot}:", "").strip()
                            if content_text and len(content_text) > 5:
                                curriculum_data[current_day][slot] = content_text
                                activity_count += 1
                                print(f"✅ [DEBUG] Mapped {current_day}.{slot}: {content_text[:50]}...")
                            break
                    
                    # Handle time-based mapping (Vietnamese format)
                    time_patterns = {
                        '7h-8h': 'morning_1', '7:00-8:00': 'morning_1',
                        '8h-8h30': 'morning_2', '8:00-8:30': 'morning_2',
                        '8h30-9h': 'morning_3', '8:30-9:00': 'morning_3',
                        '9h-9h30': 'morning_4', '9:00-9:30': 'morning_4',
                        '9h30-10h': 'morning_5', '9:30-10:00': 'morning_5',
                        '10h30-14h': 'morning_6', '10:30-14:00': 'morning_6',
                        '14h15-15h': 'afternoon_1', '14:15-15:00': 'afternoon_1',
                        '15h-15h30': 'afternoon_2', '15:00-15:30': 'afternoon_2',
                        '15h45-16h': 'afternoon_3', '15:45-16:00': 'afternoon_3',
                        '16h-17h': 'afternoon_4', '16:00-17:00': 'afternoon_4'
                    }
                    
                    for time_pattern, slot in time_patterns.items():
                        if time_pattern in line:
                            content_text = line.split(':', 1)[-1].strip()
                            if content_text and len(content_text) > 5:
                                curriculum_data[current_day][slot] = content_text
                                activity_count += 1
                                print(f"✅ [DEBUG] Time-mapped {current_day}.{slot}: {content_text[:50]}...")
                            break
            
            print(f"🔍 [DEBUG] Total activities parsed: {activity_count}")
            print(f"🔍 [DEBUG] Sample curriculum_data: {curriculum_data['mon']}")
            
            # Convert to JSON format like the existing curriculum system
            curriculum_json = json.dumps(curriculum_data, ensure_ascii=False)
            
            # Return in the format expected by the curriculum system
            return {
                'success': True,
                'content': curriculum_json,
                'provider': provider,
                'data': curriculum_data,
                'message': f"✅ Chương trình học đã được tạo bởi {provider.upper()}"
            }
            
        except Exception as e:
            logger.error(f"❌ Error parsing curriculum response: {e}")
            print(f"❌ [DEBUG] Parse error: {e}")
            print(f"❌ [DEBUG] Content that failed: {content[:200]}...")
            return {
                'success': False,
                'error': f"Lỗi xử lý chương trình học từ AI: {str(e)}",
                'provider': provider
            }
    
    def _fallback_curriculum(self, age_group, week_number):
        """Fallback to original Curriculum service with structured format"""
        try:
            from .curriculum_ai import CurriculumAIService
            import json
            
            service = CurriculumAIService()
            result = service.generate_curriculum_suggestions(age_group, week_number)
            
            if result and "error" not in result:
                # Convert old format to new structured format
                curriculum_data = self._convert_legacy_to_structured(result, week_number)
                
                return {
                    'success': True,
                    'content': json.dumps(curriculum_data, ensure_ascii=False),
                    'provider': 'gemini_fallback',
                    'data': curriculum_data,
                    'message': "✅ Chương trình học đã được tạo bởi GEMINI (Fallback)"
                }
            else:
                return {
                    'success': False,
                    'error': "Không thể tạo chương trình học từ AI",
                    'provider': 'fallback'
                }
                
        except Exception as e:
            logger.error(f"❌ Fallback curriculum failed: {e}")
            return {
                'success': False,
                'error': f"Không thể tạo chương trình học từ AI: {str(e)[:100]}",
                'provider': 'fallback'
            }
    
    def _convert_legacy_to_structured(self, legacy_result, week_number):
        """Convert legacy curriculum format to structured template format"""
        # Create empty structured data (5 days only)
        curriculum_data = {
            'mon': {}, 'tue': {}, 'wed': {}, 'thu': {}, 'fri': {}
        }
        
        morning_slots = ['morning_1', 'morning_2', 'morning_3', 'morning_4', 'morning_5', 'morning_6']
        afternoon_slots = ['afternoon_1', 'afternoon_2', 'afternoon_3', 'afternoon_4']
        
        # Initialize with realistic activities based on template
        default_activities = {
            'morning_1': 'Đón trẻ, STEAM (massage kích thích giác quan), ăn sáng',
            'morning_2': 'Thể dục buổi sáng, trò chuyện đầu ngày, kiểm tra thân thể',
            'morning_3': 'HĐNT (Hoạt động ngoài trời)',
            'morning_4': f'English: Vocabulary + Structure - Tuần {week_number}',
            'morning_5': f'Hoạt động học tập chính - Tuần {week_number}',
            'morning_6': 'Vệ sinh ăn trưa – ngủ trưa',
            'afternoon_1': 'Hoạt động buổi chiều (Lego time/Giáo cụ)',
            'afternoon_2': 'Uống nước – vận động nhẹ – ăn chiều',
            'afternoon_3': 'Yoga/Dance, hoạt động sáng tạo',
            'afternoon_4': 'Trả trẻ – Trao đổi với phụ huynh'
        }
        
        # Special activities for Wednesday (Thứ 4 vui vẻ)
        wed_activities = {
            'morning_4': 'English: Thứ 4 vui vẻ - Games and Fun Activities',
            'morning_5': 'Thứ 4 vui vẻ - Hoạt động đặc biệt',
            'afternoon_1': 'Thứ 4 vui vẻ - Hoạt động sáng tạo đặc biệt'
        }
        
        # Fill with activities for all days (5 days only)
        days = ['mon', 'tue', 'wed', 'thu', 'fri']
        for day in days:
            for slot in morning_slots + afternoon_slots:
                if day == 'wed' and slot in wed_activities:
                    curriculum_data[day][slot] = wed_activities[slot]
                else:
                    curriculum_data[day][slot] = default_activities.get(slot, f"Hoạt động {slot}")
        
        # Try to extract content from legacy result if it's a list
        if isinstance(legacy_result, list) and legacy_result:
            content_text = " ".join(str(item) for item in legacy_result if str(item).strip())
            
            # Use the content as main learning activity for morning_5
            if content_text and len(content_text) > 10:
                for day in days:
                    if day != 'wed':  # Keep Wednesday special
                        curriculum_data[day]['morning_5'] = f"Học tập: {content_text[:100]}..."
        
        return curriculum_data

# Global instance
enhanced_curriculum_ai = EnhancedCurriculumAI()

def get_ai_curriculum_suggestions_enhanced(age_group="2-3 tuổi", week_number=1, use_multi_ai=True):
    """
    Enhanced curriculum generation với multi-AI support
    Returns structured data for template compatibility
    """
    result = enhanced_curriculum_ai.generate_curriculum(
        age_group=age_group,
        week_number=week_number,
        use_multi_ai=use_multi_ai
    )
    
    # Return the structured result
    return result

# Backward compatibility - updated to work with new structure
def get_ai_curriculum_suggestions(age_group="2-3 tuổi", week_number=1):
    """Original function với enhanced fallback - returns structured data"""
    # Try enhanced version first
    try:
        result = get_ai_curriculum_suggestions_enhanced(
            age_group=age_group,
            week_number=week_number,
            use_multi_ai=True
        )
        
        # Return the structured result for template compatibility
        return result
        
    except Exception as e:
        logger.warning(f"⚠️ Enhanced curriculum failed, using original: {e}")
        
        # Original fallback - but convert to structured format
        try:
            from .curriculum_ai import CurriculumAIService
            import json
            
            service = CurriculumAIService()
            legacy_result = service.generate_curriculum_suggestions(age_group, week_number)
            
            if legacy_result:
                # Convert legacy to structured format
                curriculum_data = enhanced_curriculum_ai._convert_legacy_to_structured(legacy_result, week_number)
                
                return {
                    'success': True,
                    'content': json.dumps(curriculum_data, ensure_ascii=False),
                    'provider': 'gemini_legacy',
                    'data': curriculum_data,
                    'message': "✅ Chương trình học đã được tạo bởi GEMINI (Legacy)"
                }
            else:
                return {
                    'success': False,
                    'error': "Không thể tạo chương trình học",
                    'provider': 'legacy_fallback'
                }
                
        except Exception as e:
            logger.error(f"❌ Original curriculum generation failed: {e}")
            return {
                'success': False,
                'error': f"Lỗi AI service: {str(e)[:100]}",
                'provider': 'error'
            }
