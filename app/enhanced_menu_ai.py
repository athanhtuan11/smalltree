"""
Enhanced Menu AI với Multi-AI Support
Hỗ trợ fallback giữa nhiều AI providers
"""

from flask import current_app
import logging

logger = logging.getLogger(__name__)

class EnhancedMenuAI:
    def __init__(self):
        """Initialize Enhanced Menu AI với multi-provider support"""
        self.current_provider = "gemini"  # Default
        self.multi_ai_service = None
        self._init_multi_ai()
    
    def _init_multi_ai(self):
        """Initialize Multi-AI Service nếu available"""
        try:
            from .multi_ai_service import MultiAIService
            import sys
            import os
            
            # Add parent directory to path
            current_dir = os.path.dirname(os.path.abspath(__file__))
            parent_dir = os.path.dirname(current_dir)
            if parent_dir not in sys.path:
                sys.path.append(parent_dir)
            
            from multi_ai_config import MultiAIConfig
            
            config = MultiAIConfig.get_config()
            if config:
                self.multi_ai_service = MultiAIService(config)
                logger.info("✅ Enhanced Menu AI initialized with Multi-AI support")
            else:
                logger.warning("⚠️ No AI providers configured, using fallback")
        except Exception as e:
            logger.warning(f"⚠️ Multi-AI not available: {e}")
    
    def generate_menu(self, age_group="2-3 tuổi", dietary_requirements="", 
                     available_ingredients="", use_multi_ai=True):
        """
        Generate menu với multi-AI fallback support
        """
        # Tạo prompt cho menu
        prompt = self._create_menu_prompt(age_group, dietary_requirements, available_ingredients)
        
        # Try Multi-AI first if available and enabled
        if use_multi_ai and self.multi_ai_service:
            logger.info("🚀 Using Multi-AI Service for menu generation")
            result = self.multi_ai_service.generate_text(prompt)
            
            if result["success"]:
                logger.info(f"✅ Menu generated by {result['provider'].upper()}")
                return self._parse_menu_response(result["content"], result["provider"])
            else:
                logger.warning(f"⚠️ Multi-AI failed: {result['error']}")
                # Fallback to original gemini service
        
        # Fallback to original Gemini service
        logger.info("🔄 Falling back to original Gemini service")
        return self._fallback_gemini_menu(age_group, dietary_requirements, available_ingredients)
    
    def _create_menu_prompt(self, age_group, dietary_requirements, available_ingredients):
        """Tạo prompt cho AI menu generation"""
        prompt = f"""
Bạn là chuyên gia dinh dưỡng trẻ em. Tạo thực đơn tuần cho trẻ {age_group}.

YÊU CẦU:
- Độ tuổi: {age_group}
- Yêu cầu đặc biệt: {dietary_requirements if dietary_requirements else "Không có"}
- Nguyên liệu có sẵn: {available_ingredients if available_ingredients else "Nguyên liệu thông thường"}

TẠO THỰC ĐƠN CHO 6 NGÀY (Thứ 2 - Thứ 7):
Mỗi ngày gồm:
- Bữa sáng
- Phụ sáng  
- Bữa trưa
- Tráng miệng
- Bữa xế
- Bữa xế chiều

Format trả về:
**Thứ 2:**
• Sáng: [Món ăn]
• Phụ sáng: [Món ăn]
• Trưa: [Món ăn]
• Tráng miệng: [Món ăn]
• Xế: [Món ăn]  
• Xế chiều: [Món ăn]

[Tiếp tục cho các ngày khác...]

**Ghi chú dinh dưỡng:**
[Lưu ý về dinh dưỡng phù hợp cho độ tuổi]
"""
        return prompt
    
    def _parse_menu_response(self, content, provider):
        """Parse AI response thành format menu"""
        try:
            # Simple parsing để extract menu items
            lines = content.split('\n')
            menu_items = []
            
            current_day = ""
            for line in lines:
                line = line.strip()
                if line.startswith('**Thứ'):
                    current_day = line.replace('**', '').replace(':', '')
                    menu_items.append(f"📅 **{current_day}:**")
                elif line.startswith('•') and current_day:
                    menu_items.append(f"  {line}")
                elif line and not line.startswith('**') and current_day:
                    if len(menu_items) > 0 and not menu_items[-1].startswith('  •'):
                        menu_items.append(line)
            
            # Add provider info
            menu_items.extend([
                "",
                f"🤖 **Generated by:** {provider.upper()}",
                f"⚡ **Status:** Menu created successfully ✅"
            ])
            
            return menu_items
            
        except Exception as e:
            logger.error(f"❌ Error parsing menu response: {e}")
            return [
                "❌ Lỗi khi xử lý menu từ AI",
                f"🤖 Provider: {provider}",
                "🔄 Vui lòng thử lại"
            ]
    
    def _fallback_gemini_menu(self, age_group, dietary_requirements, available_ingredients):
        """Fallback to original Gemini menu service"""
        try:
            from .menu_ai import get_ai_menu_suggestions
            return get_ai_menu_suggestions(
                age_group=age_group,
                dietary_requirements=dietary_requirements,
                available_ingredients=available_ingredients
            )
        except Exception as e:
            logger.error(f"❌ Fallback Gemini menu failed: {e}")
            return [
                "❌ Không thể tạo menu từ AI",
                "🔄 Vui lòng kiểm tra kết nối mạng và thử lại",
                f"📝 Error: {str(e)[:100]}"
            ]

# Global instance
enhanced_menu_ai = EnhancedMenuAI()

def get_ai_menu_suggestions_enhanced(age_group="2-3 tuổi", dietary_requirements="", 
                                   count=5, available_ingredients="", use_multi_ai=True):
    """
    Enhanced menu generation với multi-AI support
    """
    return enhanced_menu_ai.generate_menu(
        age_group=age_group,
        dietary_requirements=dietary_requirements, 
        available_ingredients=available_ingredients,
        use_multi_ai=use_multi_ai
    )

# Backward compatibility
def get_ai_menu_suggestions(age_group="2-3 tuổi", dietary_requirements="", count=5, available_ingredients=""):
    """Original function với enhanced fallback"""
    # Try enhanced version first
    try:
        return get_ai_menu_suggestions_enhanced(
            age_group=age_group,
            dietary_requirements=dietary_requirements,
            available_ingredients=available_ingredients,
            use_multi_ai=True
        )
    except Exception as e:
        logger.warning(f"⚠️ Enhanced menu failed, using original: {e}")
        
        # Original fallback code
        from .gemini_service import gemini_service
        
        print(f"🚀 [FALLBACK] Original Gemini AI for {age_group}")
        
        age_months = 24
        if "1-3" in age_group:
            age_months = 24
        elif "3-5" in age_group:
            age_months = 48
        elif "1-5" in age_group:
            age_months = 36

        try:
            result = gemini_service.generate_menu_suggestions(
                age_months=age_months,
                available_ingredients=available_ingredients,
                dietary_preferences=dietary_requirements
            )
            
            if isinstance(result, dict) and 'weekly_menu' in result:
                suggestions = []
                days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
                day_names = ['Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7']
                slots = ['morning', 'snack', 'dessert', 'lunch', 'afternoon', 'lateafternoon']
                slot_names = ['Sáng', 'Phụ sáng', 'Tráng miệng', 'Trưa', 'Xế', 'Xế chiều']
                
                for i, day in enumerate(days):
                    suggestions.append(f"📅 **{day_names[i]}:**")
                    day_menu = result['weekly_menu'][day]
                    for j, slot in enumerate(slots):
                        meal = day_menu.get(slot, 'Món ăn dinh dưỡng')
                        suggestions.append(f"  • {slot_names[j]}: {meal}")
                    suggestions.append("")
                
                suggestions.extend([
                    "📊 **Tổng kết:**",
                    f"• Tổng số bữa ăn: {result.get('total_meals', 36)}",
                    "• Trạng thái: Thực đơn đã tạo ✅ (Fallback mode)"
                ])
                
                return suggestions
            else:
                return ["❌ Không thể tạo thực đơn", "🔄 Vui lòng thử lại"]
                
        except Exception as e:
            logger.error(f"❌ Original menu generation failed: {e}")
            return ["❌ Lỗi AI service", f"📝 {str(e)[:100]}"]
