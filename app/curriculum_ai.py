import json
import logging
import time
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold
from config import Config

logger = logging.getLogger(__name__)

class CurriculumAIService:
    def __init__(self):
        """Initialize Gemini AI service for curriculum generation"""
        try:
            genai.configure(api_key=Config.GEMINI_API_KEY)
            self.model = genai.GenerativeModel('gemini-1.5-pro')
            print("üöÄ Curriculum AI service initialized with Gemini 1.5 Pro")
            logger.info("Curriculum AI service initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize Curriculum AI service: {e}")
            raise

    def generate_weekly_curriculum(self, age_group, week_number, themes=None, special_focus=None):
        """
        Generate comprehensive weekly curriculum for smalltree
        
        Args:
            age_group: Age group (e.g., "1-2 tu·ªïi", "2-3 tu·ªïi", "3-4 tu·ªïi")
            week_number: Week number (1-53)
            themes: Optional themes/topics to focus on
            special_focus: Optional special focus areas
        """
        try:
            print(f"üéì [CURRICULUM AI] Generating for {age_group}, week {week_number}")
            
            # Create detailed prompt for curriculum generation
            prompt = self._create_curriculum_prompt(age_group, week_number, themes, special_focus)
            
            # Configure safety settings for educational content
            safety_settings = {
                HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            }
            
            print(f"üöÄ [SPEED] Calling Gemini with {len(prompt)} chars prompt...")
            start_time = time.time()
            
            response = self.model.generate_content(
                prompt,
                safety_settings=safety_settings,
                generation_config=genai.types.GenerationConfig(
                    temperature=0.7,
                    max_output_tokens=8000,
                    top_p=0.8,
                    top_k=40
                )
            )
            
            elapsed = time.time() - start_time
            print(f"‚è∞ [TIMING] Gemini response received in {elapsed:.2f}s")
            
            if not response.text:
                raise Exception("Gemini returned empty response")
            
            # Parse the response
            curriculum_data = self._parse_curriculum_response(response.text)
            
            print(f"‚úÖ [SUCCESS] Generated curriculum for week {week_number}")
            return curriculum_data
            
        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå [ERROR] Curriculum generation failed: {error_msg}")
            logger.error(f"Curriculum generation failed: {error_msg}")
            
            if "quota" in error_msg.lower() or "429" in error_msg:
                raise Exception("‚ùå Gemini API ƒë√£ h·∫øt quota. Vui l√≤ng: 1. Ki·ªÉm tra Google AI Studio, 2. T·∫°o API key m·ªõi, 3. C·∫≠p nh·∫≠t v√†o config.py")
            else:
                raise Exception(f"‚ùå L·ªói t·∫°o ch∆∞∆°ng tr√¨nh h·ªçc: {error_msg}")

    def _create_curriculum_prompt(self, age_group, week_number, themes, special_focus):
        """Create detailed prompt for curriculum generation"""
        
        base_prompt = f"""
T·∫°o ch∆∞∆°ng tr√¨nh h·ªçc chi ti·∫øt cho tr·∫ª m·∫ßm non {age_group}, tu·∫ßn s·ªë {week_number}.

KHUNG TH·ªúI GIAN M·ªñI NG√ÄY (Th·ª© 2 ƒë·∫øn Th·ª© 7):
**BU·ªîI S√ÅNG:**
- 7-8h: ƒê√≥n tr·∫ª
- 8h-8h30: ƒÇn s√°ng
- 8h30-9h: Ho·∫°t ƒë·ªông t·ª± do
- 9h-9h40: Ho·∫°t ƒë·ªông h·ªçc t·∫≠p ch√≠nh
- 9h40-10h30: Ho·∫°t ƒë·ªông ngo√†i tr·ªùi/th·ªÉ d·ª•c
- 10h30-14h: ƒÇn tr∆∞a + Ngh·ªâ tr∆∞a

**BU·ªîI CHI·ªÄU:**
- 14h-14h30: ƒÇn ph·ª• chi·ªÅu
- 14h30-15h30: Ho·∫°t ƒë·ªông h·ªçc t·∫≠p
- 15h30-16h: Ho·∫°t ƒë·ªông t·ª± do/ch∆°i
- 16h-16h30: Chu·∫©n b·ªã v·ªÅ
- 16h30-17h: ƒê√≥n tr·∫ª v·ªÅ
- 17h-18h: Tr√¥ng tr·∫ª mu·ªôn

Y√äU C√ÇU CONTENT:
1. **C·ª• th·ªÉ v√† ph√π h·ª£p v·ªõi {age_group}**
2. **ƒêa d·∫°ng ho·∫°t ƒë·ªông:** h·ªçc t·∫≠p, ch∆°i, th·ªÉ d·ª•c, ngh·ªá thu·∫≠t, khoa h·ªçc ƒë∆°n gi·∫£n
3. **Ph√°t tri·ªÉn to√†n di·ªán:** ng√¥n ng·ªØ, v·∫≠n ƒë·ªông, nh·∫≠n th·ª©c, x√£ h·ªôi, c·∫£m x√∫c
4. **Th·ª±c t·∫ø v√† d·ªÖ th·ª±c hi·ªán** t·∫°i tr∆∞·ªùng m·∫ßm non
5. **T√™n ho·∫°t ƒë·ªông c·ª• th·ªÉ:** VD: "H·ªçc ƒë·∫øm t·ª´ 1-5 v·ªõi tr√°i c√¢y", "T√¥ m√†u con v·∫≠t", "H√°t b√†i B√© l√†m g√¨"

"""

        # Add themes if specified
        if themes:
            base_prompt += f"\nCH·ª¶ ƒê·ªÄ TU·∫¶N: {themes}\n"
        
        # Add special focus if specified  
        if special_focus:
            base_prompt += f"\nTR·ªåNG T√ÇM ƒê·∫∂C BI·ªÜT: {special_focus}\n"

        base_prompt += """
Tr·∫£ v·ªÅ JSON format ch√≠nh x√°c sau:
{
  "week_info": {
    "week_number": """ + str(week_number) + """,
    "age_group": \"""" + age_group + """\",
    "theme": "Ch·ªß ƒë·ªÅ ch√≠nh c·ªßa tu·∫ßn",
    "objectives": ["M·ª•c ti√™u 1", "M·ª•c ti√™u 2", "M·ª•c ti√™u 3"]
  },
  "curriculum": {
    "mon": {
      "morning_1": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 7-8h",
      "morning_2": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 8h-8h30", 
      "morning_3": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 8h30-9h",
      "morning_4": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 9h-9h40",
      "morning_5": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 9h40-10h30",
      "morning_6": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 10h30-14h",
      "afternoon_1": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 14h-14h30",
      "afternoon_2": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 14h30-15h30",
      "afternoon_3": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 15h30-16h",
      "afternoon_4": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 16h-16h30",
      "afternoon_5": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 16h30-17h",
      "afternoon_6": "Ho·∫°t ƒë·ªông c·ª• th·ªÉ 17h-18h"
    },
    "tue": { ... t∆∞∆°ng t·ª± ... },
    "wed": { ... t∆∞∆°ng t·ª± ... },
    "thu": { ... t∆∞∆°ng t·ª± ... },
    "fri": { ... t∆∞∆°ng t·ª± ... },
    "sat": { ... t∆∞∆°ng t·ª± ... }
  },
  "materials_needed": ["V·∫≠t li·ªáu 1", "V·∫≠t li·ªáu 2", "V·∫≠t li·ªáu 3"],
  "assessment_notes": "Ghi ch√∫ ƒë√°nh gi√° v√† quan s√°t tr·∫ª"
}

L∆ØU √ù: 
- M·ªói ho·∫°t ƒë·ªông ph·∫£i C·ª§ TH·ªÇ, kh√¥ng ƒë∆∞·ª£c m∆° h·ªì nh∆∞ "Ho·∫°t ƒë·ªông t·ª± do"
- Ph√π h·ª£p ƒë·ªô tu·ªïi {age_group}
- C√¢n b·∫±ng gi·ªØa h·ªçc v√† ch∆°i
- JSON ph·∫£i ƒë√∫ng format, kh√¥ng c√≥ l·ªói syntax
"""
        
        return base_prompt

    def _parse_curriculum_response(self, response_text):
        """Parse Gemini response to extract curriculum data"""
        try:
            # Clean response text
            cleaned_text = response_text.strip()
            
            # Find JSON content
            start_idx = cleaned_text.find('{')
            end_idx = cleaned_text.rfind('}')
            
            if start_idx == -1 or end_idx == -1:
                raise Exception("No valid JSON found in response")
            
            json_content = cleaned_text[start_idx:end_idx + 1]
            curriculum_data = json.loads(json_content)
            
            # Validate required structure
            if 'curriculum' not in curriculum_data:
                raise Exception("Missing curriculum data in response")
            
            # Validate all days and time slots exist
            required_days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
            required_slots = [
                'morning_1', 'morning_2', 'morning_3', 'morning_4', 'morning_5', 'morning_6',
                'afternoon_1', 'afternoon_2', 'afternoon_3', 'afternoon_4', 'afternoon_5', 'afternoon_6'
            ]
            
            for day in required_days:
                if day not in curriculum_data['curriculum']:
                    raise Exception(f"Missing day: {day}")
                for slot in required_slots:
                    if slot not in curriculum_data['curriculum'][day]:
                        curriculum_data['curriculum'][day][slot] = f"Ho·∫°t ƒë·ªông ph√π h·ª£p khung gi·ªù {slot}"
            
            print(f"‚úÖ [PARSE] Successfully parsed curriculum with {len(required_days)} days")
            return curriculum_data
            
        except json.JSONDecodeError as e:
            print(f"üîç [DEBUG] JSON parse error: {e}")
            print(f"üîç [DEBUG] Response text preview: {response_text[:500]}...")
            raise Exception("‚ùå Gemini tr·∫£ v·ªÅ format kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
        except Exception as e:
            print(f"üîç [DEBUG] Parse error: {e}")
            raise Exception(f"‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ AI: {str(e)}")

# Initialize service
curriculum_ai_service = CurriculumAIService()
