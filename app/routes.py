from flask import Blueprint, render_template, request, redirect, url_for, flash, send_file, session, jsonify, current_app
from app.models import db, Activity, Curriculum, Child, AttendanceRecord, Staff, BmiRecord, ActivityImage, Supplier, Product
from app.forms import EditProfileForm, ActivityCreateForm, ActivityEditForm, SupplierForm, ProductForm
from app.menu_ai import get_ai_menu_suggestions
from calendar import monthrange
from datetime import datetime, date, timedelta
import io, zipfile, os, json, re, secrets
from werkzeug.security import generate_password_hash, check_password_hash
from docx import Document
from docx.shared import Pt

# Enhanced AI imports - Multi-AI support
try:
    from app.enhanced_menu_ai import get_ai_menu_suggestions_enhanced
    ENHANCED_MENU_AI_AVAILABLE = True
    print("‚úÖ Enhanced Menu AI imported successfully")
except ImportError as e:
    ENHANCED_MENU_AI_AVAILABLE = False
    print(f"‚ö†Ô∏è Enhanced Menu AI not available: {e}")

try:
    from app.enhanced_curriculum_ai import get_ai_curriculum_suggestions_enhanced  
    ENHANCED_CURRICULUM_AI_AVAILABLE = True
    print("‚úÖ Enhanced Curriculum AI imported successfully")
except ImportError as e:
    ENHANCED_CURRICULUM_AI_AVAILABLE = False
    print(f"‚ö†Ô∏è Enhanced Curriculum AI not available: {e}")

# Enhanced Security imports
from .security_utils import (
    sanitize_input, validate_age_group, validate_menu_count, 
    validate_ip_address, is_sql_injection_attempt, 
    log_security_event, check_rate_limit, clean_rate_limit_storage
)

# Rate limiting cho AI endpoints - Security enhancement
ai_request_timestamps = {}
AI_RATE_LIMIT_SECONDS = 10  # Ch·ªâ cho ph√©p 1 request AI m·ªói 10 gi√¢y/user
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from docx.shared import RGBColor
from openpyxl import load_workbook, Workbook
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
from PIL import Image

main = Blueprint('main', __name__)

# DEBUG: Test Curriculum AI import ngay khi kh·ªüi ƒë·ªông
try:
    print("üîç [STARTUP DEBUG] Testing curriculum AI import...")
    from app.curriculum_ai import curriculum_ai_service
    print("‚úÖ [STARTUP SUCCESS] Curriculum AI imported successfully!")
    print(f"üìã [STARTUP INFO] Service type: {type(curriculum_ai_service)}")
except Exception as e:
    print(f"‚ùå [STARTUP ERROR] Failed to import curriculum AI: {e}")
    import traceback
    print(f"üìã [STARTUP TRACEBACK] {traceback.format_exc()}")

def redirect_no_permission():
    flash('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y!', 'danger')
    return redirect(request.referrer or url_for('main.index'))

def is_mobile():
    ua = request.user_agent.string.lower()
    return 'mobile' in ua or 'android' in ua or 'iphone' in ua

def calculate_age(birth_date):
    today = datetime.today()
    try:
        birthday = datetime.strptime(birth_date, '%Y-%m-%d')
    except Exception:
        return 0
    age = today.year - birthday.year - ((today.month, today.day) < (birthday.month, birthday.day))
    return age

MAX_LOGIN_ATTEMPTS = 5
LOCKOUT_TIME_MINUTES = 10
LOGIN_COOLDOWN_SECONDS = 30
login_attempts = {}
lockout_until = {}
last_login_time = {}

@main.route('/')
def index():
    mobile = is_mobile()
    return render_template('about.html', title='Home', mobile=mobile)

@main.route('/about')
def about():
    mobile = is_mobile()
    return render_template('about.html', title='About Us', mobile=mobile)

@main.route('/gallery')
def gallery():
    mobile = is_mobile()
    from app.models import ActivityImage
    images = ActivityImage.query.order_by(ActivityImage.upload_date.desc()).all()
    return render_template('gallery.html', title='Gallery', mobile=mobile, images=images)

@main.route('/contact')
def contact():
    mobile = is_mobile()
    return render_template('contact.html', title='Contact Us', mobile=mobile)

@main.route('/activities/new', methods=['GET', 'POST'])
def new_activity():
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    form = ActivityCreateForm()
    if form.validate_on_submit():
        title = form.title.data
        content = form.description.data
        date_val = datetime.strptime(form.date.data, '%Y-%m-%d') if form.date.data else date.today()
        background_file = form.background.data
        image_url = ''
        if background_file and background_file.filename:
            allowed_ext = {'.jpg', '.jpeg', '.png', '.gif', '.jfif'}
            ext = os.path.splitext(background_file.filename)[1].lower()
            safe_filename = re.sub(r'[^a-zA-Z0-9_.-]', '', background_file.filename)
            if ext not in allowed_ext:
                flash('Ch·ªâ cho ph√©p t·∫£i l√™n c√°c file ·∫£nh c√≥ ƒëu√¥i: .jpg, .jpeg, .png, .gif, .jfif!', 'danger')
                return render_template('new_activity.html', form=form, title='ƒêƒÉng b√†i vi·∫øt m·ªõi', mobile=is_mobile())
            filename = 'bg_' + datetime.now().strftime('%Y%m%d%H%M%S') + '_' + safe_filename
            save_path = os.path.join('app', 'static', 'images', filename)
            # Resize background
            img = Image.open(background_file)
            img.thumbnail((1200, 800))
            img.save(save_path)
            image_url = url_for('static', filename=f'images/{filename}')
        new_post = Activity(title=title, description=content, date=date_val, image=image_url)
        db.session.add(new_post)
        db.session.commit()
        # T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh ho·∫°t ƒë·ªông
        activity_dir = os.path.join('app', 'static', 'images', 'activities', str(new_post.id))
        os.makedirs(activity_dir, exist_ok=True)
        # L∆∞u nhi·ªÅu ·∫£nh ho·∫°t ƒë·ªông
        files = request.files.getlist('images')
        for file in files:
            if file and getattr(file, 'filename', None):
                ext = os.path.splitext(file.filename)[1].lower()
                if ext not in ['.jpg', '.jpeg', '.png', '.gif', '.jfif']:
                    continue
                safe_filename = re.sub(r'[^a-zA-Z0-9_.-]', '', file.filename)
                img_filename = datetime.now().strftime('%Y%m%d%H%M%S%f') + '_' + safe_filename
                img_path = os.path.join(activity_dir, img_filename)
                try:
                    file.stream.seek(0)
                    img = Image.open(file.stream)
                    img.thumbnail((1200, 800))
                    img.save(img_path)
                    rel_path = f'images/activities/{new_post.id}/{img_filename}'
                    db.session.add(ActivityImage(filename=img_filename, filepath=rel_path, upload_date=datetime.now(), activity_id=new_post.id))
                except Exception as e:
                    import traceback
                    print(f"[ERROR] L·ªói upload ·∫£nh: {file.filename} - {e}")
                    traceback.print_exc()
                    flash(f"L·ªói upload ·∫£nh: {file.filename} - {e}", 'danger')
                    continue
        db.session.commit()
        flash('ƒê√£ ƒëƒÉng b√†i vi·∫øt m·ªõi!', 'success')
        return redirect(url_for('main.activities'))
    mobile = is_mobile()
    from datetime import date
    current_date_iso = date.today().isoformat()
    return render_template('new_activity.html', form=form, title='ƒêƒÉng b√†i vi·∫øt m·ªõi', mobile=mobile, current_date_iso=current_date_iso)

@main.route('/activities/<int:id>/delete', methods=['POST'])
def delete_activity(id):
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    post = Activity.query.get_or_404(id)
    if post:
        for img in post.images:
            img_path = os.path.join('app', 'static', img.filepath)
            if os.path.exists(img_path):
                os.remove(img_path)
            db.session.delete(img)
        db.session.delete(post)
        db.session.commit()
        flash('ƒê√£ xo√° b√†i vi·∫øt!', 'success')
    else:
        flash('Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ xo√°!', 'danger')
    mobile = is_mobile()
    return redirect(url_for('main.activities', mobile=mobile))

@main.route('/activities/<int:id>')
def activity_detail(id):
    post = Activity.query.get_or_404(id)
    if not post:
        flash('Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt!', 'danger')
        return redirect(url_for('main.activities'))
    activity = {
        'id': post.id,
        'title': post.title,
        'content': post.description,
        'image': post.image,
        'date_posted': post.date.strftime('%Y-%m-%d'),
        'gallery': post.images
    }
    mobile = is_mobile()
    from app.forms import DeleteActivityForm
    form = DeleteActivityForm()
    return render_template('activity_detail.html', activity=activity, title=post.title, mobile=mobile, form=form)

@main.route('/curriculum/new', methods=['GET', 'POST'])
def new_curriculum():
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    if request.method == 'POST':
        week_number = request.form.get('week_number')
        days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
        morning_slots = ['morning_1', 'morning_2', 'morning_3', 'morning_4', 'morning_5', 'morning_6']
        afternoon_slots = ['afternoon_1', 'afternoon_2', 'afternoon_3', 'afternoon_4']
        curriculum_data = {}
        for day in days:
            curriculum_data[day] = {}
            for slot in morning_slots:
                curriculum_data[day][slot] = request.form.get(f'{day}_{slot}')
            for slot in afternoon_slots:
                curriculum_data[day][slot] = request.form.get(f'{day}_{slot}')
        content = json.dumps(curriculum_data, ensure_ascii=False)
        new_week = Curriculum(week_number=week_number, content=content, material=None)
        db.session.add(new_week)
        db.session.commit()
        flash('ƒê√£ th√™m ch∆∞∆°ng tr√¨nh h·ªçc m·ªõi!', 'success')
        return redirect(url_for('main.curriculum'))
    mobile = is_mobile()
    return render_template('new_curriculum.html', title='T·∫°o ch∆∞∆°ng tr√¨nh m·ªõi', mobile=mobile)

@main.route('/curriculum')
def curriculum():
    import secrets
    if 'csrf_token' not in session or not session['csrf_token']:
        session['csrf_token'] = secrets.token_hex(16)
    weeks = Curriculum.query.order_by(Curriculum.week_number).all()
    curriculum = []
    for week in weeks:
        try:
            data = json.loads(week.content)
        except Exception:
            data = {}
        curriculum.append({
            'week_number': week.week_number,
            'data': data
        })
    mobile = is_mobile()
    return render_template('curriculum.html', curriculum=curriculum, title='Ch∆∞∆°ng tr√¨nh h·ªçc', mobile=mobile)

@main.route('/attendance/new', methods=['GET', 'POST'])
def new_student():
    if session.get('role') != 'admin' and session.get('role') != 'teacher':
        return redirect_no_permission()
    if request.method == 'POST':
        name = request.form.get('name')
        student_code = request.form.get('student_code')
        class_name = request.form.get('class_name')
        birth_date = request.form.get('birth_date')
        parent_contact = request.form.get('parent_contact')
        if class_name not in ['Kay 01', 'Kay 02']:
            flash('L·ªõp kh√¥ng h·ª£p l·ªá!', 'danger')
            return redirect(url_for('main.new_student'))
        new_child = Child(name=name, age=0, parent_contact=parent_contact, class_name=class_name, birth_date=birth_date, student_code=student_code)
        db.session.add(new_child)
        db.session.commit()
        flash('ƒê√£ th√™m h·ªçc sinh m·ªõi!', 'success')
        return redirect(url_for('main.attendance'))
    mobile = is_mobile()
    return render_template('new_attendance.html', title='T·∫°o h·ªçc sinh m·ªõi', mobile=mobile)

@main.route('/attendance', methods=['GET', 'POST'])
def attendance():
    if not session.get('role'):
        flash('B·∫°n ph·∫£i ƒëƒÉng nh·∫≠p m·ªõi truy c·∫≠p ƒë∆∞·ª£c trang n√†y!', 'danger')
        return redirect(url_for('main.about'))
    if session.get('role') == 'parent':
        return redirect(url_for('main.attendance_history'))
    from datetime import date
    attendance_date = request.args.get('attendance_date') or date.today().strftime('%Y-%m-%d')
    selected_class = request.args.get('class_name')
    # L·∫•y danh s√°ch l·ªõp c·ªë ƒë·ªãnh
    class_names = ['Kay 01', 'Kay 02']
    # L·ªçc h·ªçc sinh theo l·ªõp
    if selected_class:
        students = Child.query.filter_by(class_name=selected_class).all()
    else:
        students = Child.query.all()
    # L·∫•y tr·∫°ng th√°i ƒëi·ªÉm danh t·ª´ database cho ng√†y ƒë√£ ch·ªçn
    for student in students:
        record = AttendanceRecord.query.filter_by(child_id=student.id, date=attendance_date).first()
        if record:
            student.status = record.status
        else:
            student.status = 'V·∫Øng'
    if request.method == 'POST':
        for student in students:
            present_value = request.form.get(f'present_{student.id}')
            if present_value == 'yes':
                status = 'C√≥ m·∫∑t'
            elif present_value == 'absent_excused':
                status = 'V·∫Øng m·∫∑t c√≥ ph√©p'
            elif present_value == 'absent_unexcused':
                status = 'V·∫Øng m·∫∑t kh√¥ng ph√©p'
            else:
                status = 'V·∫Øng'
            record = AttendanceRecord.query.filter_by(child_id=student.id, date=attendance_date).first()
            if record:
                record.status = status
            else:
                record = AttendanceRecord(child_id=student.id, date=attendance_date, status=status)
                db.session.add(record)
            student.status = status
        db.session.commit()
        flash('ƒê√£ l∆∞u ƒëi·ªÉm danh!', 'success')
        return redirect(url_for('main.attendance', attendance_date=attendance_date, class_name=selected_class))
    mobile = is_mobile()
    return render_template('attendance.html', students=students, title='ƒêi·ªÉm danh', current_date=attendance_date, mobile=mobile, class_names=class_names, selected_class=selected_class)

@main.route('/attendance/mark', methods=['GET', 'POST'])
def mark_attendance():
    students = Child.query.all()
    if request.method == 'POST':
        for student in students:
            present = request.form.get(f'present_{student.id}') == 'on'
            # TODO: L∆∞u tr·∫°ng th√°i ƒëi·ªÉm danh v√†o database (c·∫ßn th√™m tr∆∞·ªùng status v√†o model Child)
            student.status = 'C√≥ m·∫∑t' if present else 'V·∫Øng'
        db.session.commit()
        flash('ƒê√£ ƒëi·ªÉm danh cho t·∫•t c·∫£ h·ªçc sinh!', 'success')
        return redirect(url_for('main.attendance'))
    mobile = is_mobile()
    return render_template('mark_attendance.html', students=students, title='ƒêi·ªÉm danh h·ªçc sinh', mobile=mobile)

@main.route('/attendance/history')
def attendance_history():
    if session.get('role') == 'parent':
        # Ch·ªâ cho ph·ª• huynh xem l·ªãch s·ª≠ ƒëi·ªÉm danh c·ªßa con m√¨nh
        user_id = session.get('user_id')
        child = Child.query.filter_by(id=user_id).first()
        students = [child] if child else []
    else:
        students = Child.query.all()
    month = request.args.get('month')
    if month:
        year, m = map(int, month.split('-'))
    else:
        today = datetime.today()
        year, m = today.year, today.month
        month = f"{year:04d}-{m:02d}"
    num_days = monthrange(year, m)[1]
    days_in_month = [f"{year:04d}-{m:02d}-{day:02d}" for day in range(1, num_days+1)]
    records_raw = AttendanceRecord.query.filter(AttendanceRecord.date.like(f"{year:04d}-{m:02d}-%")).all()
    records = {}
    for r in records_raw:
        records[(r.child_id, r.date)] = r
    mobile = is_mobile()
    return render_template('attendance_history.html', records=records, students=students, days_in_month=days_in_month, selected_month=month, title='L·ªãch s·ª≠ ƒëi·ªÉm danh', mobile=mobile)

@main.route('/invoice', methods=['GET', 'POST'])
def invoice():
    month = request.args.get('month')
    if month:
        year, m = map(int, month.split('-'))
    else:
        today = datetime.today()
        year, m = today.year, today.month
        month = f"{year:04d}-{m:02d}"
    num_days = monthrange(year, m)[1]
    days_in_month = [f"{year:04d}-{m:02d}-{day:02d}" for day in range(1, num_days+1)]
    students = Child.query.all()
    records_raw = AttendanceRecord.query.filter(AttendanceRecord.date.like(f"{year:04d}-{m:02d}-%")).all()
    # T√≠nh s·ªë ng√†y c√≥ m·∫∑t v√† s·ªë ng√†y v·∫Øng m·∫∑t kh√¥ng ph√©p cho t·ª´ng h·ªçc sinh
    attendance_days = {student.id: 0 for student in students}
    absent_unexcused_days = {student.id: 0 for student in students}
    valid_student_ids = set(attendance_days.keys())
    for r in records_raw:
        if r.child_id not in valid_student_ids:
            continue
        if r.status == 'C√≥ m·∫∑t':
            attendance_days[r.child_id] += 1
        elif r.status == 'V·∫Øng m·∫∑t kh√¥ng ph√©p':
            absent_unexcused_days[r.child_id] += 1
    invoices = []
    if request.method == 'POST':
        selected_ids = request.form.getlist('student_ids')
        if request.form.get('export_word'):
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, 'w') as zipf:
                for student in students:
                    if str(student.id) in selected_ids:
                        doc = Document()
                        # B·∫£ng header: th√¥ng tin tr∆∞·ªùng b√™n tr√°i, logo b√™n ph·∫£i
                        header_table = doc.add_table(rows=1, cols=2)
                        header_table.style = None  # Remove borders for a cleaner look
                        left_cell = header_table.cell(0,0)
                        right_cell = header_table.cell(0,1)
                        left_cell.vertical_alignment = 1  # Top
                        right_cell.vertical_alignment = 1  # Top
                        # Logo on the left
                        logo_path = os.path.join(os.path.dirname(__file__), 'static', 'images', 'logo.jpg')
                        if os.path.exists(logo_path):
                            run_logo = left_cell.paragraphs[0].add_run()
                            from docx.shared import Inches
                            run_logo.add_picture(logo_path, width=Inches(1.2))
                            left_cell.paragraphs[0].alignment = 0  # Left
                        # School info on the right
                        right_paragraph = right_cell.paragraphs[0]
                        right_paragraph.alignment = 1  # Center
                        right_paragraph.add_run('SMALL TREE\n').bold = True
                        right_paragraph.add_run('M·∫¶M NON C√ÇY NH·ªé\n').bold = True
                        right_paragraph.add_run('S·ªë 1, Rchai‚Äô 2, ƒê·ª©c Tr·ªçng, L√¢m ƒê·ªìng\n')
                        right_paragraph.add_run('SDT: 0917618868 / STK: Nguy·ªÖn Th·ªã V√¢n 108875858567 NH VietinBank')
                        # ƒê·∫£m b·∫£o m·ªçi paragraph trong cell ƒë·ªÅu cƒÉn gi·ªØa
                        for para in right_cell.paragraphs:
                            para.alignment = 1
                        doc.add_paragraph('')
                        title = doc.add_heading(f'H√ìA ƒê∆†N THANH TO√ÅN TH√ÅNG {month}', 0)
                        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
                        run = title.runs[0]
                        run.font.size = Pt(18)  # Reduce font size
                        run.font.color.rgb = RGBColor(76, 175, 80)
                        run.font.name = 'Comic Sans MS'
                        
                        # B·∫£ng th√¥ng tin h·ªçc sinh
                        info_table = doc.add_table(rows=2, cols=2)
                        info_table.style = 'Table Grid'
                        for row in info_table.rows:
                            for cell in row.cells:
                                tc = cell._tc
                                tcPr = tc.get_or_add_tcPr()
                                shd = OxmlElement('w:shd')
                                shd.set(qn('w:fill'), 'e8f5e9')
                                tcPr.append(shd)
                        info_table.cell(0,0).text = 'H·ªç v√† t√™n:'
                        info_table.cell(0,1).text = student.name
                        info_table.cell(1,0).text = 'Ng√†y sinh:'
                        info_table.cell(1,1).text = student.birth_date or "-"
                        doc.add_paragraph('')
                        # B·∫£ng t·ªïng k·∫øt
                        days = attendance_days.get(student.id, 0)
                        absents = absent_unexcused_days.get(student.id, 0)
                        age = calculate_age(student.birth_date) if student.birth_date else 0
                        if age == 1:
                            tuition = 1850000
                        elif age == 2:
                            tuition = 1750000
                        elif age == 3:
                            tuition = 1650000
                        elif age == 4:
                            tuition = 1550000
                        else:
                            tuition = 1500000
                        excused_absents = sum(1 for r in records_raw if r.child_id == student.id and r.status == 'V·∫Øng m·∫∑t c√≥ ph√©p')
                        summary_table = doc.add_table(rows=7, cols=2)
                        summary_table.style = 'Table Grid'
                        for row in summary_table.rows:
                            for cell in row.cells:
                                tc = cell._tc
                                tcPr = tc.get_or_add_tcPr()
                                shd = OxmlElement('w:shd')
                                shd.set(qn('w:fill'), 'e8f5e9')
                                tcPr.append(shd)
                        summary_table.cell(0,0).text = 'S·ªë ng√†y ƒëi h·ªçc:'
                        summary_table.cell(0,1).text = str(days)
                        summary_table.cell(1,0).text = 'S·ªë ng√†y v·∫Øng kh√¥ng ph√©p:'
                        summary_table.cell(1,1).text = str(absents)
                        summary_table.cell(2,0).text = 'S·ªë ng√†y v·∫Øng c√≥ ph√©p:'
                        summary_table.cell(2,1).text = str(excused_absents)
                        summary_table.cell(3,0).text = 'Ti·ªÅn ƒÉn:'
                        summary_table.cell(3,1).text = f'{days * 38000:,} ƒë'
                        summary_table.cell(4,0).text = 'Ti·ªÅn h·ªçc ph√≠:'
                        summary_table.cell(4,1).text = f'{tuition:,} ƒë'
                        summary_table.cell(5,0).text = 'Ti·ªÅn h·ªçc anh vƒÉn:'
                        summary_table.cell(5,1).text = '500,000 ƒë'
                        summary_table.cell(6,0).text = 'Ti·ªÅn h·ªçc STEMax:'
                        summary_table.cell(6,1).text = '200,000 ƒë'
                        total = tuition + days * 38000 + absents * 38000 + 500000 + 200000
                        total_paragraph = doc.add_paragraph(f'T·ªïng ti·ªÅn c·∫ßn thanh to√°n: {total:,} ƒë')
                        total_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
                        total_run = total_paragraph.runs[0]
                        total_run.font.color.rgb = RGBColor(76, 175, 80)
                        total_run.font.bold = True
                        total_run.font.name = 'Comic Sans MS'

                        # Add payment info table
                        from datetime import datetime
                        payment_table = doc.add_table(rows=1, cols=2)
                        payment_table.style = None  # No border for clean look
                        left_payment_cell = payment_table.cell(0,0)
                        right_payment_cell = payment_table.cell(0,1)
                        left_payment_cell.vertical_alignment = 1  # Top
                        right_payment_cell.vertical_alignment = 1  # Top
                        left_payment_cell.text = 'Ng∆∞·ªùi n·ªôp ti·ªÅn:'
                        left_payment_cell.add_paragraph('(K√≠ v√† ghi r√µ h·ªç t√™n)')                        
                        now = datetime.now()
                        right_payment_cell.text = ''  # X√≥a n·ªôi dung m·∫∑c ƒë·ªãnh
                        right_payment_cell.add_paragraph(f'Ng√†y ...... th√°ng ...... nƒÉm {now.year}').alignment = 1
                        right_payment_cell.add_paragraph('Ch·ªß Tr∆∞·ªùng').alignment = 1
                        right_payment_cell.add_paragraph('(K√≠ v√† ghi r√µ h·ªç t√™n)').alignment = 1
                        right_payment_cell.add_paragraph().alignment = 1
                        right_payment_cell.add_paragraph().alignment = 1
                        right_payment_cell.add_paragraph('Nguy·ªÖn Th·ªã V√¢n').alignment = 1
                        
                        file_stream = io.BytesIO()
                        doc.save(file_stream)
                        file_stream.seek(0)
                        filename = f"invoice_{student.name}_{month}.docx"
                        zipf.writestr(filename, file_stream.read())
            zip_buffer.seek(0)
            return send_file(zip_buffer, download_name=f"invoices_{month}.zip", as_attachment=True)
        else:
            for student in students:
                if str(student.id) in selected_ids:
                    days_present = attendance_days.get(student.id, 0)
                    days_absent_unexcused = absent_unexcused_days.get(student.id, 0)
                    # H·ªçc ph√≠ theo ƒë·ªô tu·ªïi
                    if student.age == 1:
                        tuition = 1850000
                    elif student.age == 2:
                        tuition = 1750000
                    elif student.age == 3:
                        tuition = 1650000
                    elif student.age == 4:
                        tuition = 1550000
                    else:
                        tuition = 1500000
                    total = (days_present + days_absent_unexcused) * 38000 + tuition
                    invoices.append(f"H·ªçc sinh {student.name}: ({days_present} ng√†y c√≥ m·∫∑t + {days_absent_unexcused} ng√†y v·∫Øng kh√¥ng ph√©p) √ó 38.000ƒë + {tuition:,}ƒë = {total:,}ƒë")
    mobile = is_mobile()
    student_ages = {student.id: calculate_age(student.birth_date) if student.birth_date else 0 for student in students}
    return render_template('invoice.html', students=students, attendance_days=attendance_days, absent_unexcused_days=absent_unexcused_days, selected_month=month, invoices=invoices, days_in_month=days_in_month, records={ (r.child_id, r.date): r for r in records_raw }, student_ages=student_ages, title='Xu·∫•t h√≥a ƒë∆°n', mobile=mobile)

@main.route('/register', methods=['GET'])
def register():
    return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')

@main.route('/register/parent', methods=['POST'])
def register_parent():
    name = request.form.get('parent_name')
    email = request.form.get('parent_email')
    phone = request.form.get('parent_phone')
    child_name = request.form.get('child_name')
    child_age = request.form.get('child_age')
    password = request.form.get('parent_password')
    password_confirm = request.form.get('parent_password_confirm')
    if password != password_confirm:
        flash('M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    # Ki·ªÉm tra tr√πng t√™n ho·∫∑c email v·ªõi Child, Staff, admin
    if (Child.query.filter_by(name=child_name).first() or
        Staff.query.filter_by(name=child_name).first() or
        child_name == 'admin'):
        flash('T√™n h·ªçc sinh ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    if (Child.query.filter_by(email=email).first() or
        Staff.query.filter_by(email=email).first() or
        email == 'admin@smalltree.vn'):
        flash('Email ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    student_code = request.form.get('student_code')
    hashed_pw = generate_password_hash(password)
    new_child = Child(name=child_name, age=child_age, parent_contact=name, email=email, phone=phone, password=hashed_pw, student_code=student_code)
    db.session.add(new_child)
    db.session.commit()
    flash('ƒêƒÉng k√Ω ph·ª• huynh th√†nh c√¥ng!', 'success')
    return redirect(url_for('main.about'))

@main.route('/register/teacher', methods=['POST'])
def register_teacher():
    name = request.form.get('teacher_name')
    email = request.form.get('teacher_email')
    phone = request.form.get('teacher_phone')
    position = request.form.get('teacher_position')
    password = request.form.get('teacher_password')
    password_confirm = request.form.get('teacher_password_confirm')
    if password != password_confirm:
        flash('M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    # Ki·ªÉm tra tr√πng t√™n ho·∫∑c email v·ªõi Child, Staff, admin
    if (Staff.query.filter_by(name=name).first() or
        Child.query.filter_by(name=name).first() or
        name == 'admin'):
        flash('T√™n gi√°o vi√™n ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    if (Staff.query.filter_by(email=email).first() or
        Child.query.filter_by(email=email).first() or
        email == 'admin@smalltree.vn'):
        flash('Email ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    hashed_pw = generate_password_hash(password)
    new_staff = Staff(name=name, position=position, contact_info=phone, email=email, phone=phone, password=hashed_pw)
    db.session.add(new_staff)
    db.session.commit()
    flash('ƒêƒÉng k√Ω gi√°o vi√™n th√†nh c√¥ng!', 'success')
    return redirect(url_for('main.about'))

@main.route('/login', methods=['GET', 'POST'])
def login():
    user_ip = request.remote_addr
    now = datetime.now()
    # Ki·ªÉm tra lockout do nh·∫≠p sai
    if user_ip in lockout_until and now < lockout_until[user_ip]:
        flash(f'T√†i kho·∫£n ho·∫∑c IP n√†y b·ªã kh√≥a ƒëƒÉng nh·∫≠p t·∫°m th·ªùi. Vui l√≤ng th·ª≠ l·∫°i sau!', 'danger')
        return render_template('login.html', title='ƒêƒÉng nh·∫≠p')
    # Ki·ªÉm tra cooldown sau ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    if user_ip in last_login_time and (now - last_login_time[user_ip]).total_seconds() < LOGIN_COOLDOWN_SECONDS:
        wait_time = LOGIN_COOLDOWN_SECONDS - int((now - last_login_time[user_ip]).total_seconds())
        flash(f'B·∫°n v·ª´a ƒëƒÉng nh·∫≠p th√†nh c√¥ng. Vui l√≤ng ch·ªù {wait_time} gi√¢y tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p l·∫°i!', 'warning')
        return render_template('login.html', title='ƒêƒÉng nh·∫≠p')
    if request.method == 'POST':
        email_or_phone = request.form.get('email')
        password = request.form.get('password')
        # Ki·ªÉm tra admin
        admin = Staff.query.filter_by(position='admin').first()
        if admin and (email_or_phone == admin.email or email_or_phone == admin.phone) and check_password_hash(admin.password, password):
            session['user_id'] = admin.id
            session['role'] = 'admin'
            flash('ƒêƒÉng nh·∫≠p admin th√†nh c√¥ng!', 'success')
            login_attempts[user_ip] = 0
            last_login_time[user_ip] = now
            return redirect(url_for('main.about'))
        user = Child.query.filter(((Child.email==email_or_phone)|(Child.phone==email_or_phone))).first()
        staff = Staff.query.filter(((Staff.email==email_or_phone)|(Staff.phone==email_or_phone))).first()
        if user and check_password_hash(user.password, password):
            session['user_id'] = user.id
            session['role'] = 'parent'
            flash('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', 'success')
            login_attempts[user_ip] = 0
            last_login_time[user_ip] = now
            return redirect(url_for('main.about'))
        elif staff and check_password_hash(staff.password, password):
            session['user_id'] = staff.id
            session['role'] = 'teacher'
            flash('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', 'success')
            login_attempts[user_ip] = 0
            last_login_time[user_ip] = now
            return redirect(url_for('main.about'))
        else:
            login_attempts[user_ip] = login_attempts.get(user_ip, 0) + 1
            if login_attempts[user_ip] >= MAX_LOGIN_ATTEMPTS:
                lockout_until[user_ip] = now + timedelta(minutes=LOCKOUT_TIME_MINUTES)
                flash(f'B·∫°n ƒë√£ nh·∫≠p sai qu√° s·ªë l·∫ßn cho ph√©p. ƒêƒÉng nh·∫≠p b·ªã kh√≥a {LOCKOUT_TIME_MINUTES} ph√∫t!', 'danger')
            else:
                flash('Sai th√¥ng tin ƒëƒÉng nh·∫≠p!', 'danger')
            return render_template('login.html', title='ƒêƒÉng nh·∫≠p')
    return render_template('login.html', title='ƒêƒÉng nh·∫≠p')

@main.route('/logout')
def logout():
    session.clear()
    flash('ƒê√£ ƒëƒÉng xu·∫•t!', 'success')
    return redirect(url_for('main.about'))

@main.route('/create-test-account')
def create_test_account():
    """Create test account for debugging purposes"""
    # Check if gv1@gmail.com already exists
    existing_staff = Staff.query.filter_by(email='gv1@gmail.com').first()
    
    if existing_staff:
        return jsonify({
            'status': 'exists',
            'message': f'Account gv1@gmail.com already exists with position: {existing_staff.position}',
            'staff_id': existing_staff.id
        })
    
    # Create new staff account
    hashed_password = generate_password_hash('123456')
    
    new_staff = Staff(
        name='Gi√°o vi√™n 1',
        position='teacher',
        contact_info='gv1@gmail.com',
        email='gv1@gmail.com', 
        phone='0123456789',
        password=hashed_password
    )
    
    db.session.add(new_staff)
    db.session.commit()
    
    return jsonify({
        'status': 'created',
        'message': 'Test account created successfully',
        'email': 'gv1@gmail.com',
        'password': '123456',
        'position': 'teacher',
        'staff_id': new_staff.id
    })

@main.route('/accounts', methods=['GET', 'POST'])
def accounts():
    # Ch·ªâ cho ph√©p ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n administrator duy nh·∫•t
    ADMIN_USERNAME = 'admin'
    ADMIN_PASSWORD = 'admin123'
    if session.get('role') != 'admin':
        if request.method == 'POST':
            username = request.form.get('username')
            password = request.form.get('password')
            if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
                session['user_id'] = 'admin'
                session['role'] = 'admin'
                flash('ƒêƒÉng nh·∫≠p administrator th√†nh c√¥ng!', 'success')
                parents = Child.query.all()
                teachers = Staff.query.all()
                mobile = is_mobile()
                return render_template('accounts.html', parents=parents, teachers=teachers, show_modal=False, title='Qu·∫£n l√Ω t√†i kho·∫£n', mobile=mobile)
            else:
                flash('Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u administrator!', 'danger')
                return render_template('accounts.html', show_modal=True, title='Qu·∫£n l√Ω t√†i kho·∫£n')
        return render_template('accounts.html', show_modal=True, title='Qu·∫£n l√Ω t√†i kho·∫£n')
    parents = Child.query.all()
    teachers = Staff.query.all()
    mobile = is_mobile()
    # Hide sensitive info for non-admins
    show_sensitive = session.get('role') == 'admin'
    def mask_user(u):
        return {
            'id': u.id,
            'name': u.name,
            'email': u.email if show_sensitive else '·∫®n',
            'phone': u.phone if show_sensitive else '·∫®n',
            'student_code': getattr(u, 'student_code', None) if show_sensitive else '·∫®n',
            'class_name': getattr(u, 'class_name', None) if show_sensitive else '·∫®n',
            'parent_contact': getattr(u, 'parent_contact', None) if show_sensitive else '·∫®n',
            'position': getattr(u, 'position', None) if show_sensitive else '·∫®n',
        }
    masked_parents = [mask_user(p) for p in parents]
    masked_teachers = [mask_user(t) for t in teachers]
    return render_template('accounts.html', parents=masked_parents, teachers=masked_teachers, show_modal=False, title='Qu·∫£n l√Ω t√†i kho·∫£n', mobile=mobile)

@main.route('/curriculum/<int:week_number>/delete', methods=['POST'])
def delete_curriculum(week_number):
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if week:
        db.session.delete(week)
        db.session.commit()
        flash(f'ƒê√£ xo√° ch∆∞∆°ng tr√¨nh h·ªçc tu·∫ßn {week_number}!', 'success')
    else:
        flash('Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng tr√¨nh h·ªçc ƒë·ªÉ xo√°!', 'danger')
    return redirect(url_for('main.curriculum'))

@main.route('/curriculum/<int:week_number>/edit', methods=['GET', 'POST'])
def edit_curriculum(week_number):
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if not week:
        flash('Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng tr√¨nh h·ªçc ƒë·ªÉ ch·ªânh s·ª≠a!', 'danger')
        return redirect(url_for('main.curriculum'))
    import json
    if request.method == 'POST':
        days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
        morning_slots = ['morning_1', 'morning_2', 'morning_3', 'morning_4', 'morning_5', 'morning_6']
        afternoon_slots = ['afternoon_1', 'afternoon_2', 'afternoon_3', 'afternoon_4']
        curriculum_data = {}
        for day in days:
            curriculum_data[day] = {}
            for slot in morning_slots:
                curriculum_data[day][slot] = request.form.get(f'{day}_{slot}')
            for slot in afternoon_slots:
                curriculum_data[day][slot] = request.form.get(f'{day}_{slot}')
        week.content = json.dumps(curriculum_data, ensure_ascii=False)
        db.session.commit()
        flash(f'ƒê√£ c·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh h·ªçc tu·∫ßn {week_number}!', 'success')
        return redirect(url_for('main.curriculum'))
    data = json.loads(week.content)
    mobile = is_mobile()
    return render_template('edit_curriculum.html', week=week, data=data, title=f'Ch·ªânh s·ª≠a ch∆∞∆°ng tr√¨nh tu·∫ßn {week_number}', mobile=mobile)

@main.route('/profile')
def profile():
    user = None
    role = session.get('role')
    user_id = session.get('user_id')
    if role == 'parent':
        user = Child.query.get(user_id)
        role_display = 'Ph·ª• huynh'
        full_name = user.parent_contact if user else ''
        info = {
            'full_name': full_name,
            'email': user.email if user else '',
            'phone': user.phone if user else '',
            'role_display': role_display,
            'student_code': user.student_code if user else '',
            'class_name': user.class_name if user else '',
            'birth_date': user.birth_date if user else '',
            'parent_contact': user.parent_contact if user else '',
        }
    elif role == 'teacher' or role == 'admin':
        # Gi√°o vi√™n v√† admin xem ƒë∆∞·ª£c t·∫•t c·∫£ th√¥ng tin c·ªßa b·∫£n th√¢n
        user = Staff.query.get(user_id) if role == 'teacher' else None
        role_display = 'Gi√°o vi√™n' if role == 'teacher' else 'Admin'
        full_name = user.name if user else 'Admin'
        info = {
            'full_name': full_name,
            'email': user.email if user else '',
            'phone': user.phone if user else '',
            'role_display': role_display,
            'student_code': '',
            'class_name': getattr(user, 'position', '') if user else '',
            'birth_date': '',
            'parent_contact': '',
        }
    else:
        flash('Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n!', 'danger')
        return redirect(url_for('main.about'))
    mobile = is_mobile()
    return render_template('profile.html', user=info, mobile=mobile)

@main.route('/profile/edit', methods=['GET', 'POST'])
def edit_profile():
    role = session.get('role')
    user_id = session.get('user_id')
    if role == 'parent':
        flash('Ph·ª• huynh kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a th√¥ng tin!', 'danger')
        return redirect(url_for('main.profile'))
    elif role == 'teacher':
        user = Staff.query.get(user_id)
        full_name = user.name
    else:
        flash('Admin kh√¥ng th·ªÉ ch·ªânh s·ª≠a th√¥ng tin!', 'danger')
        return redirect(url_for('main.profile'))
    if not user:
        flash('Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n!', 'danger')
        return redirect(url_for('main.profile'))
    form = EditProfileForm(full_name=full_name, email=user.email, phone=user.phone)
    if form.validate_on_submit():
        user.name = form.full_name.data
        user.email = form.email.data
        user.phone = form.phone.data
        if form.password.data:
            if not form.old_password.data:
                flash('Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈© ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u!', 'danger')
                return render_template('edit_profile.html', form=form)
            if user.password != form.old_password.data:
                flash('M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!', 'danger')
                return render_template('edit_profile.html', form=form)
            user.password = form.password.data
        db.session.commit()
        flash('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.profile'))
    mobile = is_mobile()
    return render_template('edit_profile.html', form=form, mobile=mobile)

@main.route('/students')
def student_list():
    students = Child.query.all()
    mobile = is_mobile()
    role = session.get('role')
    user_id = session.get('user_id')
    def mask_student(s):
        if role == 'parent':
            # Ph·ª• huynh ch·ªâ xem ƒë∆∞·ª£c th√¥ng tin con m√¨nh
            if s.id != user_id:
                return None
            return {
                'id': s.id,
                'name': s.name,
                'email': s.email,
                'phone': s.phone,
                'student_code': s.student_code,
                'class_name': s.class_name,
                'parent_contact': s.parent_contact,
            }
        # Gi√°o vi√™n v√† admin xem ƒë∆∞·ª£c t·∫•t c·∫£ th√¥ng tin
        return {
            'id': s.id,
            'name': s.name,
            'email': s.email,
            'phone': s.phone,
            'student_code': s.student_code,
            'class_name': s.class_name,
            'parent_contact': s.parent_contact,
        }
    masked_students = [m for m in (mask_student(s) for s in students) if m]
    return render_template('student_list.html', students=masked_students, title='Danh s√°ch h·ªçc sinh', mobile=mobile)

@main.route('/students/<int:student_id>/edit', methods=['GET', 'POST'])
def edit_student(student_id):
    if session.get('role') != 'admin' and session.get('role') != 'teacher':
        return redirect_no_permission()
    student = Child.query.get_or_404(student_id)
    if request.method == 'POST':
        class_name = request.form.get('class_name')
        if class_name not in ['Kay 01', 'Kay 02']:
            flash('L·ªõp kh√¥ng h·ª£p l·ªá!', 'danger')
            return redirect(url_for('main.edit_student', student_id=student_id))
        student.name = request.form.get('name')
        student.student_code = request.form.get('student_code')
        student.class_name = class_name
        student.birth_date = request.form.get('birth_date')
        student.parent_contact = request.form.get('parent_contact')
        db.session.commit()
        flash('ƒê√£ l∆∞u thay ƒë·ªïi!', 'success')
        return redirect(url_for('main.student_list'))
    mobile = is_mobile()
    return render_template('edit_student.html', student=student, title='Ch·ªânh s·ª≠a h·ªçc sinh', mobile=mobile)

@main.route('/students/<int:student_id>/delete', methods=['POST'])
def delete_student(student_id):
    if session.get('role') != 'admin' and session.get('role') != 'teacher':
        return redirect_no_permission()
    student = Child.query.get_or_404(student_id)
    db.session.delete(student)
    db.session.commit()
    flash('ƒê√£ xo√° h·ªçc sinh!', 'success')
    return redirect(url_for('main.student_list'))

@main.route('/admin/change-password', methods=['GET', 'POST'])
def change_admin_password():
    if session.get('role') != 'admin':
        flash('B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªïi m·∫≠t kh·∫©u admin!', 'danger')
        return redirect(url_for('main.login'))
    admin = Staff.query.filter_by(name='admin').first()
    if not admin:
        flash('Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n admin!', 'danger')
        return redirect(url_for('main.accounts'))
    if request.method == 'POST':
        old_password = request.form.get('old_password')
        new_password = request.form.get('new_password')
        confirm_password = request.form.get('confirm_password')
        if old_password != admin.password:
            flash('M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng!', 'danger')
        elif new_password != confirm_password:
            flash('M·∫≠t kh·∫©u m·ªõi nh·∫≠p l·∫°i kh√¥ng kh·ªõp!', 'danger')
        else:
            from werkzeug.security import generate_password_hash
            admin.password = generate_password_hash(new_password)
            db.session.commit()
            flash('ƒê·ªïi m·∫≠t kh·∫©u admin th√†nh c√¥ng!', 'success')
            return redirect(url_for('main.accounts'))
    return render_template('change_admin_password.html', title='ƒê·ªïi m·∫≠t kh·∫©u Admin')

@main.route('/activities')
def activities():
    posts = Activity.query.order_by(Activity.date.desc()).all()
    activities = [
        {
            'id': post.id,
            'title': post.title,
            'content': post.description,
            'image': post.image,
            'date_posted': post.date.strftime('%Y-%m-%d'),
            'images': post.images  # Truy·ªÅn danh s√°ch ·∫£nh gallery
        } for post in posts
    ]
    mobile = is_mobile()
    from app.forms import DeleteActivityForm
    form = DeleteActivityForm()
    return render_template('activities.html', activities=activities, title='Ho·∫°t ƒë·ªông', mobile=mobile, form=form)

@main.route('/accounts/create', methods=['GET', 'POST'])
def create_account():
    if session.get('role') != 'admin':
        return redirect_no_permission()
    if request.method == 'POST':
        role = request.form.get('role')
        name = request.form.get('name')
        email = request.form.get('email')
        phone = request.form.get('phone')
        password = request.form.get('password')
        from werkzeug.security import generate_password_hash
        if role == 'admin':
            flash('Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n admin qua form n√†y!', 'danger')
            return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
        # Ki·ªÉm tra tr√πng t√™n/email
        if not name or not email or not phone or not password:
            flash('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!', 'danger')
            return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
        if (Child.query.filter_by(name=name).first() or Staff.query.filter_by(name=name).first() or name == 'admin'):
            flash('T√™n ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
            return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
        if (Child.query.filter_by(email=email).first() or Staff.query.filter_by(email=email).first() or email == 'admin@smalltree.vn'):
            flash('Email ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
            return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
        if role == 'parent':
            student_code = request.form.get('student_code')
            class_name = request.form.get('class_name')
            birth_date = request.form.get('birth_date')
            parent_contact = request.form.get('parent_contact')
            if not student_code or not class_name or not birth_date or not parent_contact:
                flash('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin h·ªçc sinh/ph·ª• huynh!', 'danger')
                return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
            new_child = Child(name=name, age=0, parent_contact=parent_contact, class_name=class_name, birth_date=birth_date, email=email, phone=phone, password=generate_password_hash(password), student_code=student_code)
            db.session.add(new_child)
        elif role == 'teacher':
            position = request.form.get('position')
            if not position:
                flash('Vui l√≤ng nh·∫≠p ch·ª©c v·ª• gi√°o vi√™n!', 'danger')
                return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
            new_staff = Staff(name=name, position=position, contact_info=phone, email=email, phone=phone, password=generate_password_hash(password))
            db.session.add(new_staff)
        db.session.commit()
        flash('T·∫°o t√†i kho·∫£n th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.accounts'))
    return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')

@main.route('/accounts/<int:user_id>/edit', methods=['GET', 'POST'])
def edit_account(user_id):
    if session.get('role') != 'admin':
        return redirect_no_permission()
    user_type = request.args.get('type', 'parent')
    if user_type == 'teacher':
        user = Staff.query.get_or_404(user_id)
    else:
        user = Child.query.get_or_404(user_id)
    if request.method == 'POST':
        user.name = request.form.get('name')
        user.email = request.form.get('email')
        user.phone = request.form.get('phone')
        if user_type == 'parent':
            user.parent_contact = request.form.get('parent_contact')
            user.student_code = request.form.get('student_code')
            user.class_name = request.form.get('class_name')
            user.birth_date = request.form.get('birth_date')
        elif user_type == 'teacher':
            user.position = request.form.get('position')
        password = request.form.get('password')
        if password:
            from werkzeug.security import generate_password_hash
            user.password = generate_password_hash(password)
        db.session.commit()
        flash('ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n!', 'success')
        return redirect(url_for('main.accounts'))
    # Hide sensitive info for non-admins (should only be admin here, but for safety)
    show_sensitive = session.get('role') == 'admin'
    masked_user = {
        'id': user.id,
        'name': user.name,
        'email': user.email if show_sensitive else '·∫®n',
        'phone': user.phone if show_sensitive else '·∫®n',
        'student_code': getattr(user, 'student_code', None) if show_sensitive else '·∫®n',
        'class_name': getattr(user, 'class_name', None) if show_sensitive else '·∫®n',
        'parent_contact': getattr(user, 'parent_contact', None) if show_sensitive else '·∫®n',
        'position': getattr(user, 'position', None) if show_sensitive else '·∫®n',
    }
    return render_template('edit_account.html', user=masked_user, type=user_type, title='Ch·ªânh s·ª≠a t√†i kho·∫£n')

@main.route('/accounts/parent/<int:user_id>/delete', methods=['POST'])
def delete_parent_account(user_id):
    if session.get('role') != 'admin':
        return redirect_no_permission()
    user = Child.query.get_or_404(user_id)
    db.session.delete(user)
    db.session.commit()
    flash('ƒê√£ xo√° t√†i kho·∫£n ph·ª• huynh!', 'success')
    return redirect(url_for('main.accounts'))

@main.route('/accounts/teacher/<int:user_id>/delete', methods=['POST'])
def delete_teacher_account(user_id):
    if session.get('role') != 'admin':
        return redirect_no_permission()
    user = Staff.query.get_or_404(user_id)
    db.session.delete(user)
    db.session.commit()
    flash('ƒê√£ xo√° t√†i kho·∫£n gi√°o vi√™n!', 'success')
    return redirect(url_for('main.accounts'))

@main.route('/activities/<int:id>/edit', methods=['GET', 'POST'])
def edit_activity(id):
    try:
        if session.get('role') not in ['admin', 'teacher']:
            return redirect_no_permission()
        post = Activity.query.get_or_404(id)
        if not post:
            flash('Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ ch·ªânh s·ª≠a!', 'danger')
            return redirect(url_for('main.activities'))
        from app.forms import ActivityEditForm
        form = ActivityEditForm()
        if request.method == 'POST':
            print('---[DEBUG] POST DATA---')
            print('form.title:', form.title.data)
            print('form.description:', form.description.data)
            print('form.background:', form.background.data)
            print('request.files:', request.files)
            print('request.files.getlist("images"):', request.files.getlist('images'))
            print('form.validate_on_submit:', form.validate_on_submit())
        if request.method == 'POST' and form.validate_on_submit():
            post.title = form.title.data
            post.description = form.description.data
            background_file = form.background.data
            image_url = post.image
            if background_file and getattr(background_file, 'filename', None):
                allowed_ext = {'.jpg', '.jpeg', '.png', '.gif', '.jfif'}
                ext = os.path.splitext(background_file.filename)[1].lower()
                safe_filename = re.sub(r'[^a-zA-Z0-9_.-]', '', background_file.filename)
                if ext not in allowed_ext:
                    flash('Ch·ªâ cho ph√©p t·∫£i l√™n c√°c file ·∫£nh c√≥ ƒëu√¥i: .jpg, .jpeg, .png, .gif, .jfif!', 'danger')
                    return render_template('edit_activity.html', post=post, form=form, title='Ch·ªânh s·ª≠a ho·∫°t ƒë·ªông', mobile=is_mobile())
                filename = 'bg_' + datetime.now().strftime('%Y%m%d%H%M%S') + '_' + safe_filename
                save_path = os.path.join('app', 'static', 'images', filename)
                img = Image.open(background_file)
                img.thumbnail((1200, 800))
                img.save(save_path)
                image_url = url_for('static', filename=f'images/{filename}')
                post.image = image_url
            files = request.files.getlist('images')
            activity_dir = os.path.join('app', 'static', 'images', 'activities', str(post.id))
            os.makedirs(activity_dir, exist_ok=True)
            for file in files:
                if file and getattr(file, 'filename', None):
                    ext = os.path.splitext(file.filename)[1].lower()
                    if ext not in ['.jpg', '.jpeg', '.png', '.gif', '.jfif']:
                        flash(f"File {file.filename} kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng ·∫£nh!", 'danger')
                        continue
                    safe_filename = re.sub(r'[^a-zA-Z0-9_.-]', '', file.filename)
                    img_filename = datetime.now().strftime('%Y%m%d%H%M%S%f') + '_' + safe_filename
                    img_path = os.path.join(activity_dir, img_filename)
                    try:
                        file.stream.seek(0)
                        img = Image.open(file.stream)
                        img.thumbnail((1200, 800))
                        img.save(img_path)
                        rel_path = os.path.join('images', 'activities', str(post.id), img_filename).replace('\\', '/')
                        db.session.add(ActivityImage(filename=img_filename, filepath=rel_path, upload_date=datetime.now(), activity_id=post.id))
                    except Exception as e:
                        print(f"[ERROR] L·ªói upload ·∫£nh: {getattr(file, 'filename', 'unknown')} - {e}")
                        import traceback
                        traceback.print_exc()
                        flash(f"L·ªói upload ·∫£nh: {getattr(file, 'filename', 'unknown')} - {e}", 'danger')
                        continue
            db.session.commit()
            flash('ƒê√£ c·∫≠p nh·∫≠t b√†i vi·∫øt!', 'success')
            return redirect(url_for('main.activities'))
        mobile = is_mobile()
        # G√°n d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho form khi GET
        if request.method == 'GET':
            form.title.data = post.title
            form.description.data = post.description
        return render_template('edit_activity.html', post=post, form=form, title='Ch·ªânh s·ª≠a ho·∫°t ƒë·ªông', mobile=mobile)
    except Exception as e:
        print(f"[ERROR] L·ªói khi render edit_activity: {e}")
        import traceback
        traceback.print_exc()
        flash(f"L·ªói h·ªá th·ªëng khi ch·ªânh s·ª≠a ho·∫°t ƒë·ªông: {e}", 'danger')
        return redirect(url_for('main.activities'))

@main.route('/bmi-index', methods=['GET', 'POST'])
def bmi_index():
    students = Child.query.all()
    bmi = None
    bmi_id = None

    if request.method == 'POST':
        student_id = int(request.form['student_id'])
        weight = float(request.form['weight'])
        height = float(request.form['height']) / 100  # ƒë·ªïi cm sang m
        bmi = round(weight / (height * height), 2)
        bmi_id = student_id
        record_date = request.form.get('date', date.today().isoformat())
        # Fix: round height to 2 decimals before saving
        rounded_height_cm = round(height * 100, 2)
        new_record = BmiRecord(
            student_id=student_id,
            date=date.fromisoformat(record_date),
            weight=weight,
            height=rounded_height_cm,  # l∆∞u l·∫°i ƒë∆°n v·ªã cm, ƒë√£ l√†m tr√≤n
            bmi=bmi
        )
        db.session.add(new_record)
        db.session.commit()

    bmi_history = {}
    for student in students:
        records = BmiRecord.query.filter_by(student_id=student.id).order_by(BmiRecord.date.desc(), BmiRecord.id.desc()).all()
        filtered = {}
        for record in records:
            date_str = record.date.strftime('%Y-%m-%d')
            if date_str not in filtered:
                filtered[date_str] = record
        bmi_history[student.id] = list(filtered.values())

    current_date_iso = date.today().isoformat()
    return render_template(
        'bmi_index.html',
        title='Ch·ªâ S·ªë BMI',
        students=students,
        bmi=bmi,
        bmi_id=bmi_id,
        bmi_history=bmi_history,
        current_date_iso=current_date_iso,
        mobile=False
    )

@main.route('/bmi-record/<int:record_id>/edit', methods=['POST'])
def edit_bmi_record(record_id):
    record = BmiRecord.query.get_or_404(record_id)
    date_str = request.form.get('date')
    weight = request.form.get('weight')
    height = request.form.get('height')
    if date_str and weight and height:
        record.date = date.fromisoformat(date_str)
        record.weight = float(weight)
        record.height = request.form.get('height')
        record.bmi = round(float(weight) / ((float(height)/100) ** 2), 2)
        db.session.commit()
        flash('ƒê√£ c·∫≠p nh·∫≠t ch·ªâ s·ªë BMI!', 'success')
    else:
        flash('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!', 'danger')
    return redirect(url_for('main.bmi_index', edit_id=None))

@main.route('/bmi-record/<int:record_id>/delete', methods=['POST'])
def delete_bmi_record(record_id):
    record = BmiRecord.query.get_or_404(record_id)
    db.session.delete(record)
    db.session.commit()
    flash('ƒê√£ xo√° ch·ªâ s·ªë BMI!', 'success')
    return redirect(url_for('main.bmi_index', edit_id=None))

@main.route('/menu')
def menu():
    weeks = Curriculum.query.order_by(Curriculum.week_number).all()
    menu = []
    for week in weeks:
        try:
            data = json.loads(week.content)
        except Exception:
            data = {}
        menu.append({
            'week_number': week.week_number,
            'data': data
        })
    mobile = is_mobile()
    return render_template('menu.html', menu=menu, title='Th·ª±c ƒë∆°n', mobile=mobile)

@main.route('/menu/new', methods=['GET', 'POST'])
def new_menu():
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    if request.method == 'POST':
        week_number = request.form.get('week_number')
        days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
        slots = ['morning', 'snack', 'dessert', 'lunch', 'afternoon', 'lateafternoon']
        menu_data = {}
        for day in days:
            menu_data[day] = {}
            for slot in slots:
                menu_data[day][slot] = request.form.get(f'content_{day}_{slot}')
        content = json.dumps(menu_data, ensure_ascii=False)
        new_week = Curriculum(week_number=week_number, content=content, material=None)
        db.session.add(new_week)
        db.session.commit()
        flash('ƒê√£ th√™m th·ª±c ƒë∆°n m·ªõi!', 'success')
        return redirect(url_for('main.menu'))
    mobile = is_mobile()
    return render_template('new_menu.html', title='T·∫°o th·ª±c ƒë∆°n m·ªõi', mobile=mobile)

@main.route('/menu/<int:week_number>/edit', methods=['GET', 'POST'])
def edit_menu(week_number):
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if not week:
        flash('Kh√¥ng t√¨m th·∫•y th·ª±c ƒë∆°n ƒë·ªÉ ch·ªânh s·ª≠a!', 'danger')
        return redirect(url_for('main.menu'))
    import json
    if request.method == 'POST':
        days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
        slots = ['morning', 'snack', 'dessert', 'lunch', 'afternoon', 'lateafternoon']
        menu_data = {}
        for day in days:
            menu_data[day] = {}
            for slot in slots:
                menu_data[day][slot] = request.form.get(f'content_{day}_{slot}')
        week.content = json.dumps(menu_data, ensure_ascii=False)
        db.session.commit()
        flash(f'ƒê√£ c·∫≠p nh·∫≠t th·ª±c ƒë∆°n tu·∫ßn {week_number}!', 'success')
        return redirect(url_for('main.menu'))
    data = json.loads(week.content)
    mobile = is_mobile()
    return render_template('edit_menu.html', week=week, data=data, title=f'Ch·ªânh s·ª≠a th·ª±c ƒë∆°n tu·∫ßn {week_number}', mobile=mobile)

@main.route('/menu/<int:week_number>/delete', methods=['POST'])
def delete_menu(week_number):
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if week:
        db.session.delete(week)
        db.session.commit()
        flash(f'ƒê√£ xo√° th·ª±c ƒë∆°n tu·∫ßn {week_number}!', 'success')
    else:
        flash('Kh√¥ng t√¨m th·∫•y th·ª±c ƒë∆°n ƒë·ªÉ xo√°!', 'danger')
    return redirect(url_for('main.menu'))

@main.route('/menu/import', methods=['POST'])
def import_menu():
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    file = request.files.get('excel_file')
    week_number = request.form.get('week_number')
    if not file:
        flash('Vui l√≤ng ch·ªçn file Excel!', 'danger')
        return redirect(url_for('main.menu'))
    if not week_number:
        flash('Vui l√≤ng nh·∫≠p s·ªë tu·∫ßn!', 'danger')
        return redirect(url_for('main.menu'))

    from openpyxl import load_workbook
    wb = load_workbook(file)
    ws = wb.active

    # ƒê·ªçc d·ªØ li·ªáu t·ª´ d√≤ng 3 ƒë·∫øn 8, c·ªôt B-G (theo m·∫´u: A1:A2 "Th·ª©", B1:G1 "Khung gi·ªù", B2-G2 slot, A3-A8 th·ª©)
    days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
    slots = ['morning', 'snack', 'dessert', 'lunch', 'afternoon', 'lateafternoon']
    menu_data = {}
    for i, day in enumerate(days):
        row = i + 3  # D√≤ng 3-8
        menu_data[day] = {}
        for j, slot in enumerate(slots):
            col = j + 2  # B=2, C=3, ... G=7
            value = ws.cell(row=row, column=col).value
            menu_data[day][slot] = value if value is not None else ""
    import json
    content = json.dumps(menu_data, ensure_ascii=False)
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if week:
        week.content = content
    else:
        new_week = Curriculum(week_number=week_number, content=content, material=None)
        db.session.add(new_week)
    db.session.commit()
    flash('ƒê√£ import th·ª±c ƒë∆°n t·ª´ Excel!', 'success')
    return redirect(url_for('main.menu'))

@main.route('/curriculum/import', methods=['POST'])
def import_curriculum():
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    file = request.files.get('excel_file')
    week_number = request.form.get('week_number')
    if not file:
        flash('Vui l√≤ng ch·ªçn file Excel!', 'danger')
        return redirect(url_for('main.curriculum'))
    if not week_number:
        flash('Vui l√≤ng nh·∫≠p s·ªë tu·∫ßn!', 'danger')
        return redirect(url_for('main.curriculum'))

    from openpyxl import load_workbook
    wb = load_workbook(file)
    ws = wb.active

    # ƒê·ªçc d·ªØ li·ªáu theo m·∫´u m·ªõi:
    days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
    morning_slots = ['morning_1', 'morning_2', 'morning_3', 'morning_4', 'morning_5', 'morning_6']
    afternoon_slots = ['afternoon_1', 'afternoon_2', 'afternoon_3', 'afternoon_4']
    curriculum_data = {}

    # S√°ng: d√≤ng 4-9 (A4-A9)
    for col_idx, day in enumerate(days):
        curriculum_data[day] = {}
        for slot_idx, slot in enumerate(morning_slots):
            row = 4 + slot_idx  # d√≤ng 4-9
            col = 2 + col_idx   # B=2, C=3, ... G=7
            value = ws.cell(row=row, column=col).value
            curriculum_data[day][slot] = value if value is not None else ""
        # Chi·ªÅu: d√≤ng 11-14 (A11-A14)
        for slot_idx, slot in enumerate(afternoon_slots):
            row = 11 + slot_idx  # d√≤ng 11-14
            col = 2 + col_idx
            value = ws.cell(row=row, column=col).value
            curriculum_data[day][slot] = value if value is not None else ""
    import json
    content = json.dumps(curriculum_data, ensure_ascii=False)
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if week:
        week.content = content
    else:
        new_week = Curriculum(week_number=week_number, content=content, material=None)
        db.session.add(new_week)
    db.session.commit()
    flash('ƒê√£ import ch∆∞∆°ng tr√¨nh h·ªçc t·ª´ Excel!', 'success')
    return redirect(url_for('main.curriculum'))

@main.route('/curriculum/export', methods=['GET'])
def export_curriculum_template():
    """Export file Excel m·∫´u ch∆∞∆°ng tr√¨nh h·ªçc v·ªõi ƒë·ªãnh d·∫°ng n√¢ng cao (merged cells, header, khung gi·ªù, ...)."""
    from openpyxl import Workbook
    from openpyxl.styles import Alignment, Font, Border, Side, PatternFill
    from io import BytesIO

    wb = Workbook()
    ws = wb.active
    ws.title = "Curriculum Template"

    # ƒê·ªãnh nghƒ©a style
    bold = Font(bold=True)
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)
    border = Border(
        left=Side(style='thin'), right=Side(style='thin'),
        top=Side(style='thin'), bottom=Side(style='thin')
    )
    fill = PatternFill(start_color="C8E6C9", end_color="C8E6C9", fill_type="solid")

    # Header
    ws.merge_cells('A1:A2')
    ws['A1'] = "Khung gi·ªù"
    ws['A1'].font = bold
    ws['A1'].alignment = center
    ws['A1'].fill = fill
    ws['A1'].border = border
    ws.merge_cells('B1:G1')
    ws['B1'] = "Th·ª©"
    ws['B1'].font = bold
    ws['B1'].alignment = center
    ws['B1'].fill = fill
    ws['B1'].border = border
    days = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7"]
    for i, day in enumerate(days):
        cell = ws.cell(row=2, column=2+i, value=day)
        cell.font = bold
        cell.alignment = center
        cell.fill = fill
        cell.border = border

    # Section: Bu·ªïi s√°ng
    ws.merge_cells('A3:G3')
    ws['A3'] = "Bu·ªïi s√°ng"
    ws['A3'].font = bold
    ws['A3'].alignment = center
    ws['A3'].fill = fill
    ws['A3'].border = border

    morning_slots = [
        ("7-8h", 4), ("8h-8h30", 5), ("8h30-9h", 6), ("9h-9h40", 7), ("9h40-10h30", 8), ("10h30-14h", 9)
    ]
    for label, row in morning_slots:
        ws.cell(row=row, column=1, value=label).font = bold
        ws.cell(row=row, column=1).alignment = center
        ws.cell(row=row, column=1).border = border
        for col in range(2, 8):
            ws.cell(row=row, column=col).border = border

    # Section: Bu·ªïi chi·ªÅu
    ws.merge_cells('A10:G10')
    ws['A10'] = "Bu·ªïi chi·ªÅu"
    ws['A10'].font = bold
    ws['A10'].alignment = center
    ws['A10'].fill = fill
    ws['A10'].border = border

    afternoon_slots = [
        ("14h15-15h", 11), ("15h-15h30", 12), ("15h45-16h", 13), ("16h-17h", 14)
    ]
    for label, row in afternoon_slots:
        ws.cell(row=row, column=1, value=label).font = bold
        ws.cell(row=row, column=1).alignment = center
        ws.cell(row=row, column=1).border = border
        for col in range(2, 8):
            ws.cell(row=row, column=col).border = border

    # Set column widths
    ws.column_dimensions['A'].width = 16
    for col in ['B','C','D','E','F','G']:
        ws.column_dimensions[col].width = 18

    # Save to BytesIO
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return send_file(output, download_name="curriculum_template.xlsx", as_attachment=True)

@main.route('/menu/export', methods=['GET'])
def export_menu_template():
    """Export file Excel m·∫´u th·ª±c ƒë∆°n v·ªõi ƒë·ªãnh d·∫°ng n√¢ng cao (merged cells, header, khung gi·ªù, ...)."""
    from openpyxl import Workbook
    from openpyxl.styles import Alignment, Font, Border, Side, PatternFill
    from io import BytesIO

    wb = Workbook()
    ws = wb.active
    ws.title = "Menu Template"

    # ƒê·ªãnh nghƒ©a style
    bold = Font(bold=True)
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)
    border = Border(
        left=Side(style='thin'), right=Side(style='thin'),
        top=Side(style='thin'), bottom=Side(style='thin')
    )
    fill = PatternFill(start_color="C8E6C9", end_color="C8E6C9", fill_type="solid")

    # Header
    ws.merge_cells('A1:A2')
    ws['A1'] = "Th·ª©"
    ws['A1'].font = bold
    ws['A1'].alignment = center
    ws['A1'].fill = fill
    ws['A1'].border = border
    ws.merge_cells('B1:G1')
    ws['B1'] = "Khung gi·ªù"
    ws['B1'].font = bold
    ws['B1'].alignment = center
    ws['B1'].fill = fill
    ws['B1'].border = border
    slots = ["S√°ng", "Ph·ª• s√°ng", "Tr√°ng mi·ªáng", "Tr∆∞a", "X·∫ø", "X·∫ø chi·ªÅu"]
    for i, slot in enumerate(slots):
        cell = ws.cell(row=2, column=2+i, value=slot)
        cell.font = bold
        cell.alignment = center
        cell.fill = fill
        cell.border = border

    # Fill days
    days = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7"]
    for i, day in enumerate(days):
        cell = ws.cell(row=3+i, column=1, value=day)
        cell.font = bold
        cell.alignment = center
        cell.border = border
        for col in range(2, 8):
            ws.cell(row=3+i, column=col).border = border

    # Set column widths
    ws.column_dimensions['A'].width = 16
    for col in ['B','C','D','E','F','G']:
        ws.column_dimensions[col].width = 18

    # Save to BytesIO
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return send_file(output, download_name="menu_template.xlsx", as_attachment=True)

@main.route('/activities/<int:id>/delete-image/<int:image_id>', methods=['POST'])
def delete_activity_image(id, image_id):
    try:
        if session.get('role') not in ['admin', 'teacher']:
            print(f"[LOG] Kh√¥ng c√≥ quy·ªÅn xo√° ·∫£nh ho·∫°t ƒë·ªông")
            return redirect_no_permission()
        img = ActivityImage.query.get_or_404(image_id)
        print(f"[LOG] ƒêang xo√° ·∫£nh: id={image_id}, filepath={img.filepath}")
        # Xo√° file v·∫≠t l√Ω
        img_path = os.path.join('app', 'static', img.filepath)
        if os.path.exists(img_path):
            os.remove(img_path)
            print(f"[LOG] ƒê√£ xo√° file v·∫≠t l√Ω: {img_path}")
        else:
            print(f"[LOG] File v·∫≠t l√Ω kh√¥ng t·ªìn t·∫°i: {img_path}")
        db.session.delete(img)
        db.session.commit()
        print(f"[LOG] ƒê√£ xo√° b·∫£n ghi ActivityImage id={image_id} kh·ªèi DB")
        flash('ƒê√£ xo√° ·∫£nh ho·∫°t ƒë·ªông!', 'success')
        return redirect(url_for('main.edit_activity', id=id))
    except Exception as e:
        print(f"[ERROR] L·ªói khi xo√° ·∫£nh ho·∫°t ƒë·ªông: {e}")
        import traceback
        traceback.print_exc()
        flash(f"L·ªói khi xo√° ·∫£nh ho·∫°t ƒë·ªông: {e}", 'danger')
        return redirect(url_for('main.edit_activity', id=id))

@main.route('/menu/<int:week_number>/export-food-safety', methods=['GET'])
def export_food_safety_process(week_number):
    """Xu·∫•t quy tr√¨nh an to√†n th·ª±c ph·∫©m 3 b∆∞·ªõc theo template c√≥ s·∫µn v·ªõi d·ªØ li·ªáu th·ª±c ƒë∆°n."""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    # L·∫•y th·ª±c ƒë∆°n c·ªßa tu·∫ßn
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if not week:
        flash('Kh√¥ng t√¨m th·∫•y th·ª±c ƒë∆°n!', 'danger')
        return redirect(url_for('main.menu'))
    
    import json
    from openpyxl import Workbook
    from openpyxl.styles import Font, Border, Side, Alignment, PatternFill
    from io import BytesIO
    import zipfile
    from datetime import datetime, timedelta
    
    menu_data = json.loads(week.content)
    
    # T·∫°o danh s√°ch m√≥n ƒÉn v√† nguy√™n li·ªáu t·ª´ th·ª±c ƒë∆°n
    dishes = []
    fresh_ingredients = []
    dry_ingredients = []
    
    for day_data in menu_data.values():
        for meal in day_data.values():
            if meal:
                dish_list = [dish.strip() for dish in meal.split(',') if dish.strip()]
                dishes.extend(dish_list)
                
                # Ph√¢n lo·∫°i nguy√™n li·ªáu (d·ª±a tr√™n t√™n m√≥n)
                for dish in dish_list:
                    if any(x in dish.lower() for x in ['rau', 'c√†', 'th·ªãt', 'c√°', 't√¥m', 'tr·ª©ng']):
                        fresh_ingredients.append(dish)
                    elif any(x in dish.lower() for x in ['g·∫°o', 'b√∫n', 'b√°nh', 's·ªØa', 'ƒë∆∞·ªùng']):
                        dry_ingredients.append(dish)
    
    # Lo·∫°i b·ªè tr√πng l·∫∑p
    dishes = list(set(dishes))
    fresh_ingredients = list(set(fresh_ingredients))
    dry_ingredients = list(set(dry_ingredients))
    
    zip_buffer = BytesIO()
    
    with zipfile.ZipFile(zip_buffer, 'w') as zipf:
        
        # B∆Ø·ªöC 1.1: Ti·∫øp nh·∫≠n th·ª±c ph·∫©m t∆∞∆°i - Theo ƒë√∫ng template g·ªëc
        wb1 = Workbook()
        ws1 = wb1.active
        ws1.title = "Ki·ªÉm tra th·ª±c ph·∫©m t∆∞∆°i"
        
        today = datetime.now()
        week_start = today - timedelta(days=today.weekday())
        
        # ƒê·ªãnh d·∫°ng border
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # D√≤ng 1: Header ch√≠nh
        ws1['A1'] = "T√™n c∆° s·ªü:"
        ws1['F1'] = "KI·ªÇM TRA TR∆Ø·ªöC KHI CH·∫æ BI·∫æN TH·ª®C ƒÇN"
        ws1['N1'] = "S·ªë: 1246/Qƒê - B·ªô Y T·∫ø"
        ws1.merge_cells('F1:L1')
        ws1['F1'].alignment = Alignment(horizontal='center', vertical='center')
        ws1['F1'].font = Font(bold=True, size=12)
        
        # D√≤ng 2
        ws1['A2'] = "Ng∆∞·ªùi ki·ªÉm tra:"
        ws1['N2'] = "M·∫´u s·ªë 1"
        
        # D√≤ng 3  
        ws1['A3'] = f"Th·ªùi gian ki·ªÉm tra: {week_start.strftime('%d/%m/%Y')}"
        
        # D√≤ng 4
        ws1['A4'] = "ƒê·ªãa ƒëi·ªÉm ki·ªÉm tra: L·ªöP MNDL NG√îI SAO NH·ªé"
        
        # D√≤ng 6
        ws1['A6'] = "I. Th·ª±c ph·∫©m t∆∞∆°i s·ªëng, ƒë√¥ng l·∫°nh: th·ªãt, c√°, rau, c·ªß, qu·∫£..."
        ws1['N6'] = "B∆∞·ªõc 1.1"
        ws1['A6'].font = Font(bold=True)
        
        # Header b·∫£ng ch√≠nh - d√≤ng 7
        headers_row1 = ['STT', 'T√™n th·ª±c ph·∫©m', '', 'Th·ªùi gian nh·∫≠p\n(ng√†y, gi·ªù)', 'Kh·ªëi l∆∞·ª£ng\n(kg/l√≠t)', 'N∆°i cung c·∫•p', '', 'S·ªë ch·ª©ng t·ª´/\nS·ªë h√≥a ƒë∆°n', 'Gi·∫•y ƒëƒÉng k√Ω\nv·ªõi th√∫ y', 'Gi·∫•y ki·ªÉm d·ªãch', 'Ki·ªÉm tra c·∫£m quan\n(m√†u, m√πi v·ªã, tr·∫°ng th√°i, b·∫£o qu·∫£n...)', '', 'X√©t nghi·ªám nhanh (n·∫øu c√≥)\n(vi sinh, h√≥a l√Ω)', '', 'Bi·ªán ph√°p x·ª≠ l√Ω/\nGhi ch√∫']
        for i, header in enumerate(headers_row1, 1):
            cell = ws1.cell(row=7, column=i, value=header)
            cell.font = Font(bold=True, size=9)
            cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
            cell.fill = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")
            cell.border = thin_border
        
        # Merge c√°c cell c·∫ßn thi·∫øt cho header
        ws1.merge_cells('B7:C7')  # T√™n th·ª±c ph·∫©m
        ws1.merge_cells('F7:G7')  # N∆°i cung c·∫•p
        ws1.merge_cells('K7:L7')  # Ki·ªÉm tra c·∫£m quan
        ws1.merge_cells('M7:N7')  # X√©t nghi·ªám nhanh
        
        # Sub-headers - d√≤ng 8
        sub_headers = ['', '', '', '', '', 'T√™n c∆° s·ªü', 'ƒê·ªãa ch·ªâ, ƒëi·ªán tho·∫°i', 'T√™n ng∆∞·ªùi giao h√†ng', '', '', 'ƒê·∫°t', 'Kh√¥ng ƒë·∫°t', 'ƒê·∫°t', 'Kh√¥ng ƒë·∫°t', '']
        for i, header in enumerate(sub_headers, 1):
            cell = ws1.cell(row=8, column=i, value=header)
            cell.font = Font(bold=True, size=9)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="E6F3E6", end_color="E6F3E6", fill_type="solid")
            cell.border = thin_border
        
        # S·ªë th·ª© t·ª± c·ªôt - d√≤ng 9
        for i in range(1, 16):
            cell = ws1.cell(row=9, column=i, value=i)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="F0F0F0", end_color="F0F0F0", fill_type="solid")
            cell.border = thin_border
        
        # ƒêi·ªÅn d·ªØ li·ªáu th·ª±c ph·∫©m t∆∞∆°i
        for i, ingredient in enumerate(fresh_ingredients[:20], 1):
            row_num = 9 + i
            data_row = [
                i,  # STT
                ingredient,  # T√™n th·ª±c ph·∫©m
                '',  # Merge v·ªõi B
                f"{week_start.strftime('%d/%m/%Y')}, 05h:30",  # Th·ªùi gian nh·∫≠p
                '',  # Kh·ªëi l∆∞·ª£ng - ƒë·ªÉ tr·ªëng
                'Th·ª±c ph·∫©m t∆∞∆°i s·ªëng',  # T√™n c∆° s·ªü
                '',  # ƒê·ªãa ch·ªâ - ƒë·ªÉ tr·ªëng
                '',  # T√™n ng∆∞·ªùi giao h√†ng
                '',  # S·ªë ch·ª©ng t·ª´
                '',  # Gi·∫•y ƒëƒÉng k√Ω
                'X',  # ƒê·∫°t c·∫£m quan
                '',  # Kh√¥ng ƒë·∫°t c·∫£m quan
                '',  # ƒê·∫°t x√©t nghi·ªám
                '',  # Kh√¥ng ƒë·∫°t x√©t nghi·ªám
                ''   # Ghi ch√∫
            ]
            
            for j, value in enumerate(data_row, 1):
                cell = ws1.cell(row=row_num, column=j, value=value)
                cell.alignment = Alignment(horizontal='center', vertical='center')
                cell.border = thin_border
                if j == 1:  # STT
                    cell.font = Font(bold=True)
                if j == 11 and value == 'X':  # ƒê√°nh d·∫•u X
                    cell.font = Font(bold=True, color="00AA00")
            
            # Merge cell cho t√™n th·ª±c ph·∫©m
            ws1.merge_cells(f'B{row_num}:C{row_num}')
        
        # Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
        column_widths = [5, 15, 5, 12, 10, 15, 15, 12, 10, 10, 8, 8, 8, 8, 12]
        for i, width in enumerate(column_widths, 1):
            ws1.column_dimensions[chr(64 + i)].width = width
        
        # Thi·∫øt l·∫≠p chi·ªÅu cao d√≤ng
        ws1.row_dimensions[7].height = 40
        ws1.row_dimensions[8].height = 25
        
        # Ch·ªØ k√Ω - d√≤ng cu·ªëi
        signature_row = 32
        ws1.cell(row=signature_row, column=5, value="B·∫øp tr∆∞·ªüng")
        ws1.cell(row=signature_row, column=11, value="Ch·ªß tr∆∞·ªùng")
        ws1.cell(row=signature_row+1, column=5, value="(K√Ω, ghi h·ªç t√™n)")
        ws1.cell(row=signature_row+1, column=11, value="(K√Ω, ghi h·ªç t√™n)")
        ws1.cell(row=signature_row+4, column=5, value="Nguy·ªÖn Th·ªã Minh T√¢m")
        ws1.cell(row=signature_row+4, column=11, value="Nguy·ªÖn Th·ªã Minh T√¢m")
        
        # ƒê·ªãnh d·∫°ng ch·ªØ k√Ω
        for row in [signature_row, signature_row+1, signature_row+4]:
            for col in [5, 11]:
                cell = ws1.cell(row=row, column=col)
                cell.alignment = Alignment(horizontal='center', vertical='center')
                if row == signature_row:
                    cell.font = Font(bold=True)
        
        file1_buffer = BytesIO()
        wb1.save(file1_buffer)
        file1_buffer.seek(0)
        zipf.writestr(f"B∆∞·ªõc 1.1 - Ti·∫øp nh·∫≠n th·ª±c ph·∫©m t∆∞∆°i - Tu·∫ßn {week_number}.xlsx", file1_buffer.read())
        
        # B∆Ø·ªöC 1.2: Ti·∫øp nh·∫≠n th·ª±c ph·∫©m kh√¥ - Theo ƒë√∫ng template g·ªëc v·ªõi format ƒë·∫πp
        wb2 = Workbook()
        ws2 = wb2.active
        ws2.title = "Ki·ªÉm tra th·ª±c ph·∫©m kh√¥"
        
        # D√≤ng 1: Header ch√≠nh
        ws2['A1'] = "T√™n c∆° s·ªü:"
        ws2['E1'] = "KI·ªÇM TRA TR∆Ø·ªöC KHI CH·∫æ BI·∫æN TH·ª®C ƒÇN"
        ws2['N1'] = "S·ªë: 1246/Qƒê - B·ªô Y T·∫ø"
        ws2.merge_cells('E1:L1')
        ws2['E1'].alignment = Alignment(horizontal='center', vertical='center')
        ws2['E1'].font = Font(bold=True, size=12)
        
        # D√≤ng 2
        ws2['A2'] = "Ng∆∞·ªùi ki·ªÉm tra:"
        ws2['N2'] = "M·∫´u s·ªë 1"
        
        # D√≤ng 3  
        ws2['A3'] = f"Th·ªùi gian ki·ªÉm tra: {week_start.strftime('%d/%m/%Y')}"
        
        # D√≤ng 4
        ws2['A4'] = "ƒê·ªãa ƒëi·ªÉm ki·ªÉm tra: L·ªöP MNDL NG√îI SAO NH·ªé"
        
        # D√≤ng 6
        ws2['A6'] = "II. Th·ª±c ph·∫©m kh√¥ v√† th·ª±c ph·∫©m bao g√≥i s·∫µn, ph·ª• gia th·ª±c ph·∫©m"
        ws2['N6'] = "B∆∞·ªõc 1.2"
        ws2['A6'].font = Font(bold=True)
        
        # Header b·∫£ng ch√≠nh - d√≤ng 7
        headers2_row1 = ['STT', 'T√™n th·ª±c ph·∫©m', '', 'T√™n c∆° s·ªü\ns·∫£n xu·∫•t', 'ƒê·ªãa ch·ªâ\ns·∫£n xu·∫•t', 'Th·ªùi gian nh·∫≠p\n(ng√†y, gi·ªù)', 'Kh·ªëi l∆∞·ª£ng\n(kg/l√≠t)', 'N∆°i cung c·∫•p', '', '', 'H·∫°n s·ª≠ d·ª•ng', 'ƒêi·ªÅu ki·ªán b·∫£o qu·∫£n\n(T¬∞ th∆∞·ªùng/ l·∫°nh...)', 'Ch·ª©ng t·ª´,\nh√≥a ƒë∆°n', 'Ki·ªÉm tra c·∫£m quan\n(nh√£n, bao b√¨, b·∫£o qu·∫£n, h·∫°n s·ª≠ d·ª•ng...)', '', 'Bi·ªán ph√°p x·ª≠ l√Ω/\nGhi ch√∫']
        for i, header in enumerate(headers2_row1, 1):
            cell = ws2.cell(row=7, column=i, value=header)
            cell.font = Font(bold=True, size=9)
            cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
            cell.fill = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")
            cell.border = thin_border
        
        # Merge c√°c cell c·∫ßn thi·∫øt cho header
        ws2.merge_cells('B7:C7')  # T√™n th·ª±c ph·∫©m
        ws2.merge_cells('H7:J7')  # N∆°i cung c·∫•p
        ws2.merge_cells('N7:O7')  # Ki·ªÉm tra c·∫£m quan
        
        # Sub-headers - d√≤ng 8
        sub_headers2 = ['', '', '', '', '', '', '', 'T√™n c∆° s·ªü', 'T√™n ch·ªß giao h√†ng', 'ƒê·ªãa ch·ªâ,\nƒëi·ªán tho·∫°i', '', '', '', 'ƒê·∫°t', 'Kh√¥ng ƒë·∫°t', '']
        for i, header in enumerate(sub_headers2, 1):
            cell = ws2.cell(row=8, column=i, value=header)
            cell.font = Font(bold=True, size=9)
            cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
            cell.fill = PatternFill(start_color="E6F3E6", end_color="E6F3E6", fill_type="solid")
            cell.border = thin_border
        
        # S·ªë th·ª© t·ª± c·ªôt - d√≤ng 9
        for i in range(1, 17):
            cell = ws2.cell(row=9, column=i, value=i)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="F0F0F0", end_color="F0F0F0", fill_type="solid")
            cell.border = thin_border
        
        # ƒêi·ªÅn d·ªØ li·ªáu th·ª±c ph·∫©m kh√¥
        for i, ingredient in enumerate(dry_ingredients[:20], 1):
            row_num = 9 + i
            data_row = [
                i,  # STT
                ingredient,  # T√™n th·ª±c ph·∫©m
                '',  # Merge v·ªõi B
                '',  # T√™n c∆° s·ªü s·∫£n xu·∫•t - ƒë·ªÉ tr·ªëng
                'Ba ƒê√¨nh2, th·ªã tr·∫•n Nam Ban, L√¢m H√†, L√¢m ƒê·ªìng',  # ƒê·ªãa ch·ªâ s·∫£n xu·∫•t
                f"{week_start.strftime('%d/%m/%Y')}, 07:00",  # Th·ªùi gian nh·∫≠p
                '',  # Kh·ªëi l∆∞·ª£ng - ƒë·ªÉ tr·ªëng
                'T·∫°p ho√° T√°m Loan',  # T√™n c∆° s·ªü cung c·∫•p
                'Nguy·ªÖn Kh·∫Øc T√°m',  # T√™n ch·ªß giao h√†ng
                'Ba ƒê√¨nh2, th·ªã tr·∫•n Nam Ban, L√¢m H√†, L√¢m ƒê·ªìng',  # ƒê·ªãa ch·ªâ
                'ƒê·∫£m b·∫£o',  # H·∫°n s·ª≠ d·ª•ng
                'Kho l∆∞∆°ng th·ª±c',  # ƒêi·ªÅu ki·ªán b·∫£o qu·∫£n
                '',  # Ch·ª©ng t·ª´ - ƒë·ªÉ tr·ªëng
                '',  # ƒê·∫°t - ƒë·ªÉ tr·ªëng cho ng∆∞·ªùi d√πng tick
                '',  # Kh√¥ng ƒë·∫°t - ƒë·ªÉ tr·ªëng
                ''   # Ghi ch√∫
            ]
            
            for j, value in enumerate(data_row, 1):
                cell = ws2.cell(row=row_num, column=j, value=value)
                cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
                cell.border = thin_border
                if j == 1:  # STT
                    cell.font = Font(bold=True)
            
            # Merge cell cho t√™n th·ª±c ph·∫©m
            ws2.merge_cells(f'B{row_num}:C{row_num}')
        
        # Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
        column_widths2 = [5, 12, 5, 12, 15, 12, 10, 12, 12, 15, 10, 12, 8, 8, 8, 12]
        for i, width in enumerate(column_widths2, 1):
            ws2.column_dimensions[chr(64 + i)].width = width
        
        # Thi·∫øt l·∫≠p chi·ªÅu cao d√≤ng
        ws2.row_dimensions[7].height = 40
        ws2.row_dimensions[8].height = 25
        
        # Ch·ªØ k√Ω - d√≤ng cu·ªëi
        signature_row2 = 32
        ws2.cell(row=signature_row2, column=5, value="B·∫øp tr∆∞·ªüng")
        ws2.cell(row=signature_row2, column=11, value="Ch·ªß tr∆∞·ªùng")
        ws2.cell(row=signature_row2+1, column=5, value="(K√Ω, ghi h·ªç t√™n)")
        ws2.cell(row=signature_row2+1, column=11, value="(K√Ω, ghi h·ªç t√™n)")
        ws2.cell(row=signature_row2+4, column=5, value="Nguy·ªÖn Th·ªã Minh T√¢m")
        ws2.cell(row=signature_row2+4, column=11, value="Nguy·ªÖn Th·ªã Minh T√¢m")
        
        # ƒê·ªãnh d·∫°ng ch·ªØ k√Ω
        for row in [signature_row2, signature_row2+1, signature_row2+4]:
            for col in [5, 11]:
                cell = ws2.cell(row=row, column=col)
                cell.alignment = Alignment(horizontal='center', vertical='center')
                if row == signature_row2:
                    cell.font = Font(bold=True)
        
        file2_buffer = BytesIO()
        wb2.save(file2_buffer)
        file2_buffer.seek(0)
        zipf.writestr(f"B∆∞·ªõc 1.2 - Ti·∫øp nh·∫≠n th·ª±c ph·∫©m kh√¥ - Tu·∫ßn {week_number}.xlsx", file2_buffer.read())
        
        # B∆Ø·ªöC 2.1: Ki·ªÉm tra khi ch·∫ø bi·∫øn th·ª©c ƒÉn - Theo ƒë√∫ng template g·ªëc
        wb3 = Workbook()
        ws3 = wb3.active
        ws3.title = "Ki·ªÉm tra ch·∫ø bi·∫øn"
        
        # D√≤ng 1: Header ch√≠nh
        ws3['A1'] = "T√™n c∆° s·ªü:"
        ws3['D1'] = "KI·ªÇM TRA KHI CH·∫æ BI·∫æN TH·ª®C ƒÇN"
        ws3['K1'] = "S·ªë: 1246/Qƒê - B·ªô Y T·∫ø"
        ws3.merge_cells('D1:I1')
        
        # D√≤ng 2
        ws3['A2'] = "Ng∆∞·ªùi ki·ªÉm tra:"
        ws3['K2'] = "M·∫´u s·ªë 2"
        
        # D√≤ng 3  
        ws3['A3'] = f"Th·ªùi gian ki·ªÉm tra: {week_start.strftime('%d/%m/%Y')}"
        
        # D√≤ng 4
        ws3['A4'] = "ƒê·ªãa ƒëi·ªÉm ki·ªÉm tra: L·ªöP MNDL NG√îI SAO NH·ªé"
        
        # D√≤ng 5
        ws3['K5'] = "B∆∞·ªõc 2"
        
        # Header b·∫£ng ch√≠nh - d√≤ng 6
        headers3_row1 = ['TT', 'Ca/b·ªØa ƒÉn (B·ªØa ƒÉn, gi·ªù ƒÉn...)', 'T√™n m√≥n ƒÉn', 'Nguy√™n li·ªáu ch√≠nh ƒë·ªÉ ch·∫ø bi·∫øn (t√™n, s·ªë l∆∞·ª£ng...)', 'S·ªë l∆∞·ª£ng/ s·ªë su·∫•t ƒÉn', 'Th·ªùi gian s∆° ch·∫ø xong (ng√†y, gi·ªù)', 'Th·ªùi gian ch·∫ø bi·∫øn xong (ng√†y, gi·ªù)', 'Ki·ªÉm tra ƒëi·ªÅu ki·ªán v·ªá sinh (t·ª´ th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu s∆° ch·∫ø, ch·∫ø bi·∫øn cho ƒë·∫øn khi th·ª©c ƒÉn ƒë∆∞·ª£c ch·∫ø bi·∫øn xong)', '', '', 'Ki·ªÉm tra c·∫£m quan th·ª©c ƒÉn (m√†u, m√πi, v·ªã, tr·∫°ng th√°i, b·∫£o qu·∫£n...)', '', 'Bi·ªán ph√°p x·ª≠ l√Ω /Ghi ch√∫']
        for i, header in enumerate(headers3_row1, 1):
            ws3.cell(row=6, column=i, value=header)
            ws3.cell(row=6, column=i).font = Font(bold=True)
        
        # Sub-headers - d√≤ng 7
        ws3.cell(row=7, column=8, value="Ng∆∞·ªùi tham gia ch·∫ø bi·∫øn")
        ws3.cell(row=7, column=9, value="Trang thi·∫øt b·ªã d·ª•ng c·ª•") 
        ws3.cell(row=7, column=10, value="Khu v·ª±c ch·∫ø bi·∫øn v√† ph·ª• tr·ª£")
        ws3.cell(row=7, column=11, value="ƒê·∫°t")
        ws3.cell(row=7, column=12, value="Kh√¥ng ƒë·∫°t")
        
        # S·ªë th·ª© t·ª± c·ªôt - d√≤ng 8
        for i in range(1, 14):
            ws3.cell(row=8, column=i, value=i)
            ws3.cell(row=8, column=i).font = Font(bold=True)
        
        # ƒêi·ªÅn d·ªØ li·ªáu m√≥n ƒÉn theo ca
        row_num = 9
        meal_times = {
            'morning': ('S√°ng', '6:00', '6:30'),
            'lunch': ('Canh tr∆∞a', '9:20', '9:50'), 
            'snack': ('M·∫∑n tr∆∞a', '10:20', '10:50'),
            'afternoon': ('X·∫ø', '1:30', '2:00'),
            'lateafternoon': ('Chi·ªÅu', '3:30', '4:00'),
            'dessert': ('Tr√°ng mi·ªáng', '11:30', '12:00')
        }
        
        stt = 1
        # Duy·ªát qua t·ª´ng ng√†y trong tu·∫ßn
        days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
        for day_key in days:
            if day_key in menu_data:
                for meal_key, (ca_name, start_time, end_time) in meal_times.items():
                    if menu_data[day_key].get(meal_key):
                        dishes = [d.strip() for d in menu_data[day_key][meal_key].split(',') if d.strip()]
                        for dish in dishes:
                            ws3.cell(row=row_num, column=1, value=stt)  # TT
                            ws3.cell(row=row_num, column=2, value=ca_name)  # Ca/b·ªØa ƒÉn
                            ws3.cell(row=row_num, column=3, value=dish)  # T√™n m√≥n ƒÉn
                            ws3.cell(row=row_num, column=4, value="")  # Nguy√™n li·ªáu - ƒë·ªÉ tr·ªëng cho ng∆∞·ªùi d√πng ƒëi·ªÅn
                            ws3.cell(row=row_num, column=5, value="15")  # S·ªë su·∫•t ƒÉn
                            ws3.cell(row=row_num, column=6, value=start_time)  # Th·ªùi gian s∆° ch·∫ø
                            ws3.cell(row=row_num, column=7, value=end_time)  # Th·ªùi gian ch·∫ø bi·∫øn xong
                            ws3.cell(row=row_num, column=8, value="G·ªçn g√†ng, s·∫°ch s·∫Ω")  # Ng∆∞·ªùi tham gia
                            ws3.cell(row=row_num, column=9, value="ƒê·∫ßy ƒë·ªß, h·ª£p v·ªá sinh")  # Trang thi·∫øt b·ªã
                            ws3.cell(row=row_num, column=10, value="ƒê·∫£m b·∫£o v·ªá sinh")  # Khu v·ª±c ch·∫ø bi·∫øn
                            ws3.cell(row=row_num, column=11, value="X")  # ƒê·∫°t
                            ws3.cell(row=row_num, column=12, value="")  # Kh√¥ng ƒë·∫°t
                            ws3.cell(row=row_num, column=13, value="")  # Ghi ch√∫
                            
                            row_num += 1
                            stt += 1
                            
                            if row_num > 30:  # Gi·ªõi h·∫°n s·ªë d√≤ng
                                break
                    if row_num > 30:
                        break
                if row_num > 30:
                    break
        
        # Ch·ªØ k√Ω - d√≤ng cu·ªëi
        signature_row3 = max(row_num + 2, 32)
        ws3.cell(row=signature_row3, column=4, value="B·∫øp tr∆∞·ªüng")
        ws3.cell(row=signature_row3, column=10, value="Ch·ªß tr∆∞·ªùng")
        ws3.cell(row=signature_row3+1, column=4, value="(K√Ω, ghi h·ªç t√™n)")
        ws3.cell(row=signature_row3+1, column=10, value="(K√Ω, ghi h·ªç t√™n)")
        ws3.cell(row=signature_row3+4, column=4, value="Nguy·ªÖn Th·ªã Minh T√¢m")
        ws3.cell(row=signature_row3+4, column=10, value="Nguy·ªÖn Th·ªã Minh T√¢m")
        
        file3_buffer = BytesIO()
        wb3.save(file3_buffer)
        file3_buffer.seek(0)
        zipf.writestr(f"B∆∞·ªõc 2.1 - Ki·ªÉm tra khi ch·∫ø bi·∫øn - Tu·∫ßn {week_number}.xlsx", file3_buffer.read())
        
        # B∆Ø·ªöC 2.2: Ki·ªÉm tra tr∆∞·ªõc khi ƒÉn - Theo ƒë√∫ng template g·ªëc
        wb4 = Workbook()
        ws4 = wb4.active
        ws4.title = "Ki·ªÉm tra tr∆∞·ªõc khi ƒÉn"
        
        # D√≤ng 1: Header ch√≠nh
        ws4['A1'] = "T√™n c∆° s·ªü:"
        ws4['B1'] = "L·ªöP MNDL NG√îI SAO NH·ªé"
        ws4['D1'] = "KI·ªÇM TRA TR∆Ø·ªöC KHI ƒÇN"
        ws4['I1'] = "S·ªë: 1246/Qƒê - B·ªô Y T·∫ø"
        ws4.merge_cells('D1:H1')
        
        # D√≤ng 2
        ws4['A2'] = "Ng∆∞·ªùi ki·ªÉm tra:"
        ws4['B2'] = "Nguy·ªÖn Th·ªã Minh T√¢m"
        ws4['I2'] = "M·∫´u s·ªë 3"
        
        # D√≤ng 3  
        ws4['A3'] = f"Th·ªùi gian ki·ªÉm tra: {week_start.strftime('%d/%m/%Y')}"
        
        # D√≤ng 4
        ws4['A4'] = "ƒê·ªãa ƒëi·ªÉm ki·ªÉm tra: L·ªöP MNDL NG√îI SAO NH·ªé"
        
        # D√≤ng 5
        ws4['I5'] = "B∆∞·ªõc 3"
        
        # Header b·∫£ng ch√≠nh - d√≤ng 6
        headers4_row1 = ['TT', 'Ca/b·ªØa ƒÉn (B·ªØa ƒÉn, gi·ªù ƒÉn...)', 'T√™n m√≥n ƒÉn', 'S·ªë l∆∞·ª£ng su·∫•t ƒÉn', 'Th·ªùi gian chia m√≥n ƒÉn xong (ng√†y, gi·ªù)', 'Th·ªùi gian b·∫Øt ƒë·∫ßu ƒÉn (ng√†y, gi·ªù)', 'D·ª•ng c·ª• chia, ch·ª©a ƒë·ª±ng, che ƒë·∫≠y, b·∫£o qu·∫£n th·ª©c ƒÉn', 'Ki·ªÉm tra c·∫£m quan m√≥n ƒÉn (m√†u, m√πi, v·ªã, tr·∫°ng th√°i, b·∫£o qu·∫£n...)', '', 'Bi·ªán ph√°p x·ª≠ l√Ω /Ghi ch√∫']
        for i, header in enumerate(headers4_row1, 1):
            ws4.cell(row=6, column=i, value=header)
            ws4.cell(row=6, column=i).font = Font(bold=True)
        
        # Sub-headers - d√≤ng 7
        ws4.cell(row=7, column=8, value="ƒê·∫°t")
        ws4.cell(row=7, column=9, value="Kh√¥ng ƒë·∫°t")
        
        # S·ªë th·ª© t·ª± c·ªôt - d√≤ng 8
        for i in range(1, 11):
            ws4.cell(row=8, column=i, value=i)
            ws4.cell(row=8, column=i).font = Font(bold=True)
        
        # ƒêi·ªÅn d·ªØ li·ªáu m√≥n ƒÉn theo ca
        row_num = 9
        meal_times_4 = {
            'morning': ('S√°ng', '6:30', '6:45'),
            'lunch': ('Canh tr∆∞a', '10:00', '10:15'), 
            'snack': ('M·∫∑n tr∆∞a', '10:00', '10:15'),
            'afternoon': ('X·∫ø', '2:10', '2:30'),
            'lateafternoon': ('Chi·ªÅu', '3:30', '3:45'),
            'dessert': ('Tr√°ng mi·ªáng', '11:30', '11:45')
        }
        
        stt = 1
        # Duy·ªát qua t·ª´ng ng√†y trong tu·∫ßn
        for day_key in ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']:
            if day_key in menu_data:
                for meal_key, (ca_name, chia_time, eat_time) in meal_times_4.items():
                    if menu_data[day_key].get(meal_key):
                        dishes = [d.strip() for d in menu_data[day_key][meal_key].split(',') if d.strip()]
                        for dish in dishes:
                            ws4.cell(row=row_num, column=1, value=stt)  # TT
                            ws4.cell(row=row_num, column=2, value=ca_name)  # Ca/b·ªØa ƒÉn
                            ws4.cell(row=row_num, column=3, value=dish)  # T√™n m√≥n ƒÉn
                            ws4.cell(row=row_num, column=4, value="15")  # S·ªë su·∫•t ƒÉn
                            ws4.cell(row=row_num, column=5, value=chia_time)  # Th·ªùi gian chia m√≥n
                            ws4.cell(row=row_num, column=6, value=eat_time)  # Th·ªùi gian b·∫Øt ƒë·∫ßu ƒÉn
                            ws4.cell(row=row_num, column=7, value="Inox")  # D·ª•ng c·ª•
                            ws4.cell(row=row_num, column=8, value="X")  # ƒê·∫°t
                            ws4.cell(row=row_num, column=9, value="")  # Kh√¥ng ƒë·∫°t
                            ws4.cell(row=row_num, column=10, value="")  # Ghi ch√∫
                            
                            row_num += 1
                            stt += 1
                            
                            if row_num > 30:  # Gi·ªõi h·∫°n s·ªë d√≤ng
                                break
                    if row_num > 30:
                        break
                if row_num > 30:
                    break
        
        # Ch·ªØ k√Ω - d√≤ng cu·ªëi
        signature_row4 = max(row_num + 2, 32)
        ws4.cell(row=signature_row4, column=3, value="B·∫øp tr∆∞·ªüng")
        ws4.cell(row=signature_row4, column=8, value="Ph√≥ hi·ªáu tr∆∞·ªüng")
        ws4.cell(row=signature_row4+1, column=3, value="(K√Ω, ghi h·ªç t√™n)")
        ws4.cell(row=signature_row4+1, column=8, value="(K√Ω, ghi h·ªç t√™n)")
        ws4.cell(row=signature_row4+4, column=3, value="Nguy·ªÖn Th·ªã Minh T√¢m")
        ws4.cell(row=signature_row4+4, column=8, value="Nguy·ªÖn Th·ªã Minh T√¢m")
        
        file4_buffer = BytesIO()
        wb4.save(file4_buffer)
        file4_buffer.seek(0)
        zipf.writestr(f"B∆∞·ªõc 2.2 - Ki·ªÉm tra tr∆∞·ªõc khi ƒÉn - Tu·∫ßn {week_number}.xlsx", file4_buffer.read())
        
        # B∆Ø·ªöC 3: L∆∞u h·ªßy m·∫´u th·ª±c ph·∫©m - Theo ƒë√∫ng template g·ªëc
        wb5 = Workbook()
        ws5 = wb5.active
        ws5.title = "L∆∞u h·ªßy m·∫´u th·ª±c ph·∫©m"
        
        # D√≤ng 1: Header ch√≠nh
        ws5['E1'] = "M·∫™U BI·ªÇU THEO D√ïI L∆ØU V√Ä H·ª¶Y M·∫™U TH·ª®C ƒÇN L∆ØU"
        ws5['L1'] = "S·ªë: 1246/Qƒê - B·ªô Y T·∫ø"
        ws5.merge_cells('E1:K1')
        
        # D√≤ng 2
        ws5['A2'] = "T√™n c∆° s·ªü:"
        ws5['C2'] = "L·ªöP MNDL NG√îI SAO NH·ªé"
        ws5['L2'] = "M·∫´u 5"
        
        # D√≤ng 3
        ws5['A3'] = "Ng∆∞·ªùi ki·ªÉm tra:"
        
        # D√≤ng 4
        ws5['A4'] = f"Ng√†y in: {week_start.strftime('%d/%m/%Y')}"
        
        # D√≤ng 5
        ws5['A5'] = "ƒê·ªãa ƒëi·ªÉm ki·ªÉm tra:"
        ws5['D5'] = "L·ªöP MNDL NG√îI SAO NH·ªé"
        ws5['H5'] = "Ng√†y ti·∫øp ph·∫©m:"
        ws5['J5'] = f"{week_start.strftime('%d/%m/%Y')}"
        
        # D√≤ng 6
        ws5['L6'] = "B∆∞·ªõc 3"
        
        # Header b·∫£ng ch√≠nh - d√≤ng 7
        headers5_row1 = ['TT', 'T√™n m·∫´u th·ª©c ƒÉn', '', '', 'B·ªØa ƒÉn (gi·ªù ƒÉn...)', 'S·ªë l∆∞·ª£ng su·∫•t ƒÉn', 'Kh·ªëi l∆∞·ª£ng/ th·ªÉ t√≠ch m·∫´u (gam/ml)', 'D·ª•ng c·ª• ch·ª©a m·∫´u th·ª©c ƒÉn l∆∞u', 'Nhi·ªát ƒë·ªô b·∫£o qu·∫£n m·∫´u (¬∞C)', 'Th·ªùi gian l·∫•y m·∫´u (gi·ªù, ng√†y, th√°ng, nƒÉm)', 'Th·ªùi gian h·ªßy m·∫´u (gi·ªù, ng√†y, th√°ng, nƒÉm)', 'Ghi ch√∫ (ch·∫•t l∆∞·ª£ng m·∫´u th·ª©c ƒÉn l∆∞u...)', 'Ng∆∞·ªùi l∆∞u m·∫´u (k√Ω v√† ghi r√µ h·ªç t√™n)', 'Ng∆∞·ªùi h·ªßy m·∫´u (k√Ω v√† ghi r√µ h·ªç t√™n)']
        for i, header in enumerate(headers5_row1, 1):
            ws5.cell(row=7, column=i, value=header)
            ws5.cell(row=7, column=i).font = Font(bold=True)
        
        # S·ªë th·ª© t·ª± c·ªôt - d√≤ng 8
        for i in range(1, 15):
            ws5.cell(row=8, column=i, value=i)
            ws5.cell(row=8, column=i).font = Font(bold=True)
        
        # ƒêi·ªÅn d·ªØ li·ªáu l∆∞u h·ªßy m·∫´u
        row_num = 9
        meal_times_5 = {
            'morning': 'S√°ng',
            'lunch': 'Canh tr∆∞a', 
            'snack': 'M·∫∑n tr∆∞a',
            'afternoon': 'X·∫ø',
            'lateafternoon': 'Chi·ªÅu',
            'dessert': 'Tr√°ng mi·ªáng'
        }
        
        stt = 1
        # Duy·ªát qua t·ª´ng ng√†y trong tu·∫ßn
        for day_key in ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']:
            if day_key in menu_data:
                # Ch·ªâ l∆∞u m·∫´u c√°c b·ªØa ch√≠nh
                for meal_key in ['morning', 'lunch', 'snack', 'afternoon']:
                    if menu_data[day_key].get(meal_key):
                        dishes = [d.strip() for d in menu_data[day_key][meal_key].split(',') if d.strip()]
                        for dish in dishes:
                            ws5.cell(row=row_num, column=1, value=stt)  # TT
                            ws5.cell(row=row_num, column=2, value=dish)  # T√™n m·∫´u th·ª©c ƒÉn
                            ws5.cell(row=row_num, column=5, value=meal_times_5[meal_key])  # B·ªØa ƒÉn
                            ws5.cell(row=row_num, column=6, value="15")  # S·ªë l∆∞·ª£ng su·∫•t ƒÉn
                            ws5.cell(row=row_num, column=7, value="100")  # Kh·ªëi l∆∞·ª£ng m·∫´u
                            ws5.cell(row=row_num, column=8, value="H·ªôp Thu·ª∑ Tinh")  # D·ª•ng c·ª• ch·ª©a
                            ws5.cell(row=row_num, column=9, value="4")  # Nhi·ªát ƒë·ªô b·∫£o qu·∫£n
                            ws5.cell(row=row_num, column=10, value=f"{week_start.strftime('%d/%m/%Y')}, 06:30")  # Th·ªùi gian l·∫•y m·∫´u
                            ws5.cell(row=row_num, column=11, value=f"{week_start.strftime('%d/%m/%Y')}, 06:30")  # Th·ªùi gian h·ªßy m·∫´u
                            ws5.cell(row=row_num, column=12, value="ƒê·∫£m b·∫£o")  # Ghi ch√∫
                            ws5.cell(row=row_num, column=13, value="Nguy·ªÖn Th·ªã Minh T√¢m")  # Ng∆∞·ªùi l∆∞u m·∫´u
                            ws5.cell(row=row_num, column=14, value="Nguy·ªÖn Th·ªã Minh T√¢m")  # Ng∆∞·ªùi h·ªßy m·∫´u
                            
                            row_num += 1
                            stt += 1
                            
                            if row_num > 30:  # Gi·ªõi h·∫°n s·ªë d√≤ng
                                break
                    if row_num > 30:
                        break
                if row_num > 30:
                    break
        
        # Ch·ªØ k√Ω - d√≤ng cu·ªëi
        signature_row5 = max(row_num + 3, 35)
        ws5.cell(row=signature_row5, column=2, value="Ng∆∞·ªùi qu·∫£n l√Ω c∆° s·ªü")
        ws5.cell(row=signature_row5, column=6, value="Ng∆∞·ªùi th·ª±c hi·ªán l∆∞u m·∫´u")
        ws5.cell(row=signature_row5, column=12, value="Ng∆∞·ªùi th·ª±c hi·ªán hu·ª∑ m·∫´u")
        ws5.cell(row=signature_row5+1, column=2, value="(K√Ω, ghi h·ªç t√™n)")
        ws5.cell(row=signature_row5+1, column=6, value="(K√Ω, ghi h·ªç t√™n)")
        ws5.cell(row=signature_row5+1, column=12, value="(K√Ω, ghi h·ªç t√™n)")
        ws5.cell(row=signature_row5+4, column=1, value="Nguy·ªÖn Th·ªã Minh T√¢m")
        ws5.cell(row=signature_row5+4, column=6, value="Nguy·ªÖn Th·ªã Minh T√¢m")
        ws5.cell(row=signature_row5+4, column=12, value="Nguy·ªÖn Th·ªã Minh T√¢m")
        
        file5_buffer = BytesIO()
        wb5.save(file5_buffer)
        file5_buffer.seek(0)
        zipf.writestr(f"B∆∞·ªõc 3 - L∆∞u h·ªßy m·∫´u th·ª±c ph·∫©m - Tu·∫ßn {week_number}.xlsx", file5_buffer.read())
    
    zip_buffer.seek(0)
    return send_file(
        zip_buffer, 
        download_name=f"Quy_trinh_3_buoc_tuan_{week_number}.zip", 
        as_attachment=True,
        mimetype='application/zip'
    )

# ================== QU·∫¢N L√ù NH√Ä CUNG C·∫§P V√Ä S·∫¢N PH·∫®M ==================

@main.route('/suppliers')
def suppliers():
    """Danh s√°ch nh√† cung c·∫•p"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    suppliers = Supplier.query.filter_by(is_active=True).order_by(Supplier.name).all()
    return render_template('suppliers.html', suppliers=suppliers)

@main.route('/suppliers/new', methods=['GET', 'POST'])
def new_supplier():
    """Th√™m nh√† cung c·∫•p m·ªõi"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    form = SupplierForm()
    if form.validate_on_submit():
        supplier = Supplier(
            name=form.name.data,
            address=form.address.data,
            phone=form.phone.data,
            contact_person=form.contact_person.data,
            supplier_type=form.supplier_type.data,
            registration_number=form.registration_number.data,
            food_safety_cert=form.food_safety_cert.data,
            created_date=datetime.utcnow()
        )
        db.session.add(supplier)
        db.session.commit()
        flash('Th√™m nh√† cung c·∫•p th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.suppliers'))
    
    return render_template('new_supplier.html', form=form)

@main.route('/suppliers/<int:supplier_id>/edit', methods=['GET', 'POST'])
def edit_supplier(supplier_id):
    """S·ª≠a th√¥ng tin nh√† cung c·∫•p"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    supplier = Supplier.query.get_or_404(supplier_id)
    form = SupplierForm(obj=supplier)
    
    if form.validate_on_submit():
        form.populate_obj(supplier)
        db.session.commit()
        flash('C·∫≠p nh·∫≠t nh√† cung c·∫•p th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.suppliers'))
    
    return render_template('edit_supplier.html', form=form, supplier=supplier)

@main.route('/suppliers/<int:supplier_id>/delete', methods=['POST'])
def delete_supplier(supplier_id):
    """X√≥a nh√† cung c·∫•p"""
    if session.get('role') != 'admin':
        return redirect_no_permission()
    
    supplier = Supplier.query.get_or_404(supplier_id)
    supplier.is_active = False
    db.session.commit()
    flash('X√≥a nh√† cung c·∫•p th√†nh c√¥ng!', 'success')
    return redirect(url_for('main.suppliers'))

@main.route('/products')
def products():
    """Danh s√°ch s·∫£n ph·∫©m"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    products = Product.query.filter_by(is_active=True).join(Supplier).order_by(Product.category, Product.name).all()
    return render_template('products.html', products=products)

@main.route('/products/new', methods=['GET', 'POST'])
def new_product():
    """Th√™m s·∫£n ph·∫©m m·ªõi"""
    current_role = session.get('role')
    print(f"üîê [DEBUG] User role: {current_role}, Session: {dict(session)}")
    
    if session.get('role') not in ['admin', 'teacher']:
        print(f"üîê [DEBUG] Access denied for role: {current_role}")
        return redirect_no_permission()
    
    form = ProductForm()
    # L·∫•y danh s√°ch nh√† cung c·∫•p cho dropdown
    suppliers = Supplier.query.filter_by(is_active=True).order_by(Supplier.name).all()
    
    # N·∫øu ch∆∞a c√≥ supplier n√†o, t·∫°o m·ªôt supplier m·∫´u
    if not suppliers:
        default_supplier = Supplier(
            name="Nh√† cung c·∫•p m·∫∑c ƒë·ªãnh",
            address="ƒê·ªãa ch·ªâ c·∫ßn c·∫≠p nh·∫≠t",
            phone="0123456789",
            contact_person="Ng∆∞·ªùi li√™n h·ªá",
            supplier_type="fresh",
            registration_number="",
            food_safety_cert="",
            created_date=datetime.utcnow()
        )
        db.session.add(default_supplier)
        db.session.commit()
        suppliers = [default_supplier]
        flash('ƒê√£ t·∫°o nh√† cung c·∫•p m·∫∑c ƒë·ªãnh. Vui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin sau!', 'info')
    
    form.supplier_id.choices = [(s.id, s.name) for s in suppliers]
    
    if form.validate_on_submit():
        product = Product(
            name=form.name.data,
            category=form.category.data,
            supplier_id=form.supplier_id.data,
            unit=form.unit.data,
            usual_quantity=form.usual_quantity.data,
            storage_condition=form.storage_condition.data,
            shelf_life_days=form.shelf_life_days.data,
            notes=form.notes.data,
            created_date=datetime.utcnow()
        )
        db.session.add(product)
        db.session.commit()
        flash('Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.products'))
    else:
        # Debug form validation errors
        if request.method == 'POST':
            print(f"üîç [DEBUG] Form validation failed!")
            for field, errors in form.errors.items():
                print(f"üîç [DEBUG] Field '{field}': {errors}")
            print(f"üîç [DEBUG] Suppliers count: {len(suppliers)}")
    
    return render_template('new_product.html', form=form)

@main.route('/products/<int:product_id>/edit', methods=['GET', 'POST'])
def edit_product(product_id):
    """S·ª≠a th√¥ng tin s·∫£n ph·∫©m"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    product = Product.query.get_or_404(product_id)
    form = ProductForm(obj=product)
    
    # L·∫•y danh s√°ch nh√† cung c·∫•p cho dropdown
    suppliers = Supplier.query.filter_by(is_active=True).order_by(Supplier.name).all()
    form.supplier_id.choices = [(s.id, s.name) for s in suppliers]
    
    if form.validate_on_submit():
        form.populate_obj(product)
        db.session.commit()
        flash('C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.products'))
    
    return render_template('edit_product.html', form=form, product=product)

@main.route('/products/<int:product_id>/delete', methods=['POST'])
def delete_product(product_id):
    """X√≥a s·∫£n ph·∫©m"""
    if session.get('role') != 'admin':
        return redirect_no_permission()
    
    product = Product.query.get_or_404(product_id)
    product.is_active = False
    db.session.commit()
    flash('X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!', 'success')
    return redirect(url_for('main.products'))

# ============== AI Routes v·ªõi LLM Farm ==============

@main.route('/ai/menu-suggestions', methods=['POST'])
def ai_menu_suggestions():
    """API endpoint ƒë·ªÉ l·∫•y g·ª£i √Ω th·ª±c ƒë∆°n t·ª´ Gemini AI - SECURED & OPTIMIZED"""
    
    # Kh√¥i ph·ª•c role check v·ªõi caching ƒë·ªÉ tƒÉng t·ªëc
    user_role = session.get('role')
    if user_role not in ['admin', 'teacher']:
        return jsonify({
            'success': False,
            'error': 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n admin ho·∫∑c gi√°o vi√™n.'
        }), 403
    
    # Enhanced Rate Limiting v·ªõi security utils
    user_ip = validate_ip_address(request.remote_addr)
    rate_allowed, wait_seconds = check_rate_limit(f"ai_menu_{user_ip}", AI_RATE_LIMIT_SECONDS)
    
    if not rate_allowed:
        log_security_event('RATE_LIMIT_EXCEEDED', f'User: {user_role}, Wait: {wait_seconds}s', user_ip)
        return jsonify({
            'success': False,
            'error': f'Vui l√≤ng ch·ªù {wait_seconds} gi√¢y tr∆∞·ªõc khi t·∫°o th·ª±c ƒë∆°n ti·∫øp theo.'
        }), 429
    
    # Clean up old rate limit entries periodically
    clean_rate_limit_storage()
    
    print(f"ÔøΩ [SECURITY] Menu suggestions API called by {user_role} from {user_ip}")
    
    try:
        # Input validation v√† sanitization  
        if not request.json:
            return jsonify({
                'success': False,
                'error': 'D·ªØ li·ªáu request kh√¥ng h·ª£p l·ªá'
            }), 400
            
        # Sanitize v√† validate inputs
        age_group = str(request.json.get('age_group', '2-3 tu·ªïi')).strip()
        available_ingredients = str(request.json.get('available_ingredients', '')).strip()
        dietary_requirements = str(request.json.get('dietary_requirements', '')).strip()
        
        # Length limits ƒë·ªÉ tr√°nh abuse
        if len(available_ingredients) > 1000:
            return jsonify({
                'success': False,
                'error': 'Danh s√°ch nguy√™n li·ªáu qu√° d√†i (t·ªëi ƒëa 1000 k√Ω t·ª±)'
            }), 400
            
        if len(dietary_requirements) > 500:
            return jsonify({
                'success': False,
                'error': 'Y√™u c·∫ßu ƒë·∫∑c bi·ªát qu√° d√†i (t·ªëi ƒëa 500 k√Ω t·ª±)'
            }), 400
        
        # Validate age group
        valid_age_groups = ['6-12 th√°ng', '1-2 tu·ªïi', '2-3 tu·ªïi', '3-4 tu·ªïi', '4-5 tu·ªïi', '1-5 tu·ªïi']
        if age_group not in valid_age_groups:
            age_group = '2-3 tu·ªïi'  # Default fallback
        
        count = 5  # Fixed count for consistency
        
        # üöÄ TRY ENHANCED MULTI-AI FIRST!
        try:
            if ENHANCED_MENU_AI_AVAILABLE:
                print(f"üöÄ [MULTI-AI] Using Enhanced Menu AI with Groq fallback for {user_role}")
                suggestions = get_ai_menu_suggestions_enhanced(
                    age_group=age_group,
                    dietary_requirements=dietary_requirements,
                    available_ingredients=available_ingredients,
                    use_multi_ai=True  # Enable Multi-AI fallback
                )
                print(f"‚úÖ [MULTI-AI SUCCESS] Enhanced Menu AI completed for {user_role}")
            else:
                print(f"üîÑ [FALLBACK] Using original Menu AI for {user_role}")
                suggestions = get_ai_menu_suggestions(age_group, dietary_requirements, count, available_ingredients)
        except Exception as multi_ai_error:
            print(f"‚ö†Ô∏è [MULTI-AI FALLBACK] Enhanced AI failed: {multi_ai_error}")
            print(f"üîÑ [FALLBACK] Trying original Menu AI for {user_role}")
            suggestions = get_ai_menu_suggestions(age_group, dietary_requirements, count, available_ingredients)
        
        # Log successful operation
        print(f"‚úÖ [SUCCESS] Menu generated for {user_role} - Age: {age_group}, Ingredients: {len(available_ingredients)} chars")
        
        return jsonify({
            'success': True,
            'suggestions': suggestions,
            'age_group': age_group,
            'security_info': f"Generated securely for {user_role}"
        })
    except Exception as e:
        # Enhanced error logging v·ªõi security context
        error_msg = str(e)
        print(f"‚ùå [ERROR] Menu generation failed for {user_role} from {user_ip}: {error_msg}")
        
        # Don't expose internal errors to client
        return jsonify({
            'success': False,
            'error': 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o th·ª±c ƒë∆°n. Vui l√≤ng th·ª≠ l·∫°i sau.'
        }), 500

@main.route('/ai/create-menu-from-suggestions', methods=['POST'])
def create_menu_from_ai_suggestions():
    """T·∫°o th·ª±c ƒë∆°n m·ªõi t·ª´ g·ª£i √Ω AI"""
    if session.get('role') not in ['admin', 'teacher']:
        return jsonify({'error': 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'}), 403
    
    try:
        # L·∫•y data t·ª´ AI
        ai_data = request.json
        if not ai_data or not ai_data.get('success'):
            return jsonify({'error': 'D·ªØ li·ªáu AI kh√¥ng h·ª£p l·ªá'}), 400
            
        # T√≠nh tu·∫ßn hi·ªán t·∫°i
        from datetime import datetime
        now = datetime.now()
        week_number = now.isocalendar()[1]  # Tu·∫ßn trong nƒÉm
        
        # Ki·ªÉm tra tham s·ªë overwrite
        overwrite = ai_data.get('overwrite', False)
        
        # Ki·ªÉm tra xem tu·∫ßn n√†y ƒë√£ c√≥ th·ª±c ƒë∆°n ch∆∞a
        existing_menu = Curriculum.query.filter_by(week_number=week_number).first()
        if existing_menu and not overwrite:
            return jsonify({
                'error': f'Tu·∫ßn {week_number} ƒë√£ c√≥ th·ª±c ƒë∆°n. B·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?',
                'week_number': week_number,
                'existing': True
            }), 409
        
        # Tr√≠ch xu·∫•t d·ªØ li·ªáu th·ª±c ƒë∆°n t·ª´ AI suggestions
        suggestions = ai_data.get('suggestions', [])
        weekly_menu = extract_weekly_menu_from_suggestions(suggestions)
        
        if existing_menu and overwrite:
            # C·∫≠p nh·∫≠t th·ª±c ƒë∆°n hi·ªán c√≥
            existing_menu.content = json.dumps(weekly_menu, ensure_ascii=False)
            db.session.commit()
            
            return jsonify({
                'success': True,
                'message': f'ƒê√£ c·∫≠p nh·∫≠t th·ª±c ƒë∆°n tu·∫ßn {week_number} th√†nh c√¥ng',
                'week_number': week_number,
                'overwritten': True
            })
        else:
            # T·∫°o th·ª±c ƒë∆°n m·ªõi
            new_menu = Curriculum(
                week_number=week_number,
                content=json.dumps(weekly_menu, ensure_ascii=False)
            )
            
            db.session.add(new_menu)
            db.session.commit()
            
            return jsonify({
                'success': True,
                'message': f'ƒê√£ t·∫°o th·ª±c ƒë∆°n tu·∫ßn {week_number} th√†nh c√¥ng',
                'week_number': week_number
            })
        
    except Exception as e:
        db.session.rollback()
        print(f"Create Menu Error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

def extract_weekly_menu_from_suggestions(suggestions):
    """Tr√≠ch xu·∫•t v√† chuy·ªÉn ƒë·ªïi suggestions th√†nh format menu database"""
    menu_data = {}
    days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
    slots = ['morning', 'snack', 'dessert', 'lunch', 'afternoon', 'lateafternoon']
    
    # Initialize empty menu
    for day in days:
        menu_data[day] = {}
        for slot in slots:
            menu_data[day][slot] = "M√≥n ƒÉn dinh d∆∞·ª°ng"
    
    current_day = None
    current_day_index = -1
    
    for suggestion in suggestions:
        suggestion = suggestion.strip()
        
        # T√¨m ng√†y
        if '**Th·ª©' in suggestion:
            if 'Th·ª© 2' in suggestion:
                current_day = 'mon'
                current_day_index = 0
            elif 'Th·ª© 3' in suggestion:
                current_day = 'tue' 
                current_day_index = 1
            elif 'Th·ª© 4' in suggestion:
                current_day = 'wed'
                current_day_index = 2
            elif 'Th·ª© 5' in suggestion:
                current_day = 'thu'
                current_day_index = 3
            elif 'Th·ª© 6' in suggestion:
                current_day = 'fri'
                current_day_index = 4
            elif 'Th·ª© 7' in suggestion:
                current_day = 'sat'
                current_day_index = 5
            continue
            
        # T√¨m m√≥n ƒÉn theo khung gi·ªù
        if current_day and suggestion.startswith('‚Ä¢'):
            suggestion = suggestion[1:].strip()  # B·ªè bullet point
            
            if suggestion.startswith('S√°ng:'):
                menu_data[current_day]['morning'] = suggestion[5:].strip()
            elif suggestion.startswith('Ph·ª• s√°ng:'):
                menu_data[current_day]['snack'] = suggestion[9:].strip()
            elif suggestion.startswith('Tr√°ng mi·ªáng:'):
                menu_data[current_day]['dessert'] = suggestion[12:].strip()
            elif suggestion.startswith('Tr∆∞a:'):
                menu_data[current_day]['lunch'] = suggestion[5:].strip()
            elif suggestion.startswith('X·∫ø:'):
                menu_data[current_day]['afternoon'] = suggestion[3:].strip()
            elif suggestion.startswith('X·∫ø chi·ªÅu:'):
                menu_data[current_day]['lateafternoon'] = suggestion[9:].strip()
    
    return menu_data


# ============== CURRICULUM AI Routes ==============

def convert_structured_to_frontend_format(ai_result, age_group, week_number, themes, special_focus):
    """
    Convert new structured curriculum format to frontend-compatible format
    T·∫°o output t∆∞∆°ng t·ª± menu AI - list c·ªßa strings d·ªÖ ƒë·ªçc
    """
    try:
        print(f"üîç [DEBUG] Starting frontend format conversion")
        print(f"üîç [DEBUG] AI result keys: {list(ai_result.keys()) if isinstance(ai_result, dict) else 'Not a dict'}")
        
        structured_data = ai_result.get('data', {})
        provider = ai_result.get('provider', 'unknown')
        
        print(f"üîç [DEBUG] Structured data keys: {list(structured_data.keys()) if isinstance(structured_data, dict) else 'Not a dict'}")
        print(f"üîç [DEBUG] Provider: {provider}")
        
        # T·∫°o list activities t∆∞∆°ng t·ª± menu AI format
        curriculum_items = []
        
        # Header th√¥ng tin
        curriculum_items.extend([
            f"üìö **CH∆Ø∆†NG TR√åNH H·ªåC TU·∫¶N {week_number}**",
            f"üë∂ **ƒê·ªô tu·ªïi:** {age_group}",
            f"üéØ **Ch·ªß ƒë·ªÅ:** {themes if themes else 'Ch·ªß ƒë·ªÅ ph√°t tri·ªÉn to√†n di·ªán'}",
            f"‚≠ê **Tr·ªçng t√¢m:** {special_focus if special_focus else 'Ph√°t tri·ªÉn ƒëa d·∫°ng k·ªπ nƒÉng'}",
            ""
        ])
        
        # Day mapping
        day_names = {
            'mon': 'Th·ª© 2', 'tue': 'Th·ª© 3', 'wed': 'Th·ª© 4',
            'thu': 'Th·ª© 5', 'fri': 'Th·ª© 6'
        }
        
        # Time slot mapping v·ªõi emoji
        time_slots = {
            'morning_1': 'üåÖ 7h-8h: ƒê√≥n tr·∫ª & ƒÇn s√°ng',
            'morning_2': 'üèÉ 8h-8h30: Th·ªÉ d·ª•c & Tr√≤ chuy·ªán',
            'morning_3': 'üå≥ 8h30-9h: Ho·∫°t ƒë·ªông ngo√†i tr·ªùi',
            'morning_4': 'üá¨üáß 9h-9h30: English & B·ªØa ph·ª•',
            'morning_5': 'üìö 9h30-10h: H·ªçc t·∫≠p ch√≠nh',
            'morning_6': 'üçö 10h30-14h: ƒÇn tr∆∞a & Ngh·ªâ tr∆∞a',
            'afternoon_1': 'üß© 14h15-15h: Lego/Gi√°o c·ª•',
            'afternoon_2': 'ü•§ 15h-15h30: U·ªëng n∆∞·ªõc & ƒÇn x·∫ø',
            'afternoon_3': 'üßò 15h45-16h: Yoga/Ho·∫°t ƒë·ªông s√°ng t·∫°o',
            'afternoon_4': 'üëã 16h-17h: T·ª± do & ƒê√≥n tr·∫ª'
        }
        
        # Process each day
        daily_activities = []  # Format for JavaScript compatibility
        
        for day_code in ['mon', 'tue', 'wed', 'thu', 'fri']:
            if day_code not in structured_data:
                continue
                
            day_name = day_names[day_code]
            day_data = structured_data[day_code]
            
            # Create activities array for this day
            activities = []
            
            # Add activities for each time slot
            for slot_code in ['morning_1', 'morning_2', 'morning_3', 'morning_4', 'morning_5', 'morning_6',
                             'afternoon_1', 'afternoon_2', 'afternoon_3', 'afternoon_4']:
                
                if slot_code in day_data and day_data[slot_code]:
                    activity_content = day_data[slot_code]
                    time_label = time_slots.get(slot_code, f'{slot_code}:').replace('üåÖ ', '').replace('üèÉ ', '').replace('üå≥ ', '').replace('üá¨üáß ', '').replace('üìö ', '').replace('üçö ', '').replace('üß© ', '').replace('ü•§ ', '').replace('üßò ', '').replace('üëã ', '')
                    
                    activities.append({
                        'time': time_label,
                        'activity': activity_content[:50] + ('...' if len(activity_content) > 50 else ''),
                        'description': activity_content
                    })
            
            # Special formatting for Wednesday (Th·ª© 4 vui v·∫ª)
            if day_code == 'wed':
                day_display_name = f"{day_name} - TH·ª® 4 VUI V·∫∫"
            else:
                day_display_name = day_name
                
            daily_activities.append({
                'day': day_display_name,
                'activities': activities
            })
        
        # Return format compatible with frontend JavaScript
        return {
            'week_number': week_number,
            'age_group': age_group,
            'themes': themes or 'Ch·ªß ƒë·ªÅ ph√°t tri·ªÉn to√†n di·ªán',
            'special_focus': special_focus or 'Ph√°t tri·ªÉn ƒëa d·∫°ng k·ªπ nƒÉng',
            'daily_activities': daily_activities,  # JavaScript-compatible format
            'materials': [
                'ƒê·ªì ch∆°i gi√°o d·ª•c ph√π h·ª£p ƒë·ªô tu·ªïi',
                'S√°ch tranh v√† flashcard ch·ªß ƒë·ªÅ',
                'V·∫≠t li·ªáu t√¥ v·∫Ω v√† s√°ng t·∫°o',
                'ƒê·ªì ch∆°i Lego v√† gi√°o c·ª•',
                'Th·∫£m yoga v√† nh·∫°c c·ª•'
            ],
            'provider': provider,
            'structured_data': structured_data,  # Keep for create curriculum endpoint
            'curriculum': structured_data  # For database storage
        }
        
    except Exception as e:
        print(f"‚ùå [DEBUG] Error converting structured format: {e}")
        print(f"‚ùå [DEBUG] Error type: {type(e)}")
        print(f"‚ùå [DEBUG] AI result received: {ai_result}")
        return {
            'week_number': week_number,
            'age_group': age_group,
            'themes': themes or 'L·ªói x·ª≠ l√Ω d·ªØ li·ªáu',
            'special_focus': special_focus or 'L·ªói x·ª≠ l√Ω d·ªØ li·ªáu',
            'daily_activities': [],
            'materials': [],
            'provider': 'error',
            'error': str(e)
        }

@main.route('/ai/curriculum-suggestions', methods=['POST'])
def ai_curriculum_suggestions():
    """API endpoint ƒë·ªÉ l·∫•y g·ª£i √Ω ch∆∞∆°ng tr√¨nh h·ªçc t·ª´ Gemini AI"""
    
    # Role check
    user_role = session.get('role')
    if user_role not in ['admin', 'teacher']:
        return jsonify({
            'success': False,
            'error': 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n admin ho·∫∑c gi√°o vi√™n.'
        }), 403
    
    # Rate Limiting
    user_ip = validate_ip_address(request.remote_addr)
    rate_allowed, wait_seconds = check_rate_limit(f"ai_curriculum_{user_ip}", AI_RATE_LIMIT_SECONDS)
    
    if not rate_allowed:
        log_security_event('RATE_LIMIT_EXCEEDED', f'Curriculum User: {user_role}, Wait: {wait_seconds}s', user_ip)
        return jsonify({
            'success': False,
            'error': f'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng ch·ªù {wait_seconds} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i.'
        }), 429
    
    try:
        # Get and validate input
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫ßu v√†o'}), 400
        
        # Sanitize inputs
        age_group = sanitize_input(data.get('age_group', '2-3 tu·ªïi'))
        week_number = int(data.get('week_number', 1))
        themes = sanitize_input(data.get('themes', ''))
        special_focus = sanitize_input(data.get('special_focus', ''))
        
        # Length limits ƒë·ªÉ tr√°nh abuse
        if len(themes) > 500:
            return jsonify({
                'success': False,
                'error': 'Ch·ªß ƒë·ªÅ qu√° d√†i (t·ªëi ƒëa 500 k√Ω t·ª±)'
            }), 400
            
        if len(special_focus) > 500:
            return jsonify({
                'success': False,
                'error': 'Tr·ªçng t√¢m ƒë·∫∑c bi·ªát qu√° d√†i (t·ªëi ƒëa 500 k√Ω t·ª±)'
            }), 400
        
        # Validate age group - s·ª≠ d·ª•ng c√πng logic nh∆∞ Menu AI
        valid_age_groups = ['1-2 tu·ªïi', '2-3 tu·ªïi', '3-4 tu·ªïi', '4-5 tu·ªïi']
        if age_group not in valid_age_groups:
            age_group = '2-3 tu·ªïi'  # Default fallback
        
        # Validate week number
        if not (1 <= week_number <= 53):
            return jsonify({'success': False, 'error': 'S·ªë tu·∫ßn ph·∫£i t·ª´ 1-53'}), 400
        
        # Log security event
        log_security_event('CURRICULUM_AI_REQUEST', f'User: {user_role}, Age: {age_group}, Week: {week_number}', user_ip)
        
        # üöÄ TRY ENHANCED MULTI-AI FIRST!
        try:
            if ENHANCED_CURRICULUM_AI_AVAILABLE:
                print(f"üöÄ [MULTI-AI] Using Enhanced Curriculum AI with Groq fallback for {user_role}")
                ai_result = get_ai_curriculum_suggestions_enhanced(
                    age_group=age_group,
                    week_number=week_number,
                    use_multi_ai=True  # Enable Multi-AI fallback
                )
                print(f"‚úÖ [MULTI-AI SUCCESS] Enhanced Curriculum AI completed for {user_role}")
                print(f"üîç [DEBUG] AI Result type: {type(ai_result)}")
                print(f"üîç [DEBUG] AI Result success: {ai_result.get('success') if isinstance(ai_result, dict) else 'Not dict'}")
                
                # Handle the new structured format
                if isinstance(ai_result, dict) and ai_result.get('success'):
                    # Convert structured data to frontend format
                    print(f"üîç [DEBUG] Converting structured data to frontend format")
                    curriculum_data = convert_structured_to_frontend_format(
                        ai_result, age_group, week_number, themes, special_focus
                    )
                    print(f"‚úÖ [DEBUG] Frontend format conversion completed")
                else:
                    print(f"‚ö†Ô∏è [DEBUG] AI result not successful, using fallback format")
                    # Fallback for old format
                    curriculum_data = {
                        'week_number': week_number,
                        'age_group': age_group,
                        'themes': themes,
                        'special_focus': special_focus,
                        'daily_activities': ai_result if isinstance(ai_result, list) else [],
                        'materials': [],
                        'provider': 'enhanced_fallback'
                    }
            else:
                print(f"üîÑ [FALLBACK] Using original Curriculum AI for {user_role}")
                # Import original curriculum AI service
                from app.curriculum_ai import curriculum_ai_service
                curriculum_data = curriculum_ai_service.generate_weekly_curriculum(
                    age_group=age_group,
                    week_number=week_number,
                    themes=themes if themes else None,
                    special_focus=special_focus if special_focus else None
                )
        except Exception as multi_ai_error:
            print(f"‚ö†Ô∏è [MULTI-AI FALLBACK] Enhanced Curriculum AI failed: {multi_ai_error}")
            print(f"üîÑ [FALLBACK] Trying original Curriculum AI for {user_role}")
            # Import original curriculum AI service
            from app.curriculum_ai import curriculum_ai_service
            curriculum_data = curriculum_ai_service.generate_weekly_curriculum(
                age_group=age_group,
                week_number=week_number,
                themes=themes if themes else None,
                special_focus=special_focus if special_focus else None
            )
        
        # Log success
        print(f"‚úÖ [SUCCESS] Curriculum generated for {user_role} - Age: {age_group}, Week: {week_number}")
        
        return jsonify({
            'success': True,
            'curriculum_data': curriculum_data,
            'age_group': age_group,
            'week_number': week_number
        })
        
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå [ERROR] Curriculum generation failed for {user_role} from {user_ip}: {error_msg}")
        print(f"‚ùå [DEBUG] Exception type: {type(e)}")
        print(f"‚ùå [DEBUG] Full traceback:")
        import traceback
        traceback.print_exc()
        
        log_security_event('CURRICULUM_AI_ERROR', f'Error: {error_msg}', user_ip)
        
        # Enhanced error handling like Menu AI
        if "quota" in error_msg.lower() or "429" in error_msg:
            return jsonify({
                'success': False,
                'error': 'API ƒë√£ h·∫øt quota. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra c·∫•u h√¨nh API key.'
            }), 429
        else:
            # Don't expose internal errors to client
            return jsonify({
                'success': False,
                'error': f'ƒê√£ x·∫£y ra l·ªói khi t·∫°o ch∆∞∆°ng tr√¨nh h·ªçc: {error_msg}'
            }), 500


@main.route('/ai/create-curriculum-from-suggestions', methods=['POST'])
def ai_create_curriculum_from_suggestions():
    """API endpoint ƒë·ªÉ t·∫°o ch∆∞∆°ng tr√¨nh h·ªçc t·ª´ suggestions AI"""
    
    # Role check
    user_role = session.get('role')
    if user_role not in ['admin', 'teacher']:
        return jsonify({
            'success': False,
            'error': 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
        }), 403
    
    try:
        data = request.get_json()
        if not data or 'curriculum_data' not in data:
            return jsonify({'success': False, 'error': 'Kh√¥ng c√≥ d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh h·ªçc'}), 400
        
        curriculum_data = data['curriculum_data']
        
        # Handle both old and new format
        if 'week_info' in curriculum_data:
            # Old format
            week_number = curriculum_data.get('week_info', {}).get('week_number', 1)
            curriculum_content = curriculum_data.get('curriculum', {})
        else:
            # New format - get week_number directly and use structured_data
            week_number = curriculum_data.get('week_number', 1)
            if 'structured_data' in curriculum_data:
                curriculum_content = curriculum_data['structured_data']
            elif 'curriculum' in curriculum_data:
                curriculum_content = curriculum_data['curriculum']
            else:
                return jsonify({'success': False, 'error': 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh h·ªçc h·ª£p l·ªá'}), 400
        
        # Check if week already exists
        existing = Curriculum.query.filter_by(week_number=week_number).first()
        
        if existing:
            return jsonify({
                'success': False,
                'error': f'Tu·∫ßn {week_number} ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn tu·∫ßn kh√°c ho·∫∑c x√≥a tu·∫ßn c≈© tr∆∞·ªõc.'
            }), 409
        else:
            # Create new curriculum with structured content
            new_curriculum = Curriculum(
                week_number=week_number,
                content=json.dumps(curriculum_content, ensure_ascii=False)
            )
            
            db.session.add(new_curriculum)
            db.session.commit()
            
            print(f"‚úÖ [SUCCESS] Created curriculum week {week_number} with structured format")
            
            return jsonify({
                'success': True,
                'message': f'ƒê√£ t·∫°o ch∆∞∆°ng tr√¨nh h·ªçc tu·∫ßn {week_number} th√†nh c√¥ng',
                'week_number': week_number
            })
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå [ERROR] Create Curriculum Error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@main.route('/debug-curriculum')
def debug_curriculum():
    """Debug curriculum AI import"""
    try:
        # Step 1: Test import
        print("üîç [DEBUG] Step 1: Testing import...")
        from app.curriculum_ai import curriculum_ai_service
        print("‚úÖ [DEBUG] Import successful")
        
        # Step 2: Test service object
        print("üîç [DEBUG] Step 2: Testing service object...")
        service_type = type(curriculum_ai_service).__name__
        print(f"‚úÖ [DEBUG] Service type: {service_type}")
        
        return f"""
        <h2>üîç Curriculum AI Debug</h2>
        <p>‚úÖ Import th√†nh c√¥ng</p>
        <p>‚úÖ Service type: {service_type}</p>
        <p><a href='/test-curriculum-ai'>Test ch·ª©c nƒÉng AI</a></p>
        <p><a href='/login'>ƒêƒÉng nh·∫≠p ƒë·ªÉ test full</a></p>
        """
        
    except Exception as e:
        import traceback
        error_detail = traceback.format_exc()
        print(f"‚ùå [DEBUG ERROR] {str(e)}")
        print(f"üìã [TRACEBACK] {error_detail}")
        
        return f"""
        <h2>‚ùå Curriculum AI Debug Error</h2>
        <p><strong>Error:</strong> {str(e)}</p>
        <p><strong>Type:</strong> {type(e).__name__}</p>
        <pre>{error_detail}</pre>
        """

@main.route('/test-curriculum-ai')
def test_curriculum_ai():
    """Test curriculum AI service tr·ª±c ti·∫øp"""
    try:
        # Import curriculum AI service
        from app.curriculum_ai import curriculum_ai_service
        
        print("üß™ [TEST] Testing curriculum AI service...")
        
        # Test v·ªõi parameters ƒë∆°n gi·∫£n
        result = curriculum_ai_service.generate_weekly_curriculum(
            age_group="2-3 tu·ªïi",
            week_number=1,
            themes="ƒê·ªông v·∫≠t",
            special_focus="Ph√°t tri·ªÉn ng√¥n ng·ªØ"
        )
        
        return jsonify({
            'success': True,
            'message': 'Curriculum AI service ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
            'result_keys': list(result.keys()) if result else None
        })
        
    except Exception as e:
        print(f"‚ùå [TEST ERROR] {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'error_type': type(e).__name__
        }), 500

@main.route('/create-test-teacher')
def create_test_teacher():
    """T·∫°o t√†i kho·∫£n gi√°o vi√™n test"""
    from werkzeug.security import generate_password_hash
    
    # Ki·ªÉm tra xem ƒë√£ c√≥ gi√°o vi√™n test ch∆∞a
    existing = Staff.query.filter_by(email='gv1@gmail.com').first()
    if existing:
        return f"T√†i kho·∫£n gv1@gmail.com ƒë√£ t·ªìn t·∫°i! ID: {existing.id}, Position: {existing.position}"
    
    # T·∫°o gi√°o vi√™n m·ªõi
    teacher = Staff(
        name='Gi√°o vi√™n Test',
        position='teacher',
        contact_info='gv1@gmail.com',
        email='gv1@gmail.com',
        phone='0123456789',
        password=generate_password_hash('123456')
    )
    
    db.session.add(teacher)
    db.session.commit()
    
    return f"‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n gi√°o vi√™n test:<br>Email: gv1@gmail.com<br>Password: 123456<br>ID: {teacher.id}<br><a href='/login'>ƒêƒÉng nh·∫≠p ngay</a>"

@main.route('/ai-dashboard')
def ai_dashboard():
    """Trang dashboard AI v·ªõi c√°c t√≠nh nƒÉng LLM Farm"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    return render_template('ai_dashboard.html')