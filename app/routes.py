

from flask import Blueprint, render_template, request, redirect, url_for, flash, send_file, session, jsonify, current_app
from app.models import db, Activity, Curriculum, Child, AttendanceRecord, Staff, BmiRecord, ActivityImage, Supplier, Product, StudentAlbum, StudentPhoto, StudentProgress
from app.forms import EditProfileForm, ActivityCreateForm, ActivityEditForm, SupplierForm, ProductForm
from calendar import monthrange
from datetime import datetime, date, timedelta
import io, zipfile, os, json, re, secrets


# Import optional dependencies with error handling
try:
    from docx import Document
    from docx.shared import Pt
    DOCX_AVAILABLE = True
except ImportError:
    print("Warning: python-docx not available")
    DOCX_AVAILABLE = False
    Document = None
    Pt = None


# Import AI menu suggestion (single entry point)
try:
    from app.menu_ai import get_ai_menu_suggestions
except ImportError:
    print("Warning: menu_ai not available")
    def get_ai_menu_suggestions(*args, **kwargs):
        return "AI service not available"

# Enhanced Security imports
from .security_utils import (
    sanitize_input, validate_age_group, validate_menu_count, 
    validate_ip_address, is_sql_injection_attempt, 
    log_security_event, check_rate_limit, clean_rate_limit_storage
)

# Rate limiting cho AI endpoints - Security enhancement
ai_request_timestamps = {}
AI_RATE_LIMIT_SECONDS = 10  # Ch·ªâ cho ph√©p 1 request AI m·ªói 10 gi√¢y/user

# More optional imports with error handling
try:
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    from docx.oxml import OxmlElement
    from docx.oxml.ns import qn
    from docx.shared import RGBColor
except ImportError:
    WD_ALIGN_PARAGRAPH = None
    OxmlElement = None
    qn = None
    RGBColor = None

try:
    from openpyxl import load_workbook, Workbook
    from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
    OPENPYXL_AVAILABLE = True
except ImportError:
    print("Warning: openpyxl not available")
    OPENPYXL_AVAILABLE = False
    load_workbook = None
    Workbook = None
    PatternFill = None
    Font = None
    Alignment = None
    Border = None
    Side = None

try:
    from PIL import Image
    PIL_AVAILABLE = True
except ImportError:
    print("Warning: PIL (Pillow) not available")
    PIL_AVAILABLE = False
    Image = None

main = Blueprint('main', __name__)



# DEBUG: Test Curriculum AI import ngay khi kh·ªüi ƒë·ªông
try:
    print("üîç [STARTUP DEBUG] Testing curriculum AI import...")
    from app.curriculum_ai import curriculum_ai_service
    print("‚úÖ [STARTUP SUCCESS] Curriculum AI imported successfully!")
    print(f"üìã [STARTUP INFO] Service type: {type(curriculum_ai_service)}")
except Exception as e:
    print(f"‚ùå [STARTUP ERROR] Failed to import curriculum AI: {e}")
    import traceback
    print(f"üìã [STARTUP TRACEBACK] {traceback.format_exc()}")

def redirect_no_permission():
    flash('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y!', 'danger')
    return redirect(request.referrer or url_for('main.index'))

def is_mobile():
    ua = request.user_agent.string.lower()
    return 'mobile' in ua or 'android' in ua or 'iphone' in ua

def calculate_age(birth_date):
    today = datetime.today()
    try:
        birthday = datetime.strptime(birth_date, '%Y-%m-%d')
    except Exception:
        return 0
    age = today.year - birthday.year - ((today.month, today.day) < (birthday.month, birthday.day))
    return age

MAX_LOGIN_ATTEMPTS = 5
LOCKOUT_TIME_MINUTES = 10
LOGIN_COOLDOWN_SECONDS = 30
login_attempts = {}
lockout_until = {}
last_login_time = {}

# --- GLOBAL ERROR HANDLER FOR API JSON RESPONSE ---
from werkzeug.exceptions import HTTPException

@main.errorhandler(Exception)
def handle_api_exception(e):
    from flask import request
    import traceback
    # Ch·ªâ tr·∫£ v·ªÅ JSON n·∫øu l√† API (application/json ho·∫∑c /ai/ route)
    if request.path.startswith('/ai/') or request.is_json or request.headers.get('Accept', '').startswith('application/json'):
        code = 500
        if isinstance(e, HTTPException):
            code = e.code
        return jsonify({
            'success': False,
            'error': str(e),
            'trace': traceback.format_exc()[:1000]  # Gi·ªõi h·∫°n ƒë·ªô d√†i trace cho debug
        }), code
    # N·∫øu kh√¥ng ph·∫£i API th√¨ tr·∫£ v·ªÅ m·∫∑c ƒë·ªãnh
    raise e
# Password hash/check imports (with fallback)
try:
    from werkzeug.security import generate_password_hash, check_password_hash
    WERKZEUG_AVAILABLE = True
except ImportError:
    print("Warning: werkzeug.security not available, using fallback")
    import hashlib
    WERKZEUG_AVAILABLE = False
    def generate_password_hash(password):
        return hashlib.sha256(password.encode()).hexdigest()
    def check_password_hash(hash_password, password):
        return hash_password == hashlib.sha256(password.encode()).hexdigest()


# ================== DANH S√ÅCH M√ìN ƒÇN ==================

@main.route('/dish-list')
def dish_list():
    from app.models import Dish
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    dishes = Dish.query.all()
    dish_infos = []
    return render_template('dish_list.html', dishes=dishes)

# Route ƒë·ªÉ b·∫≠t/t·∫Øt tr·∫°ng th√°i m√≥n ƒÉn
@main.route('/dish/<int:dish_id>/toggle-active', methods=['POST'])
def toggle_dish_active(dish_id):
    from app.models import Dish, db
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    dish = Dish.query.get_or_404(dish_id)
    dish.is_active = not dish.is_active
    db.session.commit()
    flash(f"ƒê√£ {'b·∫≠t' if dish.is_active else '·∫©n'} m√≥n ƒÉn!", 'success')
    return redirect(url_for('main.dish_list'))

# ================== S·ª¨A/X√ìA M√ìN ƒÇN ==================
@main.route('/dish/<int:dish_id>/edit', methods=['GET', 'POST'])
def edit_dish(dish_id):
    from app.models import Dish, DishIngredient, Product, db
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    dish = Dish.query.get_or_404(dish_id)
    products = Product.query.all()
    product_units = sorted(list(set([p.unit for p in products if p.unit])))
    if request.method == 'POST':
        dish.name = request.form.get('name')
        dish.description = request.form.get('description')
        meal_times = request.form.getlist('meal_times')
        dish.meal_times = meal_times
        # X√≥a nguy√™n li·ªáu c≈©
        DishIngredient.query.filter_by(dish_id=dish.id).delete()
        ingredient_ids = request.form.getlist('ingredient_id')
        units = request.form.getlist('unit')
        quantities = request.form.getlist('quantity')
        for idx, pid in enumerate(ingredient_ids):
            if not pid or not units[idx] or not quantities[idx]:
                continue
            di = DishIngredient(
                dish_id=dish.id,
                product_id=int(pid),
                quantity=float(quantities[idx]),
                unit=units[idx],
                created_date=datetime.now(),
                is_active=True
            )
            db.session.add(di)
        db.session.commit()
        flash('ƒê√£ c·∫≠p nh·∫≠t m√≥n ƒÉn!', 'success')
        return redirect(url_for('main.dish_list'))
    # Chu·∫©n b·ªã d·ªØ li·ªáu nguy√™n li·ªáu cho form
    ingredients = dish.ingredients
    return render_template('edit_dish.html', dish=dish, products=products, ingredients=ingredients, product_units=product_units)

@main.route('/dish/<int:dish_id>/delete', methods=['POST'])
def delete_dish(dish_id):
    from app.models import Dish, db
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    dish = Dish.query.get_or_404(dish_id)
    db.session.delete(dish)
    db.session.commit()
    flash('ƒê√£ x√≥a m√≥n ƒÉn!', 'success')
    return redirect(url_for('main.dish_list'))
# ================== T·∫†O M√ìN ƒÇN ==================
@main.route('/dish/new', methods=['GET', 'POST'])
def create_dish():
    from app.models import Dish, DishIngredient, Product, db
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    products = Product.query.filter_by(is_active=True).join(Supplier).order_by(Product.category, Product.name).all()
    product_units = sorted(list(set([p.unit for p in products if p.unit])))
    if request.method == 'POST':
        name = request.form.get('name')
        description = request.form.get('description')
        ingredient_ids = request.form.getlist('ingredient_id')
        units = request.form.getlist('unit')
        quantities = request.form.getlist('quantity')
        from sqlalchemy.exc import IntegrityError
        meal_times = request.form.getlist('meal_times')
        dish = Dish(name=name, description=description, meal_times=meal_times)
        db.session.add(dish)
        try:
            db.session.flush()  # ƒê·ªÉ l·∫•y dish.id
        except IntegrityError:
            db.session.rollback()
            flash('T√™n m√≥n ƒÉn ƒë√£ t·ªìn t·∫°i, vui l√≤ng ch·ªçn t√™n kh√°c!', 'danger')
            return render_template('create_dish.html', products=products, product_units=product_units)
        # Th√™m nguy√™n li·ªáu
        for idx, pid in enumerate(ingredient_ids):
            if not pid or not units[idx] or not quantities[idx]:
                continue
            di = DishIngredient(
                dish_id=dish.id,
                product_id=int(pid),
                quantity=float(quantities[idx]),
                unit=units[idx],
                created_date=datetime.now(),
                is_active=True
            )
            db.session.add(di)
        db.session.commit()
        flash('ƒê√£ t·∫°o m√≥n ƒÉn th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.dish_list'))
    return render_template('create_dish.html', products=products, product_units=product_units)



@main.route('/')
def index():
    mobile = is_mobile()
    return render_template('about.html', title='Home', mobile=mobile)

@main.route('/about')
def about():
    mobile = is_mobile()
    return render_template('about.html', title='About Us', mobile=mobile)

@main.route('/gallery')
def gallery():
    mobile = is_mobile()
    from app.models import ActivityImage
    images = ActivityImage.query.order_by(ActivityImage.upload_date.desc()).all()
    return render_template('gallery.html', title='Gallery', mobile=mobile, images=images)

@main.route('/contact')
def contact():
    mobile = is_mobile()
    return render_template('contact.html', title='Contact Us', mobile=mobile)

@main.route('/activities/new', methods=['GET', 'POST'])
def new_activity():
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    form = ActivityCreateForm()
    if form.validate_on_submit():
        title = form.title.data
        content = form.description.data
        date_val = datetime.strptime(form.date.data, '%Y-%m-%d') if form.date.data else date.today()
        background_file = form.background.data
        image_url = ''
        if background_file and background_file.filename:
            allowed_ext = {'.jpg', '.jpeg', '.png', '.gif', '.jfif'}
            ext = os.path.splitext(background_file.filename)[1].lower()
            safe_filename = re.sub(r'[^a-zA-Z0-9_.-]', '', background_file.filename)
            if ext not in allowed_ext:
                flash('Ch·ªâ cho ph√©p t·∫£i l√™n c√°c file ·∫£nh c√≥ ƒëu√¥i: .jpg, .jpeg, .png, .gif, .jfif!', 'danger')
                return render_template('new_activity.html', form=form, title='ƒêƒÉng b√†i vi·∫øt m·ªõi', mobile=is_mobile())
            filename = 'bg_' + datetime.now().strftime('%Y%m%d%H%M%S') + '_' + safe_filename
            save_path = os.path.join('app', 'static', 'images', filename)
            # Resize background
            img = Image.open(background_file)
            img.thumbnail((1200, 800))
            img.save(save_path)
            image_url = url_for('static', filename=f'images/{filename}')
        new_post = Activity(title=title, description=content, date=date_val, image=image_url)
        db.session.add(new_post)
        db.session.commit()
        # T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh ho·∫°t ƒë·ªông
        activity_dir = os.path.join('app', 'static', 'images', 'activities', str(new_post.id))
        os.makedirs(activity_dir, exist_ok=True)
        # L∆∞u nhi·ªÅu ·∫£nh ho·∫°t ƒë·ªông
        files = request.files.getlist('images')
        for file in files:
            if file and getattr(file, 'filename', None):
                ext = os.path.splitext(file.filename)[1].lower()
                if ext not in ['.jpg', '.jpeg', '.png', '.gif', '.jfif']:
                    continue
                safe_filename = re.sub(r'[^a-zA-Z0-9_.-]', '', file.filename)
                img_filename = datetime.now().strftime('%Y%m%d%H%M%S%f') + '_' + safe_filename
                img_path = os.path.join(activity_dir, img_filename)
                try:
                    file.stream.seek(0)
                    img = Image.open(file.stream)
                    img.thumbnail((1200, 800))
                    img.save(img_path)
                    rel_path = f'images/activities/{new_post.id}/{img_filename}'
                    db.session.add(ActivityImage(filename=img_filename, filepath=rel_path, upload_date=datetime.now(), activity_id=new_post.id))
                except Exception as e:
                    import traceback
                    print(f"[ERROR] L·ªói upload ·∫£nh: {file.filename} - {e}")
                    traceback.print_exc()
                    flash(f"L·ªói upload ·∫£nh: {file.filename} - {e}", 'danger')
                    continue
        db.session.commit()
        flash('ƒê√£ ƒëƒÉng b√†i vi·∫øt m·ªõi!', 'success')
        return redirect(url_for('main.activities'))
    mobile = is_mobile()
    from datetime import date
    current_date_iso = date.today().isoformat()
    return render_template('new_activity.html', form=form, title='ƒêƒÉng b√†i vi·∫øt m·ªõi', mobile=mobile, current_date_iso=current_date_iso)

@main.route('/activities/<int:id>/delete', methods=['POST'])
def delete_activity(id):
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    post = Activity.query.get_or_404(id)
    if post:
        for img in post.images:
            img_path = os.path.join('app', 'static', img.filepath)
            if os.path.exists(img_path):
                os.remove(img_path)
            db.session.delete(img)
        db.session.delete(post)
        db.session.commit()
        flash('ƒê√£ xo√° b√†i vi·∫øt!', 'success')
    else:
        flash('Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ xo√°!', 'danger')
    mobile = is_mobile()
    return redirect(url_for('main.activities', mobile=mobile))

@main.route('/activities/<int:id>')
def activity_detail(id):
    post = Activity.query.get_or_404(id)
    if not post:
        flash('Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt!', 'danger')
        return redirect(url_for('main.activities'))
    activity = {
        'id': post.id,
        'title': post.title,
        'content': post.description,
        'image': post.image,
        'date_posted': post.date.strftime('%Y-%m-%d'),
        'gallery': post.images
    }
    mobile = is_mobile()
    from app.forms import DeleteActivityForm
    form = DeleteActivityForm()
    return render_template('activity_detail.html', activity=activity, title=post.title, mobile=mobile, form=form)

@main.route('/curriculum/new', methods=['GET', 'POST'])
def new_curriculum():
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    if request.method == 'POST':
        week_number = request.form.get('week_number')
        days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
        morning_slots = ['morning_1', 'morning_2', 'morning_3', 'morning_4', 'morning_5', 'morning_6', 'morning_7']
        afternoon_slots = ['afternoon_1', 'afternoon_2', 'afternoon_3', 'afternoon_4']
        curriculum_data = {}
        for day in days:
            curriculum_data[day] = {}
            for slot in morning_slots:
                curriculum_data[day][slot] = request.form.get(f'{day}_{slot}')
            for slot in afternoon_slots:
                curriculum_data[day][slot] = request.form.get(f'{day}_{slot}')
        content = json.dumps(curriculum_data, ensure_ascii=False)
        new_week = Curriculum(week_number=week_number, content=content, material=None)
        db.session.add(new_week)
        db.session.commit()
        flash('ƒê√£ th√™m ch∆∞∆°ng tr√¨nh h·ªçc m·ªõi!', 'success')
        return redirect(url_for('main.curriculum'))
    mobile = is_mobile()
    return render_template('new_curriculum.html', title='T·∫°o ch∆∞∆°ng tr√¨nh m·ªõi', mobile=mobile)

@main.route('/curriculum')
def curriculum():
    import secrets
    if 'csrf_token' not in session or not session['csrf_token']:
        session['csrf_token'] = secrets.token_hex(16)
    weeks = Curriculum.query.order_by(Curriculum.week_number).all()
    curriculum = []
    for week in weeks:
        try:
            data = json.loads(week.content)
        except Exception:
            data = {}
        curriculum.append({
            'week_number': week.week_number,
            'data': data
        })
    mobile = is_mobile()
    return render_template('curriculum.html', curriculum=curriculum, title='Ch∆∞∆°ng tr√¨nh h·ªçc', mobile=mobile)

@main.route('/attendance/new', methods=['GET', 'POST'])
def new_student():
    if session.get('role') != 'admin' and session.get('role') != 'teacher':
        return redirect_no_permission()
    if request.method == 'POST':
        name = request.form.get('name')
        student_code = request.form.get('student_code')
        class_name = request.form.get('class_name')
        birth_date = request.form.get('birth_date')
        parent_contact = request.form.get('parent_contact')
        if class_name not in ['Kay 01', 'Kay 02']:
            flash('L·ªõp kh√¥ng h·ª£p l·ªá!', 'danger')
            return redirect(url_for('main.new_student'))
        new_child = Child(name=name, age=0, parent_contact=parent_contact, class_name=class_name, birth_date=birth_date, student_code=student_code)
        db.session.add(new_child)
        db.session.commit()
        flash('ƒê√£ th√™m h·ªçc sinh m·ªõi!', 'success')
        return redirect(url_for('main.attendance'))
    mobile = is_mobile()
    return render_template('new_attendance.html', title='T·∫°o h·ªçc sinh m·ªõi', mobile=mobile)

@main.route('/attendance', methods=['GET', 'POST'])
def attendance():
    if not session.get('role'):
        flash('B·∫°n ph·∫£i ƒëƒÉng nh·∫≠p m·ªõi truy c·∫≠p ƒë∆∞·ª£c trang n√†y!', 'danger')
        return redirect(url_for('main.about'))
    if session.get('role') == 'parent':
        return redirect(url_for('main.attendance_history'))
    from datetime import date
    attendance_date = request.args.get('attendance_date') or date.today().strftime('%Y-%m-%d')
    selected_class = request.args.get('class_name')
    # L·∫•y danh s√°ch l·ªõp c·ªë ƒë·ªãnh
    class_names = ['Kay 01', 'Kay 02']
    # L·ªçc h·ªçc sinh theo l·ªõp
    if selected_class:
        students = Child.query.filter_by(class_name=selected_class).all()
    else:
        students = Child.query.all()
    # L·∫•y tr·∫°ng th√°i ƒëi·ªÉm danh t·ª´ database cho ng√†y ƒë√£ ch·ªçn
    for student in students:
        record = AttendanceRecord.query.filter_by(child_id=student.id, date=attendance_date).first()
        if record:
            student.status = record.status
        else:
            student.status = 'V·∫Øng'
    if request.method == 'POST':
        for student in students:
            present_value = request.form.get(f'present_{student.id}')
            if present_value == 'yes':
                status = 'C√≥ m·∫∑t'
            elif present_value == 'absent_excused':
                status = 'V·∫Øng m·∫∑t c√≥ ph√©p'
            elif present_value == 'absent_unexcused':
                status = 'V·∫Øng m·∫∑t kh√¥ng ph√©p'
            else:
                status = 'V·∫Øng'
            record = AttendanceRecord.query.filter_by(child_id=student.id, date=attendance_date).first()
            if record:
                record.status = status
            else:
                record = AttendanceRecord(child_id=student.id, date=attendance_date, status=status)
                db.session.add(record)
            student.status = status
        db.session.commit()
        flash('ƒê√£ l∆∞u ƒëi·ªÉm danh!', 'success')
        return redirect(url_for('main.attendance', attendance_date=attendance_date, class_name=selected_class))
    mobile = is_mobile()
    return render_template('attendance.html', students=students, title='ƒêi·ªÉm danh', current_date=attendance_date, mobile=mobile, class_names=class_names, selected_class=selected_class)

@main.route('/attendance/mark', methods=['GET', 'POST'])
def mark_attendance():
    students = Child.query.all()
    if request.method == 'POST':
        for student in students:
            present = request.form.get(f'present_{student.id}') == 'on'
            # TODO: L∆∞u tr·∫°ng th√°i ƒëi·ªÉm danh v√†o database (c·∫ßn th√™m tr∆∞·ªùng status v√†o model Child)
            student.status = 'C√≥ m·∫∑t' if present else 'V·∫Øng'
        db.session.commit()
        flash('ƒê√£ ƒëi·ªÉm danh cho t·∫•t c·∫£ h·ªçc sinh!', 'success')
        return redirect(url_for('main.attendance'))
    mobile = is_mobile()
    return render_template('mark_attendance.html', students=students, title='ƒêi·ªÉm danh h·ªçc sinh', mobile=mobile)

@main.route('/attendance/history')
def attendance_history():
    if session.get('role') == 'parent':
        # Ch·ªâ cho ph·ª• huynh xem l·ªãch s·ª≠ ƒëi·ªÉm danh c·ªßa con m√¨nh
        user_id = session.get('user_id')
        child = Child.query.filter_by(id=user_id).first()
        students = [child] if child else []
    else:
        students = Child.query.all()
    month = request.args.get('month')
    if month:
        year, m = map(int, month.split('-'))
    else:
        today = datetime.today()
        year, m = today.year, today.month
        month = f"{year:04d}-{m:02d}"
    num_days = monthrange(year, m)[1]
    days_in_month = [f"{year:04d}-{m:02d}-{day:02d}" for day in range(1, num_days+1)]
    records_raw = AttendanceRecord.query.filter(AttendanceRecord.date.like(f"{year:04d}-{m:02d}-%")).all()
    records = {}
    for r in records_raw:
        records[(r.child_id, r.date)] = r
    mobile = is_mobile()
    return render_template('attendance_history.html', records=records, students=students, days_in_month=days_in_month, selected_month=month, title='L·ªãch s·ª≠ ƒëi·ªÉm danh', mobile=mobile)

@main.route('/invoice', methods=['GET', 'POST'])
def invoice():
    month = request.args.get('month')
    if month:
        year, m = map(int, month.split('-'))
    else:
        today = datetime.today()
        year, m = today.year, today.month
        month = f"{year:04d}-{m:02d}"
    num_days = monthrange(year, m)[1]
    days_in_month = [f"{year:04d}-{m:02d}-{day:02d}" for day in range(1, num_days+1)]
    students = Child.query.all()
    records_raw = AttendanceRecord.query.filter(AttendanceRecord.date.like(f"{year:04d}-{m:02d}-%")).all()
    # T√≠nh s·ªë ng√†y c√≥ m·∫∑t v√† s·ªë ng√†y v·∫Øng m·∫∑t kh√¥ng ph√©p cho t·ª´ng h·ªçc sinh
    attendance_days = {student.id: 0 for student in students}
    absent_unexcused_days = {student.id: 0 for student in students}
    valid_student_ids = set(attendance_days.keys())
    for r in records_raw:
        if r.child_id not in valid_student_ids:
            continue
        if r.status == 'C√≥ m·∫∑t':
            attendance_days[r.child_id] += 1
        elif r.status == 'V·∫Øng m·∫∑t kh√¥ng ph√©p':
            absent_unexcused_days[r.child_id] += 1
    invoices = []
    if request.method == 'POST':
        selected_ids = request.form.getlist('student_ids')
        if request.form.get('export_word'):
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, 'w') as zipf:
                for student in students:
                    if str(student.id) in selected_ids:
                        doc = Document()
                        # B·∫£ng header: th√¥ng tin tr∆∞·ªùng b√™n tr√°i, logo b√™n ph·∫£i
                        header_table = doc.add_table(rows=1, cols=2)
                        header_table.style = None  # Remove borders for a cleaner look
                        left_cell = header_table.cell(0,0)
                        right_cell = header_table.cell(0,1)
                        left_cell.vertical_alignment = 1  # Top
                        right_cell.vertical_alignment = 1  # Top
                        # Logo on the left
                        logo_path = os.path.join(os.path.dirname(__file__), 'static', 'images', 'logo.jpg')
                        if os.path.exists(logo_path):
                            run_logo = left_cell.paragraphs[0].add_run()
                            if DOCX_AVAILABLE:
                                try:
                                    from docx.shared import Inches
                                    run_logo.add_picture(logo_path, width=Inches(1.2))
                                except ImportError:
                                    pass
                            left_cell.paragraphs[0].alignment = 0  # Left
                        # School info on the right
                        right_paragraph = right_cell.paragraphs[0]
                        right_paragraph.alignment = 1  # Center
                        right_paragraph.add_run('SMALL TREE\n').bold = True
                        right_paragraph.add_run('M·∫¶M NON C√ÇY NH·ªé\n').bold = True
                        right_paragraph.add_run('S·ªë 1, Rchai‚Äô 2, ƒê·ª©c Tr·ªçng, L√¢m ƒê·ªìng\n')
                        right_paragraph.add_run('SDT: 0917618868 / STK: Nguy·ªÖn Th·ªã V√¢n 108875858567 NH VietinBank')
                        # ƒê·∫£m b·∫£o m·ªçi paragraph trong cell ƒë·ªÅu cƒÉn gi·ªØa
                        for para in right_cell.paragraphs:
                            para.alignment = 1
                        doc.add_paragraph('')
                        title = doc.add_heading(f'H√ìA ƒê∆†N THANH TO√ÅN TH√ÅNG {month}', 0)
                        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
                        run = title.runs[0]
                        run.font.size = Pt(18)  # Reduce font size
                        run.font.color.rgb = RGBColor(76, 175, 80)
                        run.font.name = 'Comic Sans MS'
                        
                        # B·∫£ng th√¥ng tin h·ªçc sinh
                        info_table = doc.add_table(rows=2, cols=2)
                        info_table.style = 'Table Grid'
                        for row in info_table.rows:
                            for cell in row.cells:
                                tc = cell._tc
                                tcPr = tc.get_or_add_tcPr()
                                shd = OxmlElement('w:shd')
                                shd.set(qn('w:fill'), 'e8f5e9')
                                tcPr.append(shd)
                        info_table.cell(0,0).text = 'H·ªç v√† t√™n:'
                        info_table.cell(0,1).text = student.name
                        info_table.cell(1,0).text = 'Ng√†y sinh:'
                        info_table.cell(1,1).text = student.birth_date or "-"
                        doc.add_paragraph('')
                        # B·∫£ng t·ªïng k·∫øt
                        days = attendance_days.get(student.id, 0)
                        absents = absent_unexcused_days.get(student.id, 0)
                        age = calculate_age(student.birth_date) if student.birth_date else 0
                        if age == 1:
                            tuition = 1850000
                        elif age == 2:
                            tuition = 1750000
                        elif age == 3:
                            tuition = 1650000
                        elif age == 4:
                            tuition = 1550000
                        else:
                            tuition = 1500000
                        excused_absents = sum(1 for r in records_raw if r.child_id == student.id and r.status == 'V·∫Øng m·∫∑t c√≥ ph√©p')
                        summary_table = doc.add_table(rows=7, cols=2)
                        summary_table.style = 'Table Grid'
                        for row in summary_table.rows:
                            for cell in row.cells:
                                tc = cell._tc
                                tcPr = tc.get_or_add_tcPr()
                                shd = OxmlElement('w:shd')
                                shd.set(qn('w:fill'), 'e8f5e9')
                                tcPr.append(shd)
                        summary_table.cell(0,0).text = 'S·ªë ng√†y ƒëi h·ªçc:'
                        summary_table.cell(0,1).text = str(days)
                        summary_table.cell(1,0).text = 'S·ªë ng√†y v·∫Øng kh√¥ng ph√©p:'
                        summary_table.cell(1,1).text = str(absents)
                        summary_table.cell(2,0).text = 'S·ªë ng√†y v·∫Øng c√≥ ph√©p:'
                        summary_table.cell(2,1).text = str(excused_absents)
                        summary_table.cell(3,0).text = 'Ti·ªÅn ƒÉn:'
                        summary_table.cell(3,1).text = f'{days * 38000:,} ƒë'
                        summary_table.cell(4,0).text = 'Ti·ªÅn h·ªçc ph√≠:'
                        summary_table.cell(4,1).text = f'{tuition:,} ƒë'
                        summary_table.cell(5,0).text = 'Ti·ªÅn h·ªçc anh vƒÉn:'
                        summary_table.cell(5,1).text = '500,000 ƒë'
                        summary_table.cell(6,0).text = 'Ti·ªÅn h·ªçc STEMax:'
                        summary_table.cell(6,1).text = '200,000 ƒë'
                        total = tuition + days * 38000 + absents * 38000 + 500000 + 200000
                        total_paragraph = doc.add_paragraph(f'T·ªïng ti·ªÅn c·∫ßn thanh to√°n: {total:,} ƒë')
                        total_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
                        total_run = total_paragraph.runs[0]
                        total_run.font.color.rgb = RGBColor(76, 175, 80)
                        total_run.font.bold = True
                        total_run.font.name = 'Comic Sans MS'

                        # Add payment info table
                        from datetime import datetime
                        payment_table = doc.add_table(rows=1, cols=2)
                        payment_table.style = None  # No border for clean look
                        left_payment_cell = payment_table.cell(0,0)
                        right_payment_cell = payment_table.cell(0,1)
                        left_payment_cell.vertical_alignment = 1  # Top
                        right_payment_cell.vertical_alignment = 1  # Top
                        left_payment_cell.text = 'Ng∆∞·ªùi n·ªôp ti·ªÅn:'
                        left_payment_cell.add_paragraph('(K√≠ v√† ghi r√µ h·ªç t√™n)')                        
                        now = datetime.now()
                        right_payment_cell.text = ''  # X√≥a n·ªôi dung m·∫∑c ƒë·ªãnh
                        right_payment_cell.add_paragraph(f'Ng√†y ...... th√°ng ...... nƒÉm {now.year}').alignment = 1
                        right_payment_cell.add_paragraph('Ch·ªß Tr∆∞·ªùng').alignment = 1
                        right_payment_cell.add_paragraph('(K√≠ v√† ghi r√µ h·ªç t√™n)').alignment = 1
                        right_payment_cell.add_paragraph().alignment = 1
                        right_payment_cell.add_paragraph().alignment = 1
                        right_payment_cell.add_paragraph('Nguy·ªÖn Th·ªã V√¢n').alignment = 1
                        
                        file_stream = io.BytesIO()
                        doc.save(file_stream)
                        file_stream.seek(0)
                        filename = f"invoice_{student.name}_{month}.docx"
                        zipf.writestr(filename, file_stream.read())
            zip_buffer.seek(0)
            return send_file(zip_buffer, download_name=f"invoices_{month}.zip", as_attachment=True)
        else:
            for student in students:
                if str(student.id) in selected_ids:
                    days_present = attendance_days.get(student.id, 0)
                    days_absent_unexcused = absent_unexcused_days.get(student.id, 0)
                    # H·ªçc ph√≠ theo ƒë·ªô tu·ªïi
                    if student.age == 1:
                        tuition = 1850000
                    elif student.age == 2:
                        tuition = 1750000
                    elif student.age == 3:
                        tuition = 1650000
                    elif student.age == 4:
                        tuition = 1550000
                    else:
                        tuition = 1500000
                    total = (days_present + days_absent_unexcused) * 38000 + tuition
                    invoices.append(f"H·ªçc sinh {student.name}: ({days_present} ng√†y c√≥ m·∫∑t + {days_absent_unexcused} ng√†y v·∫Øng kh√¥ng ph√©p) √ó 38.000ƒë + {tuition:,}ƒë = {total:,}ƒë")
    mobile = is_mobile()
    student_ages = {student.id: calculate_age(student.birth_date) if student.birth_date else 0 for student in students}
    return render_template('invoice.html', students=students, attendance_days=attendance_days, absent_unexcused_days=absent_unexcused_days, selected_month=month, invoices=invoices, days_in_month=days_in_month, records={ (r.child_id, r.date): r for r in records_raw }, student_ages=student_ages, title='Xu·∫•t h√≥a ƒë∆°n', mobile=mobile)

@main.route('/register', methods=['GET'])
def register():
    return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')

@main.route('/register/parent', methods=['POST'])
def register_parent():
    name = request.form.get('parent_name')
    email = request.form.get('parent_email')
    phone = request.form.get('parent_phone')
    child_name = request.form.get('child_name')
    child_age = request.form.get('child_age')
    password = request.form.get('parent_password')
    password_confirm = request.form.get('parent_password_confirm')
    if password != password_confirm:
        flash('M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    # Ki·ªÉm tra tr√πng t√™n ho·∫∑c email v·ªõi Child, Staff, admin
    if (Child.query.filter_by(name=child_name).first() or
        Staff.query.filter_by(name=child_name).first() or
        child_name == 'admin'):
        flash('T√™n h·ªçc sinh ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    if (Child.query.filter_by(email=email).first() or
        Staff.query.filter_by(email=email).first() or
        email == 'admin@smalltree.vn'):
        flash('Email ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    student_code = request.form.get('student_code')
    hashed_pw = generate_password_hash(password)
    new_child = Child(name=child_name, age=child_age, parent_contact=name, email=email, phone=phone, password=hashed_pw, student_code=student_code)
    db.session.add(new_child)
    db.session.commit()
    flash('ƒêƒÉng k√Ω ph·ª• huynh th√†nh c√¥ng!', 'success')
    return redirect(url_for('main.about'))

@main.route('/register/teacher', methods=['POST'])
def register_teacher():
    name = request.form.get('teacher_name')
    email = request.form.get('teacher_email')
    phone = request.form.get('teacher_phone')
    position = request.form.get('teacher_position')
    password = request.form.get('teacher_password')
    password_confirm = request.form.get('teacher_password_confirm')
    if password != password_confirm:
        flash('M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    # Ki·ªÉm tra tr√πng t√™n ho·∫∑c email v·ªõi Child, Staff, admin
    if (Staff.query.filter_by(name=name).first() or
        Child.query.filter_by(name=name).first() or
        name == 'admin'):
        flash('T√™n gi√°o vi√™n ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    if (Staff.query.filter_by(email=email).first() or
        Child.query.filter_by(email=email).first() or
        email == 'admin@smalltree.vn'):
        flash('Email ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
        return render_template('register.html', title='ƒêƒÉng k√Ω t√†i kho·∫£n')
    hashed_pw = generate_password_hash(password)
    new_staff = Staff(name=name, position=position, contact_info=phone, email=email, phone=phone, password=hashed_pw)
    db.session.add(new_staff)
    db.session.commit()
    flash('ƒêƒÉng k√Ω gi√°o vi√™n th√†nh c√¥ng!', 'success')
    return redirect(url_for('main.about'))

@main.route('/login', methods=['GET', 'POST'])
def login():
    user_ip = request.remote_addr
    now = datetime.now()
    # Ki·ªÉm tra lockout do nh·∫≠p sai
    if user_ip in lockout_until and now < lockout_until[user_ip]:
        flash(f'T√†i kho·∫£n ho·∫∑c IP n√†y b·ªã kh√≥a ƒëƒÉng nh·∫≠p t·∫°m th·ªùi. Vui l√≤ng th·ª≠ l·∫°i sau!', 'danger')
        return render_template('login.html', title='ƒêƒÉng nh·∫≠p')
    # Ki·ªÉm tra cooldown sau ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    if user_ip in last_login_time and (now - last_login_time[user_ip]).total_seconds() < LOGIN_COOLDOWN_SECONDS:
        wait_time = LOGIN_COOLDOWN_SECONDS - int((now - last_login_time[user_ip]).total_seconds())
        flash(f'B·∫°n v·ª´a ƒëƒÉng nh·∫≠p th√†nh c√¥ng. Vui l√≤ng ch·ªù {wait_time} gi√¢y tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p l·∫°i!', 'warning')
        return render_template('login.html', title='ƒêƒÉng nh·∫≠p')
    if request.method == 'POST':
        email_or_phone = request.form.get('email')
        password = request.form.get('password')
        # Ki·ªÉm tra admin
        admin = Staff.query.filter_by(position='admin').first()
        if admin and (email_or_phone == admin.email or email_or_phone == admin.phone) and check_password_hash(admin.password, password):
            session['user_id'] = admin.id
            session['role'] = 'admin'
            flash('ƒêƒÉng nh·∫≠p admin th√†nh c√¥ng!', 'success')
            login_attempts[user_ip] = 0
            last_login_time[user_ip] = now
            return redirect(url_for('main.about'))
        user = Child.query.filter(((Child.email==email_or_phone)|(Child.phone==email_or_phone))).first()
        staff = Staff.query.filter(((Staff.email==email_or_phone)|(Staff.phone==email_or_phone))).first()
        if user and check_password_hash(user.password, password):
            session['user_id'] = user.id
            session['role'] = 'parent'
            flash('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', 'success')
            login_attempts[user_ip] = 0
            last_login_time[user_ip] = now
            return redirect(url_for('main.about'))
        elif staff and check_password_hash(staff.password, password):
            session['user_id'] = staff.id
            session['role'] = 'teacher'
            flash('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', 'success')
            login_attempts[user_ip] = 0
            last_login_time[user_ip] = now
            return redirect(url_for('main.about'))
        else:
            login_attempts[user_ip] = login_attempts.get(user_ip, 0) + 1
            if login_attempts[user_ip] >= MAX_LOGIN_ATTEMPTS:
                lockout_until[user_ip] = now + timedelta(minutes=LOCKOUT_TIME_MINUTES)
                flash(f'B·∫°n ƒë√£ nh·∫≠p sai qu√° s·ªë l·∫ßn cho ph√©p. ƒêƒÉng nh·∫≠p b·ªã kh√≥a {LOCKOUT_TIME_MINUTES} ph√∫t!', 'danger')
            else:
                flash('Sai th√¥ng tin ƒëƒÉng nh·∫≠p!', 'danger')
            return render_template('login.html', title='ƒêƒÉng nh·∫≠p')
    return render_template('login.html', title='ƒêƒÉng nh·∫≠p')

@main.route('/logout')
def logout():
    session.clear()
    flash('ƒê√£ ƒëƒÉng xu·∫•t!', 'success')
    return redirect(url_for('main.about'))

@main.route('/create-test-account')
def create_test_account():
    """Create test account for debugging purposes"""
    # Check if gv1@gmail.com already exists
    existing_staff = Staff.query.filter_by(email='gv1@gmail.com').first()
    
    if existing_staff:
        return jsonify({
            'status': 'exists',
            'message': f'Account gv1@gmail.com already exists with position: {existing_staff.position}',
            'staff_id': existing_staff.id
        })
    
    # Create new staff account
    hashed_password = generate_password_hash('123456')
    
    new_staff = Staff(
        name='Gi√°o vi√™n 1',
        position='teacher',
        contact_info='gv1@gmail.com',
        email='gv1@gmail.com', 
        phone='0123456789',
        password=hashed_password
    )
    
    db.session.add(new_staff)
    db.session.commit()
    
    return jsonify({
        'status': 'created',
        'message': 'Test account created successfully',
        'email': 'gv1@gmail.com',
        'password': '123456',
        'position': 'teacher',
        'staff_id': new_staff.id
    })

@main.route('/accounts', methods=['GET', 'POST'])
def accounts():
    # Ch·ªâ cho ph√©p ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n administrator duy nh·∫•t
    ADMIN_USERNAME = 'admin'
    ADMIN_PASSWORD = 'admin123'
    if session.get('role') != 'admin':
        if request.method == 'POST':
            username = request.form.get('username')
            password = request.form.get('password')
            if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
                session['user_id'] = 'admin'
                session['role'] = 'admin'
                flash('ƒêƒÉng nh·∫≠p administrator th√†nh c√¥ng!', 'success')
                parents = Child.query.all()
                teachers = Staff.query.all()
                mobile = is_mobile()
                return render_template('accounts.html', parents=parents, teachers=teachers, show_modal=False, title='Qu·∫£n l√Ω t√†i kho·∫£n', mobile=mobile)
            else:
                flash('Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u administrator!', 'danger')
                return render_template('accounts.html', show_modal=True, title='Qu·∫£n l√Ω t√†i kho·∫£n')
        return render_template('accounts.html', show_modal=True, title='Qu·∫£n l√Ω t√†i kho·∫£n')
    parents = Child.query.all()
    teachers = Staff.query.all()
    mobile = is_mobile()
    # Hide sensitive info for non-admins
    show_sensitive = session.get('role') == 'admin'
    def mask_user(u):
        return {
            'id': u.id,
            'name': u.name,
            'email': u.email if show_sensitive else '·∫®n',
            'phone': u.phone if show_sensitive else '·∫®n',
            'student_code': getattr(u, 'student_code', None) if show_sensitive else '·∫®n',
            'class_name': getattr(u, 'class_name', None) if show_sensitive else '·∫®n',
            'parent_contact': getattr(u, 'parent_contact', None) if show_sensitive else '·∫®n',
            'position': getattr(u, 'position', None) if show_sensitive else '·∫®n',
        }
    masked_parents = [mask_user(p) for p in parents]
    masked_teachers = [mask_user(t) for t in teachers]
    return render_template('accounts.html', parents=masked_parents, teachers=masked_teachers, show_modal=False, title='Qu·∫£n l√Ω t√†i kho·∫£n', mobile=mobile)

@main.route('/curriculum/<int:week_number>/delete', methods=['POST'])
def delete_curriculum(week_number):
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if week:
        db.session.delete(week)
        db.session.commit()
        flash(f'ƒê√£ xo√° ch∆∞∆°ng tr√¨nh h·ªçc tu·∫ßn {week_number}!', 'success')
    else:
        flash('Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng tr√¨nh h·ªçc ƒë·ªÉ xo√°!', 'danger')
    return redirect(url_for('main.curriculum'))

@main.route('/curriculum/<int:week_number>/edit', methods=['GET', 'POST'])
def edit_curriculum(week_number):
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if not week:
        flash('Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng tr√¨nh h·ªçc ƒë·ªÉ ch·ªânh s·ª≠a!', 'danger')
        return redirect(url_for('main.curriculum'))
    import json
    if request.method == 'POST':
        days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
        morning_slots = ['morning_1', 'morning_2', 'morning_3', 'morning_4', 'morning_5', 'morning_6', 'morning_7']
        afternoon_slots = ['afternoon_1', 'afternoon_2', 'afternoon_3', 'afternoon_4']
        curriculum_data = {}
        for day in days:
            curriculum_data[day] = {}
            for slot in morning_slots:
                curriculum_data[day][slot] = request.form.get(f'{day}_{slot}')
            for slot in afternoon_slots:
                curriculum_data[day][slot] = request.form.get(f'{day}_{slot}')
        week.content = json.dumps(curriculum_data, ensure_ascii=False)
        db.session.commit()
        flash(f'ƒê√£ c·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh h·ªçc tu·∫ßn {week_number}!', 'success')
        return redirect(url_for('main.curriculum'))
    data = json.loads(week.content)
    mobile = is_mobile()
    return render_template('edit_curriculum.html', week=week, data=data, title=f'Ch·ªânh s·ª≠a ch∆∞∆°ng tr√¨nh tu·∫ßn {week_number}', mobile=mobile)

@main.route('/profile')
def profile():
    user = None
    role = session.get('role')
    user_id = session.get('user_id')
    if role == 'parent':
        user = Child.query.get(user_id)
        role_display = 'Ph·ª• huynh'
        full_name = user.parent_contact if user else ''
        info = {
            'full_name': full_name,
            'email': user.email if user else '',
            'phone': user.phone if user else '',
            'role_display': role_display,
            'student_code': user.student_code if user else '',
            'class_name': user.class_name if user else '',
            'birth_date': user.birth_date if user else '',
            'parent_contact': user.parent_contact if user else '',
        }
    elif role == 'teacher' or role == 'admin':
        # Gi√°o vi√™n v√† admin xem ƒë∆∞·ª£c t·∫•t c·∫£ th√¥ng tin c·ªßa b·∫£n th√¢n
        user = Staff.query.get(user_id) if role == 'teacher' else None
        role_display = 'Gi√°o vi√™n' if role == 'teacher' else 'Admin'
        full_name = user.name if user else 'Admin'
        info = {
            'full_name': full_name,
            'email': user.email if user else '',
            'phone': user.phone if user else '',
            'role_display': role_display,
            'student_code': '',
            'class_name': getattr(user, 'position', '') if user else '',
            'birth_date': '',
            'parent_contact': '',
        }
    else:
        flash('Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n!', 'danger')
        return redirect(url_for('main.about'))
    mobile = is_mobile()
    return render_template('profile.html', user=info, mobile=mobile)

@main.route('/profile/edit', methods=['GET', 'POST'])
def edit_profile():
    role = session.get('role')
    user_id = session.get('user_id')
    if role == 'parent':
        flash('Ph·ª• huynh kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a th√¥ng tin!', 'danger')
        return redirect(url_for('main.profile'))
    elif role == 'teacher':
        user = Staff.query.get(user_id)
        full_name = user.name
    else:
        flash('Admin kh√¥ng th·ªÉ ch·ªânh s·ª≠a th√¥ng tin!', 'danger')
        return redirect(url_for('main.profile'))
    if not user:
        flash('Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n!', 'danger')
        return redirect(url_for('main.profile'))
    form = EditProfileForm(full_name=full_name, email=user.email, phone=user.phone)
    if form.validate_on_submit():
        user.name = form.full_name.data
        user.email = form.email.data
        user.phone = form.phone.data
        if form.password.data:
            if not form.old_password.data:
                flash('Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈© ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u!', 'danger')
                return render_template('edit_profile.html', form=form)
            if user.password != form.old_password.data:
                flash('M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!', 'danger')
                return render_template('edit_profile.html', form=form)
            user.password = form.password.data
        db.session.commit()
        flash('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.profile'))
    mobile = is_mobile()
    return render_template('edit_profile.html', form=form, mobile=mobile)

@main.route('/students')
def student_list():
    students = Child.query.all()
    mobile = is_mobile()
    role = session.get('role')
    user_id = session.get('user_id')
    def mask_student(s):
        if role == 'parent':
            # Ph·ª• huynh ch·ªâ xem ƒë∆∞·ª£c th√¥ng tin con m√¨nh
            if s.id != user_id:
                return None
            return {
                'id': s.id,
                'name': s.name,
                'email': s.email,
                'phone': s.phone,
                'student_code': s.student_code,
                'class_name': s.class_name,
                'parent_contact': s.parent_contact,
            }
        # Gi√°o vi√™n v√† admin xem ƒë∆∞·ª£c t·∫•t c·∫£ th√¥ng tin
        return {
            'id': s.id,
            'name': s.name,
            'email': s.email,
            'phone': s.phone,
            'student_code': s.student_code,
            'class_name': s.class_name,
            'parent_contact': s.parent_contact,
        }
    masked_students = [m for m in (mask_student(s) for s in students) if m]
    return render_template('student_list.html', students=masked_students, title='Danh s√°ch h·ªçc sinh', mobile=mobile)

@main.route('/students/<int:student_id>/edit', methods=['GET', 'POST'])
def edit_student(student_id):
    if session.get('role') != 'admin' and session.get('role') != 'teacher':
        return redirect_no_permission()
    student = Child.query.get_or_404(student_id)
    if request.method == 'POST':
        class_name = request.form.get('class_name')
        if class_name not in ['Kay 01', 'Kay 02']:
            flash('L·ªõp kh√¥ng h·ª£p l·ªá!', 'danger')
            return redirect(url_for('main.edit_student', student_id=student_id))
        student.name = request.form.get('name')
        student.student_code = request.form.get('student_code')
        student.class_name = class_name
        student.birth_date = request.form.get('birth_date')
        student.parent_contact = request.form.get('parent_contact')
        db.session.commit()
        flash('ƒê√£ l∆∞u thay ƒë·ªïi!', 'success')
        return redirect(url_for('main.student_list'))
    mobile = is_mobile()
    return render_template('edit_student.html', student=student, title='Ch·ªânh s·ª≠a h·ªçc sinh', mobile=mobile)

@main.route('/students/<int:student_id>/delete', methods=['POST'])
def delete_student(student_id):
    if session.get('role') != 'admin' and session.get('role') != 'teacher':
        return redirect_no_permission()
    student = Child.query.get_or_404(student_id)
    db.session.delete(student)
    db.session.commit()
    flash('ƒê√£ xo√° h·ªçc sinh!', 'success')
    return redirect(url_for('main.student_list'))

@main.route('/admin/change-password', methods=['GET', 'POST'])
def change_admin_password():
    if session.get('role') != 'admin':
        flash('B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªïi m·∫≠t kh·∫©u admin!', 'danger')
        return redirect(url_for('main.login'))
    admin = Staff.query.filter_by(name='admin').first()
    if not admin:
        flash('Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n admin!', 'danger')
        return redirect(url_for('main.accounts'))
    if request.method == 'POST':
        old_password = request.form.get('old_password')
        new_password = request.form.get('new_password')
        confirm_password = request.form.get('confirm_password')
        if old_password != admin.password:
            flash('M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng!', 'danger')
        elif new_password != confirm_password:
            flash('M·∫≠t kh·∫©u m·ªõi nh·∫≠p l·∫°i kh√¥ng kh·ªõp!', 'danger')
        else:
            admin.password = generate_password_hash(new_password)
            db.session.commit()
            flash('ƒê·ªïi m·∫≠t kh·∫©u admin th√†nh c√¥ng!', 'success')
            return redirect(url_for('main.accounts'))
    return render_template('change_admin_password.html', title='ƒê·ªïi m·∫≠t kh·∫©u Admin')

@main.route('/activities')
def activities():
    posts = Activity.query.order_by(Activity.date.desc()).all()
    activities = [
        {
            'id': post.id,
            'title': post.title,
            'content': post.description,
            'image': post.image,
            'date_posted': post.date.strftime('%Y-%m-%d'),
            'images': post.images  # Truy·ªÅn danh s√°ch ·∫£nh gallery
        } for post in posts
    ]
    mobile = is_mobile()
    from app.forms import DeleteActivityForm
    form = DeleteActivityForm()
    return render_template('activities.html', activities=activities, title='Ho·∫°t ƒë·ªông', mobile=mobile, form=form)

@main.route('/accounts/create', methods=['GET', 'POST'])
def create_account():
    if session.get('role') != 'admin':
        return redirect_no_permission()
    if request.method == 'POST':
        role = request.form.get('role')
        name = request.form.get('name')
        email = request.form.get('email')
        phone = request.form.get('phone')
        password = request.form.get('password')
        if role == 'admin':
            flash('Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n admin qua form n√†y!', 'danger')
            return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
        # Ki·ªÉm tra tr√πng t√™n/email
        if not name or not email or not phone or not password:
            flash('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!', 'danger')
            return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
        if (Child.query.filter_by(name=name).first() or Staff.query.filter_by(name=name).first() or name == 'admin'):
            flash('T√™n ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
            return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
        if (Child.query.filter_by(email=email).first() or Staff.query.filter_by(email=email).first() or email == 'admin@smalltree.vn'):
            flash('Email ƒë√£ t·ªìn t·∫°i ho·∫∑c tr√πng v·ªõi t√†i kho·∫£n kh√°c!', 'danger')
            return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
        if role == 'parent':
            student_code = request.form.get('student_code')
            class_name = request.form.get('class_name')
            birth_date = request.form.get('birth_date')
            parent_contact = request.form.get('parent_contact')
            if not student_code or not class_name or not birth_date or not parent_contact:
                flash('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin h·ªçc sinh/ph·ª• huynh!', 'danger')
                return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
            new_child = Child(name=name, age=0, parent_contact=parent_contact, class_name=class_name, birth_date=birth_date, email=email, phone=phone, password=generate_password_hash(password), student_code=student_code)
            db.session.add(new_child)
        elif role == 'teacher':
            position = request.form.get('position')
            if not position:
                flash('Vui l√≤ng nh·∫≠p ch·ª©c v·ª• gi√°o vi√™n!', 'danger')
                return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')
            new_staff = Staff(name=name, position=position, contact_info=phone, email=email, phone=phone, password=generate_password_hash(password))
            db.session.add(new_staff)
        db.session.commit()
        flash('T·∫°o t√†i kho·∫£n th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.accounts'))
    return render_template('create_account.html', title='T·∫°o t√†i kho·∫£n m·ªõi')

@main.route('/accounts/<int:user_id>/edit', methods=['GET', 'POST'])
def edit_account(user_id):
    if session.get('role') != 'admin':
        return redirect_no_permission()
    user_type = request.args.get('type', 'parent')
    if user_type == 'teacher':
        user = Staff.query.get_or_404(user_id)
    else:
        user = Child.query.get_or_404(user_id)
    if request.method == 'POST':
        user.name = request.form.get('name')
        user.email = request.form.get('email')
        user.phone = request.form.get('phone')
        if user_type == 'parent':
            user.parent_contact = request.form.get('parent_contact')
            user.student_code = request.form.get('student_code')
            user.class_name = request.form.get('class_name')
            user.birth_date = request.form.get('birth_date')
        elif user_type == 'teacher':
            user.position = request.form.get('position')
        password = request.form.get('password')
        if password:
            user.password = generate_password_hash(password)
        db.session.commit()
        flash('ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n!', 'success')
        return redirect(url_for('main.accounts'))
    # Hide sensitive info for non-admins (should only be admin here, but for safety)
    show_sensitive = session.get('role') == 'admin'
    masked_user = {
        'id': user.id,
        'name': user.name,
        'email': user.email if show_sensitive else '·∫®n',
        'phone': user.phone if show_sensitive else '·∫®n',
        'student_code': getattr(user, 'student_code', None) if show_sensitive else '·∫®n',
        'class_name': getattr(user, 'class_name', None) if show_sensitive else '·∫®n',
        'parent_contact': getattr(user, 'parent_contact', None) if show_sensitive else '·∫®n',
        'position': getattr(user, 'position', None) if show_sensitive else '·∫®n',
    }
    return render_template('edit_account.html', user=masked_user, type=user_type, title='Ch·ªânh s·ª≠a t√†i kho·∫£n')

@main.route('/accounts/parent/<int:user_id>/delete', methods=['POST'])
def delete_parent_account(user_id):
    if session.get('role') != 'admin':
        return redirect_no_permission()
    user = Child.query.get_or_404(user_id)
    db.session.delete(user)
    db.session.commit()
    flash('ƒê√£ xo√° t√†i kho·∫£n ph·ª• huynh!', 'success')
    return redirect(url_for('main.accounts'))

@main.route('/accounts/teacher/<int:user_id>/delete', methods=['POST'])
def delete_teacher_account(user_id):
    if session.get('role') != 'admin':
        return redirect_no_permission()
    user = Staff.query.get_or_404(user_id)
    db.session.delete(user)
    db.session.commit()
    flash('ƒê√£ xo√° t√†i kho·∫£n gi√°o vi√™n!', 'success')
    return redirect(url_for('main.accounts'))

@main.route('/activities/<int:id>/edit', methods=['GET', 'POST'])
def edit_activity(id):
    try:
        if session.get('role') not in ['admin', 'teacher']:
            return redirect_no_permission()
        post = Activity.query.get_or_404(id)
        if not post:
            flash('Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ ch·ªânh s·ª≠a!', 'danger')
            return redirect(url_for('main.activities'))
        from app.forms import ActivityEditForm
        form = ActivityEditForm()
        if request.method == 'POST':
            print('---[DEBUG] POST DATA---')
            print('form.title:', form.title.data)
            print('form.description:', form.description.data)
            print('form.background:', form.background.data)
            print('request.files:', request.files)
            print('request.files.getlist("images"):', request.files.getlist('images'))
            print('form.validate_on_submit:', form.validate_on_submit())
        if request.method == 'POST' and form.validate_on_submit():
            post.title = form.title.data
            post.description = form.description.data
            background_file = form.background.data
            image_url = post.image
            if background_file and getattr(background_file, 'filename', None):
                allowed_ext = {'.jpg', '.jpeg', '.png', '.gif', '.jfif'}
                ext = os.path.splitext(background_file.filename)[1].lower()
                safe_filename = re.sub(r'[^a-zA-Z0-9_.-]', '', background_file.filename)
                if ext not in allowed_ext:
                    flash('Ch·ªâ cho ph√©p t·∫£i l√™n c√°c file ·∫£nh c√≥ ƒëu√¥i: .jpg, .jpeg, .png, .gif, .jfif!', 'danger')
                    return render_template('edit_activity.html', post=post, form=form, title='Ch·ªânh s·ª≠a ho·∫°t ƒë·ªông', mobile=is_mobile())
                filename = 'bg_' + datetime.now().strftime('%Y%m%d%H%M%S') + '_' + safe_filename
                save_path = os.path.join('app', 'static', 'images', filename)
                img = Image.open(background_file)
                img.thumbnail((1200, 800))
                img.save(save_path)
                image_url = url_for('static', filename=f'images/{filename}')
                post.image = image_url
            files = request.files.getlist('images')
            activity_dir = os.path.join('app', 'static', 'images', 'activities', str(post.id))
            os.makedirs(activity_dir, exist_ok=True)
            for file in files:
                if file and getattr(file, 'filename', None):
                    ext = os.path.splitext(file.filename)[1].lower()
                    if ext not in ['.jpg', '.jpeg', '.png', '.gif', '.jfif']:
                        flash(f"File {file.filename} kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng ·∫£nh!", 'danger')
                        continue
                    safe_filename = re.sub(r'[^a-zA-Z0-9_.-]', '', file.filename)
                    img_filename = datetime.now().strftime('%Y%m%d%H%M%S%f') + '_' + safe_filename
                    img_path = os.path.join(activity_dir, img_filename)
                    try:
                        file.stream.seek(0)
                        img = Image.open(file.stream)
                        img.thumbnail((1200, 800))
                        img.save(img_path)
                        rel_path = os.path.join('images', 'activities', str(post.id), img_filename).replace('\\', '/')
                        db.session.add(ActivityImage(filename=img_filename, filepath=rel_path, upload_date=datetime.now(), activity_id=post.id))
                    except Exception as e:
                        print(f"[ERROR] L·ªói upload ·∫£nh: {getattr(file, 'filename', 'unknown')} - {e}")
                        import traceback
                        traceback.print_exc()
                        flash(f"L·ªói upload ·∫£nh: {getattr(file, 'filename', 'unknown')} - {e}", 'danger')
                        continue
            db.session.commit()
            flash('ƒê√£ c·∫≠p nh·∫≠t b√†i vi·∫øt!', 'success')
            return redirect(url_for('main.activities'))
        mobile = is_mobile()
        # G√°n d·ªØ li·ªáu m·∫∑c ƒë·ªãnh cho form khi GET
        if request.method == 'GET':
            form.title.data = post.title
            form.description.data = post.description
        return render_template('edit_activity.html', post=post, form=form, title='Ch·ªânh s·ª≠a ho·∫°t ƒë·ªông', mobile=mobile)
    except Exception as e:
        print(f"[ERROR] L·ªói khi render edit_activity: {e}")
        import traceback
        traceback.print_exc()
        flash(f"L·ªói h·ªá th·ªëng khi ch·ªânh s·ª≠a ho·∫°t ƒë·ªông: {e}", 'danger')
        return redirect(url_for('main.activities'))

@main.route('/bmi-index', methods=['GET', 'POST'])
def bmi_index():
    students = Child.query.all()
    bmi = None
    bmi_id = None

    if request.method == 'POST':
        student_id = int(request.form['student_id'])
        weight = float(request.form['weight'])
        height = float(request.form['height']) / 100  # ƒë·ªïi cm sang m
        bmi = round(weight / (height * height), 2)
        bmi_id = student_id
        record_date = request.form.get('date', date.today().isoformat())
        # Fix: round height to 2 decimals before saving
        rounded_height_cm = round(height * 100, 2)
        new_record = BmiRecord(
            student_id=student_id,
            date=date.fromisoformat(record_date),
            weight=weight,
            height=rounded_height_cm,  # l∆∞u l·∫°i ƒë∆°n v·ªã cm, ƒë√£ l√†m tr√≤n
            bmi=bmi
        )
        db.session.add(new_record)
        db.session.commit()

    bmi_history = {}
    for student in students:
        records = BmiRecord.query.filter_by(student_id=student.id).order_by(BmiRecord.date.desc(), BmiRecord.id.desc()).all()
        filtered = {}
        for record in records:
            date_str = record.date.strftime('%Y-%m-%d')
            if date_str not in filtered:
                filtered[date_str] = record
        bmi_history[student.id] = list(filtered.values())

    current_date_iso = date.today().isoformat()
    return render_template(
        'bmi_index.html',
        title='Ch·ªâ S·ªë BMI',
        students=students,
        bmi=bmi,
        bmi_id=bmi_id,
        bmi_history=bmi_history,
        current_date_iso=current_date_iso,
        mobile=False
    )

@main.route('/bmi-record/<int:record_id>/edit', methods=['POST'])
def edit_bmi_record(record_id):
    record = BmiRecord.query.get_or_404(record_id)
    date_str = request.form.get('date')
    weight = request.form.get('weight')
    height = request.form.get('height')
    if date_str and weight and height:
        record.date = date.fromisoformat(date_str)
        record.weight = float(weight)
        record.height = request.form.get('height')
        record.bmi = round(float(weight) / ((float(height)/100) ** 2), 2)
        db.session.commit()
        flash('ƒê√£ c·∫≠p nh·∫≠t ch·ªâ s·ªë BMI!', 'success')
    else:
        flash('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!', 'danger')
    return redirect(url_for('main.bmi_index', edit_id=None))

@main.route('/bmi-record/<int:record_id>/delete', methods=['POST'])
def delete_bmi_record(record_id):
    record = BmiRecord.query.get_or_404(record_id)
    db.session.delete(record)
    db.session.commit()
    flash('ƒê√£ xo√° ch·ªâ s·ªë BMI!', 'success')
    return redirect(url_for('main.bmi_index', edit_id=None))

@main.route('/menu')
def menu():
    weeks = Curriculum.query.order_by(Curriculum.week_number).all()
    menu = []
    for week in weeks:
        try:
            data = json.loads(week.content) if week.content else {}
            # Ensure all days and slots exist
            days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
            slots = ['morning', 'snack', 'dessert', 'lunch', 'afternoon', 'lateafternoon']
            for day in days:
                if day not in data:
                    data[day] = {}
                for slot in slots:
                    if slot not in data[day]:
                        data[day][slot] = ''
        except Exception as e:
            print(f"Error parsing JSON for week {week.week_number}: {e}")
            data = {}
            # Initialize empty structure
            days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
            slots = ['morning', 'snack', 'dessert', 'lunch', 'afternoon', 'lateafternoon']
            for day in days:
                data[day] = {}
                for slot in slots:
                    data[day][slot] = ''
        menu.append({
            'week_number': week.week_number,
            'data': data
        })
    mobile = is_mobile()
    return render_template('menu.html', menu=menu, title='Th·ª±c ƒë∆°n', mobile=mobile)

@main.route('/menu/new', methods=['GET', 'POST'])
def new_menu():
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    if request.method == 'POST':
        week_number = request.form.get('week_number')
        days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
        slots = ['morning', 'snack', 'dessert', 'lunch', 'afternoon', 'lateafternoon']
        menu_data = {}
        for day in days:
            menu_data[day] = {}
            for slot in slots:
                menu_data[day][slot] = request.form.get(f'content_{day}_{slot}')
        content = json.dumps(menu_data, ensure_ascii=False)
        new_week = Curriculum(week_number=week_number, content=content, material=None)
        db.session.add(new_week)
        db.session.commit()
        flash('ƒê√£ th√™m th·ª±c ƒë∆°n m·ªõi!', 'success')
        return redirect(url_for('main.menu'))
    mobile = is_mobile()
    return render_template('new_menu.html', title='T·∫°o th·ª±c ƒë∆°n m·ªõi', mobile=mobile)

@main.route('/menu/<int:week_number>/edit', methods=['GET', 'POST'])
def edit_menu(week_number):
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if not week:
        flash('Kh√¥ng t√¨m th·∫•y th·ª±c ƒë∆°n ƒë·ªÉ ch·ªânh s·ª≠a!', 'danger')
        return redirect(url_for('main.menu'))
    import json
    if request.method == 'POST':
        days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
        slots = ['morning', 'snack', 'dessert', 'lunch', 'afternoon', 'lateafternoon']
        menu_data = {}
        for day in days:
            menu_data[day] = {}
            for slot in slots:
                menu_data[day][slot] = request.form.get(f'content_{day}_{slot}')
        week.content = json.dumps(menu_data, ensure_ascii=False)
        db.session.commit()
        flash(f'ƒê√£ c·∫≠p nh·∫≠t th·ª±c ƒë∆°n tu·∫ßn {week_number}!', 'success')
        return redirect(url_for('main.menu'))
    data = json.loads(week.content)
    mobile = is_mobile()
    return render_template('edit_menu.html', week=week, data=data, title=f'Ch·ªânh s·ª≠a th·ª±c ƒë∆°n tu·∫ßn {week_number}', mobile=mobile)

@main.route('/menu/<int:week_number>/delete', methods=['POST'])
def delete_menu(week_number):
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if week:
        db.session.delete(week)
        db.session.commit()
        flash(f'ƒê√£ xo√° th·ª±c ƒë∆°n tu·∫ßn {week_number}!', 'success')
    else:
        flash('Kh√¥ng t√¨m th·∫•y th·ª±c ƒë∆°n ƒë·ªÉ xo√°!', 'danger')
    return redirect(url_for('main.menu'))

@main.route('/menu/import', methods=['POST'])
def import_menu():
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    file = request.files.get('excel_file')
    week_number = request.form.get('week_number')
    if not file:
        flash('Vui l√≤ng ch·ªçn file Excel!', 'danger')
        return redirect(url_for('main.menu'))
    if not week_number:
        flash('Vui l√≤ng nh·∫≠p s·ªë tu·∫ßn!', 'danger')
        return redirect(url_for('main.menu'))

    from openpyxl import load_workbook
    wb = load_workbook(file)
    ws = wb.active

    # ƒê·ªçc d·ªØ li·ªáu t·ª´ d√≤ng 3 ƒë·∫øn 8, c·ªôt B-G (theo m·∫´u: A1:A2 "Th·ª©", B1:G1 "Khung gi·ªù", B2-G2 slot, A3-A8 th·ª©)
    days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
    slots = ['morning', 'snack', 'dessert', 'lunch', 'afternoon', 'lateafternoon']
    menu_data = {}
    for i, day in enumerate(days):
        row = i + 3  # D√≤ng 3-8
        menu_data[day] = {}
        for j, slot in enumerate(slots):
            col = j + 2  # B=2, C=3, ... G=7
            value = ws.cell(row=row, column=col).value
            menu_data[day][slot] = value if value is not None else ""
    import json
    content = json.dumps(menu_data, ensure_ascii=False)
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if week:
        week.content = content
    else:
        new_week = Curriculum(week_number=week_number, content=content, material=None)
        db.session.add(new_week)
    db.session.commit()
    flash('ƒê√£ import th·ª±c ƒë∆°n t·ª´ Excel!', 'success')
    return redirect(url_for('main.menu'))

@main.route('/curriculum/import', methods=['POST'])
def import_curriculum():
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    file = request.files.get('excel_file')
    week_number = request.form.get('week_number')
    if not file:
        flash('Vui l√≤ng ch·ªçn file Excel!', 'danger')
        return redirect(url_for('main.curriculum'))
    if not week_number:
        flash('Vui l√≤ng nh·∫≠p s·ªë tu·∫ßn!', 'danger')
        return redirect(url_for('main.curriculum'))

    from openpyxl import load_workbook
    wb = load_workbook(file)
    ws = wb.active

    # ƒê·ªçc d·ªØ li·ªáu theo m·∫´u m·ªõi:
    days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
    morning_slots = ['morning_1', 'morning_2', 'morning_3', 'morning_4', 'morning_5', 'morning_6']
    afternoon_slots = ['afternoon_1', 'afternoon_2', 'afternoon_3', 'afternoon_4']
    curriculum_data = {}

    # S√°ng: d√≤ng 4-9 (A4-A9)
    for col_idx, day in enumerate(days):
        curriculum_data[day] = {}
        for slot_idx, slot in enumerate(morning_slots):
            row = 4 + slot_idx  # d√≤ng 4-9
            col = 2 + col_idx   # B=2, C=3, ... G=7
            value = ws.cell(row=row, column=col).value
            curriculum_data[day][slot] = value if value is not None else ""
        # Chi·ªÅu: d√≤ng 11-14 (A11-A14)
        for slot_idx, slot in enumerate(afternoon_slots):
            row = 11 + slot_idx  # d√≤ng 11-14
            col = 2 + col_idx
            value = ws.cell(row=row, column=col).value
            curriculum_data[day][slot] = value if value is not None else ""
    import json
    content = json.dumps(curriculum_data, ensure_ascii=False)
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if week:
        week.content = content
    else:
        new_week = Curriculum(week_number=week_number, content=content, material=None)
        db.session.add(new_week)
    db.session.commit()
    flash('ƒê√£ import ch∆∞∆°ng tr√¨nh h·ªçc t·ª´ Excel!', 'success')
    return redirect(url_for('main.curriculum'))

@main.route('/curriculum/export', methods=['GET'])
def export_curriculum_template():
    """Export file Excel m·∫´u ch∆∞∆°ng tr√¨nh h·ªçc v·ªõi ƒë·ªãnh d·∫°ng n√¢ng cao (merged cells, header, khung gi·ªù, ...)."""
    from openpyxl import Workbook
    from openpyxl.styles import Alignment, Font, Border, Side, PatternFill
    from io import BytesIO

    wb = Workbook()
    ws = wb.active
    ws.title = "Curriculum Template"

    # ƒê·ªãnh nghƒ©a style
    bold = Font(bold=True)
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)
    border = Border(
        left=Side(style='thin'), right=Side(style='thin'),
        top=Side(style='thin'), bottom=Side(style='thin')
    )
    fill = PatternFill(start_color="C8E6C9", end_color="C8E6C9", fill_type="solid")

    # Header
    ws.merge_cells('A1:A2')
    ws['A1'] = "Khung gi·ªù"
    ws['A1'].font = bold
    ws['A1'].alignment = center
    ws['A1'].fill = fill
    ws['A1'].border = border
    ws.merge_cells('B1:G1')
    ws['B1'] = "Th·ª©"
    ws['B1'].font = bold
    ws['B1'].alignment = center
    ws['B1'].fill = fill
    ws['B1'].border = border
    days = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7"]
    for i, day in enumerate(days):
        cell = ws.cell(row=2, column=2+i, value=day)
        cell.font = bold
        cell.alignment = center
        cell.fill = fill
        cell.border = border

    # Section: Bu·ªïi s√°ng
    ws.merge_cells('A3:G3')
    ws['A3'] = "Bu·ªïi s√°ng"
    ws['A3'].font = bold
    ws['A3'].alignment = center
    ws['A3'].fill = fill
    ws['A3'].border = border

    morning_slots = [
        ("7-8h", 4), ("8h-8h30", 5), ("8h30-9h", 6), ("9h-9h40", 7), ("9h40-10h30", 8), ("10h30-14h", 9)
    ]
    for label, row in morning_slots:
        ws.cell(row=row, column=1, value=label).font = bold
        ws.cell(row=row, column=1).alignment = center
        ws.cell(row=row, column=1).border = border
        for col in range(2, 8):
            ws.cell(row=row, column=col).border = border

    # Section: Bu·ªïi chi·ªÅu
    ws.merge_cells('A10:G10')
    ws['A10'] = "Bu·ªïi chi·ªÅu"
    ws['A10'].font = bold
    ws['A10'].alignment = center
    ws['A10'].fill = fill
    ws['A10'].border = border

    afternoon_slots = [
        ("14h15-15h", 11), ("15h-15h30", 12), ("15h45-16h", 13), ("16h-17h", 14)
    ]
    for label, row in afternoon_slots:
        ws.cell(row=row, column=1, value=label).font = bold
        ws.cell(row=row, column=1).alignment = center
        ws.cell(row=row, column=1).border = border
        for col in range(2, 8):
            ws.cell(row=row, column=col).border = border

    # Set column widths
    ws.column_dimensions['A'].width = 16
    for col in ['B','C','D','E','F','G']:
        ws.column_dimensions[col].width = 18

    # Save to BytesIO
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return send_file(output, download_name="curriculum_template.xlsx", as_attachment=True)

@main.route('/menu/export', methods=['GET'])
def export_menu_template():
    """Export file Excel m·∫´u th·ª±c ƒë∆°n v·ªõi ƒë·ªãnh d·∫°ng n√¢ng cao (merged cells, header, khung gi·ªù, ...)."""
    from openpyxl import Workbook
    from openpyxl.styles import Alignment, Font, Border, Side, PatternFill
    from io import BytesIO

    wb = Workbook()
    ws = wb.active
    ws.title = "Menu Template"

    # ƒê·ªãnh nghƒ©a style
    bold = Font(bold=True)
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)
    border = Border(
        left=Side(style='thin'), right=Side(style='thin'),
        top=Side(style='thin'), bottom=Side(style='thin')
    )
    fill = PatternFill(start_color="C8E6C9", end_color="C8E6C9", fill_type="solid")

    # Header
    ws.merge_cells('A1:A2')
    ws['A1'] = "Th·ª©"
    ws['A1'].font = bold
    ws['A1'].alignment = center
    ws['A1'].fill = fill
    ws['A1'].border = border
    ws.merge_cells('B1:G1')
    ws['B1'] = "Khung gi·ªù"
    ws['B1'].font = bold
    ws['B1'].alignment = center
    ws['B1'].fill = fill
    ws['B1'].border = border
    slots = ["S√°ng", "Ph·ª• s√°ng", "Tr√°ng mi·ªáng", "Tr∆∞a", "X·∫ø", "X·∫ø chi·ªÅu"]
    for i, slot in enumerate(slots):
        cell = ws.cell(row=2, column=2+i, value=slot)
        cell.font = bold
        cell.alignment = center
        cell.fill = fill
        cell.border = border

    # Fill days
    days = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7"]
    for i, day in enumerate(days):
        cell = ws.cell(row=3+i, column=1, value=day)
        cell.font = bold
        cell.alignment = center
        cell.border = border
        for col in range(2, 8):
            ws.cell(row=3+i, column=col).border = border

    # Set column widths
    ws.column_dimensions['A'].width = 16
    for col in ['B','C','D','E','F','G']:
        ws.column_dimensions[col].width = 18

    # Save to BytesIO
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return send_file(output, download_name="menu_template.xlsx", as_attachment=True)

@main.route('/activities/<int:id>/delete-image/<int:image_id>', methods=['POST'])
def delete_activity_image(id, image_id):
    try:
        if session.get('role') not in ['admin', 'teacher']:
            print(f"[LOG] Kh√¥ng c√≥ quy·ªÅn xo√° ·∫£nh ho·∫°t ƒë·ªông")
            return redirect_no_permission()
        img = ActivityImage.query.get_or_404(image_id)
        print(f"[LOG] ƒêang xo√° ·∫£nh: id={image_id}, filepath={img.filepath}")
        # Xo√° file v·∫≠t l√Ω
        img_path = os.path.join('app', 'static', img.filepath)
        if os.path.exists(img_path):
            os.remove(img_path)
            print(f"[LOG] ƒê√£ xo√° file v·∫≠t l√Ω: {img_path}")
        else:
            print(f"[LOG] File v·∫≠t l√Ω kh√¥ng t·ªìn t·∫°i: {img_path}")
        db.session.delete(img)
        db.session.commit()
        print(f"[LOG] ƒê√£ xo√° b·∫£n ghi ActivityImage id={image_id} kh·ªèi DB")
        flash('ƒê√£ xo√° ·∫£nh ho·∫°t ƒë·ªông!', 'success')
        return redirect(url_for('main.edit_activity', id=id))
    except Exception as e:
        print(f"[ERROR] L·ªói khi xo√° ·∫£nh ho·∫°t ƒë·ªông: {e}")
        import traceback
        traceback.print_exc()
        flash(f"L·ªói khi xo√° ·∫£nh ho·∫°t ƒë·ªông: {e}", 'danger')
        return redirect(url_for('main.edit_activity', id=id))

@main.route('/menu/<int:week_number>/export-food-safety', methods=['GET'])
def export_food_safety_process(week_number):
    """Xu·∫•t quy tr√¨nh an to√†n th·ª±c ph·∫©m 3 b∆∞·ªõc theo ti√™u chu·∫©n chuy√™n nghi·ªáp v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin qu·∫£n l√Ω."""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    # L·∫•y th·ª±c ƒë∆°n c·ªßa tu·∫ßn
    week = Curriculum.query.filter_by(week_number=week_number).first()
    if not week:
        flash('Kh√¥ng t√¨m th·∫•y th·ª±c ƒë∆°n!', 'danger')
        return redirect(url_for('main.menu'))
    
    import json
    if not OPENPYXL_AVAILABLE:
        flash('Ch·ª©c nƒÉng n√†y c·∫ßn c√†i ƒë·∫∑t openpyxl. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.', 'warning')
        return redirect(url_for('main.menu'))
    
    from openpyxl import Workbook
    from openpyxl.styles import Font, Border, Side, Alignment, PatternFill
    from io import BytesIO
    import zipfile
    from datetime import datetime, timedelta
    
    menu_data = json.loads(week.content)
    
    # L·∫•y th√¥ng tin suppliers chi ti·∫øt
    from app.models import Supplier
    suppliers = Supplier.query.all()
    supplier_dict = {}
    for supplier in suppliers:
        supplier_dict[supplier.name] = {
            'address': supplier.address or 'Ch∆∞a c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ',
            'phone': supplier.phone or 'Ch∆∞a c·∫≠p nh·∫≠t SƒêT',
            'contact_person': supplier.contact_person or 'Ch∆∞a c·∫≠p nh·∫≠t ng∆∞·ªùi li√™n h·ªá',
            'food_safety_cert': supplier.food_safety_cert or 'Ch∆∞a c√≥ gi·∫•y ch·ª©ng nh·∫≠n',
            'established_date': getattr(supplier, 'established_date', 'Ch∆∞a c·∫≠p nh·∫≠t')
        }
    
    # ∆Ø·ªõc t√≠nh s·ªë h·ªçc sinh t·ª´ config
    def get_student_count():
        import os
        import json
        config_file = 'student_config.json'
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    return config.get('student_count', 25)
            except:
                pass
        return 25  # M·∫∑c ƒë·ªãnh
    
    student_count = get_student_count()
    
    # H√†m l·∫•y th√¥ng tin dinh d∆∞·ª°ng c∆° b·∫£n
    def get_nutritional_info(ingredient):
        """Tr·∫£ v·ªÅ th√¥ng tin dinh d∆∞·ª°ng c∆° b·∫£n c·ªßa nguy√™n li·ªáu"""
        nutrition_map = {
            # Protein
            'th·ªãt heo': 'Protein: 26g, Ch·∫•t b√©o: 20g',
            'th·ªãt b√≤': 'Protein: 30g, Iron: 2.6mg',  
            'th·ªãt g√†': 'Protein: 31g, Vitamin B6: 0.9mg',
            'c√° basa': 'Protein: 13g, Omega-3: 0.3g',
            't√¥m': 'Protein: 24g, Selenium: 48mcg',
            'tr·ª©ng g√†': 'Protein: 13g, Choline: 294mg',
            
            # Rau c·ªß
            'c·∫£i xanh': 'Vitamin C: 75mg, Folate: 80mcg',
            'c√† chua': 'Lycopene: 3mg, Vitamin C: 28mg',
            'khoai t√¢y': 'Potassium: 425mg, Vitamin C: 20mg',
            'c·ªß c·∫£i': 'Fiber: 2g, Vitamin C: 27mg',
            
            # Tinh b·ªôt
            'g·∫°o t·∫ª': 'Carbs: 28g, Protein: 2.7g',
            'b√°nh m√¨': 'Carbs: 49g, Fiber: 2.6g',
            
            # Kh√°c
            's·ªØa t∆∞∆°i': 'Calcium: 276mg, Protein: 8g',
            'd·∫ßu ƒÉn': 'Vitamin E: 14mg, Healthy fats'
        }
        return nutrition_map.get(ingredient, 'Th√¥ng tin dinh d∆∞·ª°ng ch∆∞a c·∫≠p nh·∫≠t')
    
    def get_smart_ingredients(dish_name):
        """T·∫°o danh s√°ch nguy√™n li·ªáu th√¥ng minh d·ª±a tr√™n t√™n m√≥n"""
        dish_lower = dish_name.lower()
        ingredients = []
        
        # Protein
        if any(meat in dish_lower for meat in ['th·ªãt', 'heo', 'b√≤', 'g√†']):
            ingredients.append('Th·ªãt t∆∞∆°i')
        if any(fish in dish_lower for fish in ['c√°', 't√¥m', 'cua']):
            ingredients.append('H·∫£i s·∫£n t∆∞∆°i')
        if 'tr·ª©ng' in dish_lower:
            ingredients.append('Tr·ª©ng g√†')
        
        # Rau c·ªß
        if any(veg in dish_lower for veg in ['canh', 'rau', 'c·ªß', 'c·∫£i']):
            ingredients.append('Rau c·ªß t∆∞∆°i')
        if any(seasoning in dish_lower for seasoning in ['x√†o', 'rim', 'kho']):
            ingredients.append('Gia v·ªã, d·∫ßu ƒÉn')
        
        # Tinh b·ªôt
        if any(starch in dish_lower for starch in ['c∆°m', 'g·∫°o', 'b√∫n', 'm√¨']):
            ingredients.append('Tinh b·ªôt')
        
        return ', '.join(ingredients) if ingredients else 'Nguy√™n li·ªáu t·ª± nhi√™n'
    
    def get_serving_temperature(dish_name):
        """X√°c ƒë·ªãnh nhi·ªát ƒë·ªô ph·ª•c v·ª• ph√π h·ª£p"""
        dish_lower = dish_name.lower()
        
        if any(hot in dish_lower for hot in ['canh', 'ch√°o', 's√∫p']):
            return '60-65¬∞C'
        elif any(warm in dish_lower for warm in ['c∆°m', 'x√†o', 'rim', 'kho']):
            return '55-60¬∞C'
        elif any(cool in dish_lower for cool in ['tr√°i c√¢y', 's·ªØa chua', 'ch√®']):
            return '15-20¬∞C'
        else:
            return '45-50¬∞C'
    
    def get_dish_nutrition(dish_name):
        """Tr·∫£ v·ªÅ th√¥ng tin dinh d∆∞·ª°ng c·ªßa m√≥n ƒÉn"""
        dish_lower = dish_name.lower()
        
        if any(protein in dish_lower for protein in ['th·ªãt', 'c√°', 't√¥m', 'tr·ª©ng']):
            return 'Gi√†u protein, h·ªó tr·ª£ ph√°t tri·ªÉn'
        elif any(veg in dish_lower for veg in ['rau', 'c·ªß', 'canh']):
            return 'Gi√†u vitamin, kho√°ng ch·∫•t'
        elif any(fruit in dish_lower for fruit in ['tr√°i c√¢y', 'cam', 'chu·ªëi']):
            return 'Vitamin C, ch·∫•t x∆°'
        elif 'c∆°m' in dish_lower:
            return 'NƒÉng l∆∞·ª£ng, carbohydrate'
        else:
            return 'C√¢n b·∫±ng dinh d∆∞·ª°ng'
    
    def get_sample_note(dish_name):
        """Tr·∫£ v·ªÅ ghi ch√∫ ƒë·∫∑c bi·ªát cho l∆∞u m·∫´u"""
        dish_lower = dish_name.lower()
        
        if any(liquid in dish_lower for liquid in ['canh', 's√∫p', 'ch√†o']):
            return 'ƒê·ªÉ ngu·ªôi tr∆∞·ªõc\nkhi l∆∞u m·∫´u'
        elif any(fried in dish_lower for fried in ['chi√™n', 'r√°n']):
            return 'T√°ch ri√™ng\nd·∫ßu m·ª°'
        elif any(raw in dish_lower for raw in ['s·ªëng', 't√°i']):
            return 'Kh√¥ng l∆∞u m·∫´u\nth·ª±c ph·∫©m s·ªëng'
        elif any(dairy in dish_lower for dairy in ['s·ªØa', 'yaourt']):
            return 'B·∫£o qu·∫£n l·∫°nh\nri√™ng bi·ªát'
        else:
            return 'B·∫£o qu·∫£n\ntheo quy chu·∫©n'
    
    def get_heating_equipment(dish_name):
        """Tr·∫£ v·ªÅ thi·∫øt b·ªã gi·ªØ nhi·ªát ph√π h·ª£p"""
        dish_lower = dish_name.lower()
        
        if 'c∆°m' in dish_lower:
            return 'N·ªìi c∆°m ƒëi·ªán\ngi·ªØ nhi·ªát'
        elif any(soup in dish_lower for soup in ['canh', 's√∫p']):
            return 'N·ªìi inox\nƒë·∫≠y n·∫Øp'
        elif any(fried in dish_lower for fried in ['chi√™n', 'r√°n', 'n∆∞·ªõng']):
            return 'Khay inox\nƒë√®n h√¢m n√≥ng'
        elif any(drink in dish_lower for drink in ['n∆∞·ªõc', 's·ªØa', 'tr√†']):
            return 'B√¨nh gi·ªØ nhi·ªát\n2 l·ªõp'
        else:
            return 'T·ªß gi·ªØ nhi·ªát\nchuy√™n d·ª•ng'
    
    def get_actual_portions(dish_name, base_count):
        """T√≠nh s·ªë su·∫•t th·ª±c t·∫ø d·ª±a tr√™n m√≥n ƒÉn"""
        if not dish_name:  # Default case
            return base_count
            
        dish_lower = dish_name.lower()
        
        # M√≥n ƒÉn ch√≠nh: ƒë·ªß s·ªë su·∫•t
        if any(main in dish_lower for main in ['c∆°m', 'th·ªãt', 'c√°', 'canh']):
            return base_count
        # M√≥n ph·ª•: √≠t h∆°n 10%
        elif any(side in dish_lower for side in ['rau', 'salad']):
            return int(base_count * 0.9)
        # ƒê·ªì u·ªëng: nhi·ªÅu h∆°n 5% (d·ª± ph√≤ng)
        elif any(drink in dish_lower for drink in ['n∆∞·ªõc', 's·ªØa']):
            return int(base_count * 1.05)
        # Tr√°ng mi·ªáng: √≠t h∆°n 15%
        elif any(dessert in dish_lower for dessert in ['tr√°i c√¢y', 'ch√®', 'yaourt']):
            return int(base_count * 0.85)
        else:
            return base_count
    
    def get_serving_note(dish_name):
        """Tr·∫£ v·ªÅ ghi ch√∫ ƒë·∫∑c bi·ªát khi ph·ª•c v·ª•"""
        dish_lower = dish_name.lower()
        
        if any(hot in dish_lower for hot in ['canh', 's√∫p', 'ch√°o']):
            return 'Ki·ªÉm tra nhi·ªát ƒë·ªô\ntr∆∞·ªõc khi ph·ª•c v·ª•'
        elif any(cold in dish_lower for cold in ['tr√°i c√¢y', 'yaourt']):
            return 'Gi·ªØ l·∫°nh\nƒë·∫øn khi ph·ª•c v·ª•'
        elif any(careful in dish_lower for careful in ['x∆∞∆°ng', 'gai']):
            return 'Ki·ªÉm tra x∆∞∆°ng/gai\ntr∆∞·ªõc ph·ª•c v·ª•'
        elif any(portion in dish_lower for portion in ['th·ªãt', 'c√°']):
            return 'C·∫Øt nh·ªè ph√π h·ª£p\nƒë·ªô tu·ªïi tr·∫ª'
        else:
            return 'Ph·ª•c v·ª• ngay\nsau ch·∫ø bi·∫øn'
    
    # B·∫£ng t√≠nh to√°n kh·ªëi l∆∞·ª£ng chi ti·∫øt theo khoa h·ªçc dinh d∆∞·ª°ng (gram/h·ªçc sinh/b·ªØa)
    ingredient_portions = {
        # === NH√ìM PROTEIN ===
        'th·ªãt heo': 45, 'th·ªãt b√≤': 50, 'th·ªãt g√†': 55, 'th·ªãt v·ªãt': 50,
        'c√° basa': 60, 'c√° h·ªìi': 65, 'c√° thu': 60, 'c√° r√¥': 55,
        't√¥m': 40, 'cua': 45, 'm·ª±c': 50, 'ngh√™u': 45,
        'tr·ª©ng g√†': 50, 'tr·ª©ng v·ªãt': 45, 'tr·ª©ng c√∫t': 30,
        'ƒë·∫≠u h≈©': 70, 'ƒë·∫≠u ph·ª•': 65, 't√†u h≈© ky': 40,
        
        # === NH√ìM RAU C·ª¶ T∆Ø∆†I ===
        'c·∫£i xanh': 80, 'rau mu·ªëng': 85, 'c·∫£i ng·ªçt': 75, 'c·∫£i th√¨a': 80,
        's√∫p l∆°': 90, 'b√¥ng c·∫£i': 85, 'c√† r√≥t': 70, 'ƒë·∫≠u cove': 60,
        'c√† chua': 45, 'd∆∞a leo': 35, '·ªõt chu√¥ng': 30,
        'khoai t√¢y': 120, 'khoai lang': 110, 'c·ªß sen': 90, 'c·ªß c·∫£i': 100,
        'n·∫•m': 60, 'gi√° ƒë·ªó': 50, 'h√†nh t√¢y': 25, 't·ªèi': 8,
        
        # === NH√ìM TINH B·ªòT ===
        'g·∫°o t·∫ª': 80, 'g·∫°o n√†ng h∆∞∆°ng': 85, 'g·∫°o st25': 90,
        'b√∫n t∆∞∆°i': 70, 'b√°nh ph·ªü': 65, 'm√¨ s·ª£i': 60,
        'b√°nh m√¨': 100, 'b√°nh bao': 120, 'b√°nh cu·ªën': 80,
        
        # === NH√ìM TH·ª∞C PH·∫®M KH√î ===
        'ƒë∆∞·ªùng tr·∫Øng': 15, 'ƒë∆∞·ªùng ph√®n': 12, 'mu·ªëi': 3, 'n∆∞·ªõc m·∫Øm': 8,
        'd·∫ßu ƒÉn': 10, 'd·∫ßu oliu': 8, 'b∆°': 15, 'm·ª°': 5,
        'b·ªôt ng·ªçt': 2, 'h·∫°t n√™m': 3, 't∆∞∆°ng ·ªõt': 5, 's·ªët c√†': 10,
        's·ªØa t∆∞∆°i': 200, 's·ªØa chua': 150, 'yaourt': 120,
        
        # === NH√ìM TR√ÅI C√ÇY ===
        'chu·ªëi': 120, 't√°o': 100, 'cam': 150, 'xo√†i': 130,
        'ƒëu ƒë·ªß': 140, 'd∆∞a h·∫•u': 180, 'd√¢u t√¢y': 80, 'nho': 90
    }
    
    # T·∫°o danh s√°ch m√≥n ƒÉn v√† ph√¢n t√≠ch nguy√™n li·ªáu th√¥ng minh
    dishes = []
    fresh_ingredients_with_qty = []
    dry_ingredients_with_qty = []
    fruit_ingredients_with_qty = []
    
    ingredient_count = {}
    dish_details = {}  # L∆∞u th√¥ng tin chi ti·∫øt t·ª´ng m√≥n
    
    # Ph√¢n t√≠ch th·ª±c ƒë∆°n chi ti·∫øt
    for day_key, day_data in menu_data.items():
        for meal_type, meal in day_data.items():
            if meal:
                dish_list = [dish.strip() for dish in meal.split(',') if dish.strip()]
                dishes.extend(dish_list)
                
                # Ph√¢n t√≠ch nguy√™n li·ªáu th√¥ng minh d·ª±a tr√™n t√™n m√≥n
                for dish in dish_list:
                    dish_lower = dish.lower()
                    dish_ingredients = []
                    
                    # T√¨m nguy√™n li·ªáu trong t√™n m√≥n
                    for ingredient_key, portion in ingredient_portions.items():
                        if ingredient_key in dish_lower or any(word in dish_lower for word in ingredient_key.split()):
                            if ingredient_key not in ingredient_count:
                                ingredient_count[ingredient_key] = 0
                            ingredient_count[ingredient_key] += 1
                            dish_ingredients.append(ingredient_key)
                    
                    # L∆∞u th√¥ng tin m√≥n ƒÉn
                    dish_details[dish] = {
                        'ingredients': dish_ingredients,
                        'meal_type': meal_type,
                        'day': day_key
                    }
    
    # T√≠nh to√°n kh·ªëi l∆∞·ª£ng th·ª±c t·∫ø v√† ph√¢n lo·∫°i th√¥ng minh
    for ingredient_key, count in ingredient_count.items():
        # T√≠nh kh·ªëi l∆∞·ª£ng: s·ªë l·∫ßn xu·∫•t hi·ªán √ó kh·∫©u ph·∫ßn √ó s·ªë h·ªçc sinh √ó h·ªá s·ªë ƒëi·ªÅu ch·ªânh
        adjustment_factor = 1.2 if count > 5 else 1.1  # TƒÉng 20% n·∫øu d√πng nhi·ªÅu, 10% n·∫øu √≠t
        total_weight = count * ingredient_portions[ingredient_key] * student_count * adjustment_factor
        weight_kg = round(total_weight / 1000, 2)
        
        # Ch·ªçn supplier ph√π h·ª£p th√¥ng minh
        suitable_supplier = None
        supplier_info = {}
        
        # Logic ch·ªçn supplier d·ª±a tr√™n lo·∫°i nguy√™n li·ªáu
        if any(protein in ingredient_key for protein in ['th·ªãt', 'c√°', 't√¥m', 'cua', 'tr·ª©ng']):
            # T√¨m supplier th·ª±c ph·∫©m t∆∞∆°i s·ªëng
            for supplier_name in supplier_dict.keys():
                if any(keyword in supplier_name.lower() for keyword in ['t∆∞∆°i s·ªëng', 'h·∫£i s·∫£n', 'th·ªãt', 'protein']):
                    suitable_supplier = supplier_name
                    break
        elif any(veg in ingredient_key for veg in ['rau', 'c·∫£i', 'c·ªß', 'n·∫•m']):
            # T√¨m supplier rau c·ªß
            for supplier_name in supplier_dict.keys():
                if any(keyword in supplier_name.lower() for keyword in ['rau c·ªß', 'n√¥ng s·∫£n', 'organic']):
                    suitable_supplier = supplier_name
                    break
        elif any(fruit in ingredient_key for fruit in ['chu·ªëi', 't√°o', 'cam', 'xo√†i', 'ƒëu ƒë·ªß', 'd√¢u']):
            # T√¨m supplier tr√°i c√¢y
            for supplier_name in supplier_dict.keys():
                if any(keyword in supplier_name.lower() for keyword in ['tr√°i c√¢y', 'hoa qu·∫£', 'fruit']):
                    suitable_supplier = supplier_name
                    break
        
        # N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c supplier chuy√™n bi·ªát, d√πng supplier ƒë·∫ßu ti√™n
        if not suitable_supplier and supplier_dict:
            suitable_supplier = list(supplier_dict.keys())[0]
        
        supplier_info = supplier_dict.get(suitable_supplier, {
            'address': 'ƒê·ªãa ch·ªâ ch∆∞a c·∫≠p nh·∫≠t',
            'phone': 'SƒêT ch∆∞a c·∫≠p nh·∫≠t',
            'contact_person': 'Ng∆∞·ªùi li√™n h·ªá ch∆∞a c·∫≠p nh·∫≠t',
            'food_safety_cert': 'Ch∆∞a c√≥ gi·∫•y ch·ª©ng nh·∫≠n'
        })
        
        ingredient_info = {
            'name': ingredient_key.title(),
            'weight_kg': weight_kg,
            'supplier': suitable_supplier or 'Nh√† cung c·∫•p ch∆∞a x√°c ƒë·ªãnh',
            'supplier_info': supplier_info,
            'usage_frequency': count,
            'nutritional_value': get_nutritional_info(ingredient_key)
        }
        
        # Ph√¢n lo·∫°i th√¥ng minh d·ª±a tr√™n ƒë·∫∑c t√≠nh nguy√™n li·ªáu
        if any(fresh in ingredient_key for fresh in ['th·ªãt', 'c√°', 't√¥m', 'cua', 'tr·ª©ng', 'rau', 'c·∫£i', 'c·ªß', 'n·∫•m', 'c√† chua']):
            fresh_ingredients_with_qty.append(ingredient_info)
        elif any(fruit in ingredient_key for fruit in ['chu·ªëi', 't√°o', 'cam', 'xo√†i', 'ƒëu ƒë·ªß', 'd√¢u']):
            fruit_ingredients_with_qty.append(ingredient_info)
        else:
            dry_ingredients_with_qty.append(ingredient_info)
    
    # S·∫Øp x·∫øp theo ƒë·ªô ∆∞u ti√™n dinh d∆∞·ª°ng
    fresh_ingredients_with_qty.sort(key=lambda x: x['usage_frequency'], reverse=True)
    dry_ingredients_with_qty.sort(key=lambda x: x['usage_frequency'], reverse=True)
    fruit_ingredients_with_qty.sort(key=lambda x: x['usage_frequency'], reverse=True)
    
    # Lo·∫°i b·ªè tr√πng l·∫∑p m√≥n ƒÉn v√† ph√¢n lo·∫°i
    dishes = list(set(dishes))
    
    zip_buffer = BytesIO()
    
    with zipfile.ZipFile(zip_buffer, 'w') as zipf:
        
        # B∆Ø·ªöC 1.1: Ti·∫øp nh·∫≠n th·ª±c ph·∫©m t∆∞∆°i - Theo ti√™u chu·∫©n chuy√™n nghi·ªáp
        wb1 = Workbook()
        ws1 = wb1.active
        ws1.title = "Ki·ªÉm tra th·ª±c ph·∫©m t∆∞∆°i"
        
        today = datetime.now()
        week_start = today - timedelta(days=today.weekday())
        week_end = week_start + timedelta(days=6)
        
        # ƒê·ªãnh d·∫°ng border v√† style chuy√™n nghi·ªáp
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        thick_border = Border(
            left=Side(style='thick'),
            right=Side(style='thick'),
            top=Side(style='thick'),
            bottom=Side(style='thick')
        )
        
        # Header ch√≠nh - D√≤ng 1-5
        ws1['A1'] = "T√äN C∆† S·ªû: MNƒêL C√¢y Nh·ªè"
        ws1['A1'].font = Font(bold=True, size=12)
        ws1['A1'].fill = PatternFill(start_color="FFE6CC", end_color="FFE6CC", fill_type="solid")
        ws1.merge_cells('A1:P1')
        
        ws1['D2'] = "BI·ªÇU M·∫™U KI·ªÇM TRA TR∆Ø·ªöC KHI CH·∫æ BI·∫æN TH·ª®C ƒÇN"
        ws1['D2'].font = Font(bold=True, size=14, color="FF0000")
        ws1['D2'].alignment = Alignment(horizontal='center', vertical='center')
        ws1.merge_cells('D2:M2')
        
        ws1['O2'] = "S·ªë: 1246/Qƒê - B·ªô Y T·∫ø"
        ws1['O2'].font = Font(bold=True, size=10)
        ws1['O2'].fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
        
        # Th√¥ng tin ki·ªÉm tra
        info_data = [
            (3, 'A', f"Ng∆∞·ªùi ki·ªÉm tra: Nguy·ªÖn Th·ªã V√¢n - B·∫øp tr∆∞·ªüng", 'O', "M·∫´u s·ªë 1.1"),
            (4, 'A', f"Th·ªùi gian ki·ªÉm tra: {week_start.strftime('%d/%m/%Y')} - Tu·∫ßn {week_number}", 'O', f"S·ªë h·ªçc sinh: {student_count}"),
            (5, 'A', "ƒê·ªãa ƒëi·ªÉm: B·∫øp ƒÉn Tr∆∞·ªùng MNƒêL C√¢y Nh·ªè", 'O', "Phi√™n b·∫£n: v2.0")
        ]
        
        for row, col_a, text_a, col_o, text_o in info_data:
            ws1[f'{col_a}{row}'] = text_a
            ws1[f'{col_a}{row}'].font = Font(bold=True, size=10)
            ws1[f'{col_o}{row}'] = text_o
            ws1[f'{col_o}{row}'].font = Font(bold=True, size=10)
            ws1[f'{col_o}{row}'].fill = PatternFill(start_color="E6F3FF", end_color="E6F3FF", fill_type="solid")
        
        # Ti√™u ƒë·ªÅ ph·∫ßn I
        ws1['A7'] = "PH·∫¶N I: TH·ª∞C PH·∫®M T∆Ø∆†I S·ªêNG, ƒê√îNG L·∫†NH (Th·ªãt, c√°, rau, c·ªß, qu·∫£...)"
        ws1['A7'].font = Font(bold=True, size=12, color="0066CC")
        ws1['A7'].fill = PatternFill(start_color="E6F3FF", end_color="E6F3FF", fill_type="solid")
        ws1.merge_cells('A7:M7')
        ws1['P7'] = "B∆Ø·ªöC 1.1"
        ws1['P7'].font = Font(bold=True, size=12, color="FF0000")
        ws1['P7'].fill = PatternFill(start_color="FFEEEE", end_color="FFEEEE", fill_type="solid")
        
        # Header b·∫£ng ch√≠nh - d√≤ng 8-10
        headers_main = [
            'STT', 'T√äN TH·ª∞C PH·∫®M', 'XU·∫§T X·ª®', 'TH·ªúI GIAN NH·∫¨P\n(Ng√†y/Gi·ªù)', 
            'KH·ªêI L∆Ø·ª¢NG\n(kg/l√≠t)', 'NH√Ä CUNG C·∫§P', 'LI√äN H·ªÜ', 'S·ªê CH·ª®NG T·ª™',
            'GI·∫§Y PH√âP\nATTP', 'CH·ª®NG NH·∫¨N\nV·ªÜ SINH', 'KI·ªÇM TRA C·∫¢M QUAN',
            '', 'X√âT NGHI·ªÜM NHANH', '', 'BI·ªÜN PH√ÅP X·ª¨ L√ù', 'GHI CH√ö DINH D∆Ø·ª†NG'
        ]
        
        for i, header in enumerate(headers_main, 1):
            cell = ws1.cell(row=8, column=i, value=header)
            cell.font = Font(bold=True, size=9, color="FFFFFF")
            cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
            cell.fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
            cell.border = thick_border
        
        # Sub-headers chi ti·∫øt - d√≤ng 9
        sub_headers = [
            '', '', '', '', '', 'T√™n c∆° s·ªü', 'SƒêT/ƒê·ªãa ch·ªâ', '', '', '', 
            'ƒê·∫°t', 'Kh√¥ng ƒë·∫°t', 'ƒê·∫°t', 'Kh√¥ng ƒë·∫°t', '', ''
        ]
        
        for i, header in enumerate(sub_headers, 1):
            cell = ws1.cell(row=9, column=i, value=header)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="B4C6E7", end_color="B4C6E7", fill_type="solid")
            cell.border = thin_border
        
        # Merge cells cho headers
        merge_ranges = ['K8:L8', 'M8:N8']  # Ki·ªÉm tra c·∫£m quan, X√©t nghi·ªám nhanh
        for merge_range in merge_ranges:
            ws1.merge_cells(merge_range)
        
        # S·ªë th·ª© t·ª± c·ªôt - d√≤ng 10
        for i in range(1, 17):
            cell = ws1.cell(row=10, column=i, value=i)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="D9E2F3", end_color="D9E2F3", fill_type="solid")
            cell.border = thin_border
        
        # ƒêi·ªÅn d·ªØ li·ªáu th·ª±c ph·∫©m t∆∞∆°i v·ªõi th√¥ng tin chi ti·∫øt
        for i, ingredient_info in enumerate(fresh_ingredients_with_qty[:25], 1):
            row_num = 10 + i
            supplier_info = ingredient_info.get('supplier_info', {})
            
            # T·∫°o th√¥ng tin xu·∫•t x·ª© th√¥ng minh
            origin = "Vi·ªát Nam"
            if any(keyword in ingredient_info['name'].lower() for keyword in ['h·ªìi', 'c√° h·ªìi']):
                origin = "Na Uy/Chile"
            elif any(keyword in ingredient_info['name'].lower() for keyword in ['b√≤', 'th·ªãt b√≤']):
                origin = "√öc/Vi·ªát Nam"
            
            data_row = [
                i,  # STT
                ingredient_info['name'].upper(),  # T√™n th·ª±c ph·∫©m
                origin,  # Xu·∫•t x·ª©
                f"{week_start.strftime('%d/%m/%Y')}\n6:00-7:00",  # Th·ªùi gian nh·∫≠p
                f"{ingredient_info['weight_kg']} kg",  # Kh·ªëi l∆∞·ª£ng
                ingredient_info.get('supplier', 'CTY TNHH Th·ª±c ph·∫©m An to√†n'),  # Nh√† cung c·∫•p
                f"{supplier_info.get('phone', '0902.xxx.xxx')}\n{supplier_info.get('address', 'ƒê√† L·∫°t')[:30]}...",  # Li√™n h·ªá
                f"HD{1000+i:04d}",  # S·ªë ch·ª©ng t·ª´ t·ª± ƒë·ªông
                supplier_info.get('food_safety_cert', 'ATTP-001/2024'),  # Gi·∫•y ph√©p
                "ƒê·∫°t chu·∫©n VN",  # Ch·ª©ng nh·∫≠n v·ªá sinh
                '‚úì',  # ƒê·∫°t c·∫£m quan
                '',  # Kh√¥ng ƒë·∫°t c·∫£m quan
                '‚úì' if ingredient_info['usage_frequency'] > 3 else '',  # X√©t nghi·ªám (v·ªõi th·ª±c ph·∫©m d√πng nhi·ªÅu)
                '',  # Kh√¥ng ƒë·∫°t x√©t nghi·ªám
                "B·∫£o qu·∫£n l·∫°nh\nS·ª≠ d·ª•ng ngay",  # Bi·ªán ph√°p x·ª≠ l√Ω
                ingredient_info.get('nutritional_value', 'N/A')[:25] + "..."  # Ghi ch√∫ dinh d∆∞·ª°ng
            ]
            
            for j, value in enumerate(data_row, 1):
                cell = ws1.cell(row=row_num, column=j, value=value)
                cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
                cell.border = thin_border
                
                # Styling ƒë·∫∑c bi·ªát
                if j == 1:  # STT
                    cell.font = Font(bold=True, color="0066CC")
                    cell.fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")
                elif j == 2:  # T√™n th·ª±c ph·∫©m  
                    cell.font = Font(bold=True, size=10)
                    cell.fill = PatternFill(start_color="FFF2CC", end_color="FFF2CC", fill_type="solid")
                elif j in [11, 13] and value == '‚úì':  # ƒê√°nh d·∫•u ƒë·∫°t
                    cell.font = Font(bold=True, size=12, color="00AA00")
                    cell.fill = PatternFill(start_color="E2EFDA", end_color="E2EFDA", fill_type="solid")
                elif j == 5:  # Kh·ªëi l∆∞·ª£ng
                    cell.font = Font(bold=True, color="CC6600")
        
        # Th√™m th√¥ng tin th·ªëng k√™
        stats_row = len(fresh_ingredients_with_qty) + 12
        
        # Th·ªëng k√™ t·ªïng quan
        ws1[f'A{stats_row}'] = "TH·ªêNG K√ä T·ªîNG QUAN:"
        ws1[f'A{stats_row}'].font = Font(bold=True, size=11, color="0066CC")
        ws1[f'A{stats_row}'].fill = PatternFill(start_color="E6F3FF", end_color="E6F3FF", fill_type="solid")
        
        total_weight = sum(item['weight_kg'] for item in fresh_ingredients_with_qty)
        total_items = len(fresh_ingredients_with_qty)
        
        stats_info = [
            f"‚Ä¢ T·ªïng s·ªë lo·∫°i th·ª±c ph·∫©m t∆∞∆°i: {total_items} lo·∫°i",
            f"‚Ä¢ T·ªïng kh·ªëi l∆∞·ª£ng ∆∞·ªõc t√≠nh: {total_weight:.1f} kg",
            f"‚Ä¢ S·ªë h·ªçc sinh ph·ª•c v·ª•: {student_count} em",
            f"‚Ä¢ Kh·ªëi l∆∞·ª£ng trung b√¨nh/h·ªçc sinh: {total_weight/student_count:.2f} kg/em/tu·∫ßn"
        ]
        
        for i, stat in enumerate(stats_info, 1):
            ws1[f'A{stats_row + i}'] = stat
            ws1[f'A{stats_row + i}'].font = Font(size=10)
        
        # Th√™m ghi ch√∫ quan tr·ªçng
        note_row = stats_row + 6
        ws1[f'A{note_row}'] = "GHI CH√ö QUAN TR·ªåNG:"
        ws1[f'A{note_row}'].font = Font(bold=True, size=11, color="FF0000")
        
        notes = [
            "‚Ä¢ Ki·ªÉm tra nhi·ªát ƒë·ªô b·∫£o qu·∫£n: Th·ª±c ph·∫©m t∆∞∆°i <4¬∞C, ƒë√¥ng l·∫°nh <-18¬∞C",
            "‚Ä¢ Th·ªùi gian s·ª≠ d·ª•ng: Th·ª±c ph·∫©m t∆∞∆°i trong ng√†y, ƒë√¥ng l·∫°nh theo h·∫°n s·ª≠ d·ª•ng",  
            "‚Ä¢ X√©t nghi·ªám nhanh: ∆Øu ti√™n th·ª±c ph·∫©m c√≥ ngu·ªìn g·ªëc kh√¥ng r√µ r√†ng",
            "‚Ä¢ B√°o c√°o ngay n·∫øu ph√°t hi·ªán b·∫•t th∆∞·ªùng v·ªÅ m√†u s·∫Øc, m√πi v·ªã, bao b√¨"
        ]
        
        for i, note in enumerate(notes, 1):
            ws1[f'A{note_row + i}'] = note
            ws1[f'A{note_row + i}'].font = Font(size=9, color="CC0000")
        
        # Ch·ªØ k√Ω chuy√™n nghi·ªáp
        signature_row = note_row + 7
        
        # Th√™m khung ch·ªØ k√Ω
        signature_data = [
            (signature_row, 'D', "B·∫æP TR∆Ø·ªûNG", 'K', "HI·ªÜU TR∆Ø·ªûNG"),
            (signature_row + 1, 'D', "(K√Ω, ghi r√µ h·ªç t√™n)", 'K', "(K√Ω, ghi r√µ h·ªç t√™n)"),
            (signature_row + 5, 'D', "Nguy·ªÖn Th·ªã V√¢n", 'K', "Nguy·ªÖn Th·ªã V√¢n"),
            (signature_row + 6, 'D', f"Ng√†y {today.day}/{today.month}/{today.year}", 'K', f"Ng√†y {today.day}/{today.month}/{today.year}")
        ]
        
        for row, col_d, text_d, col_k, text_k in signature_data:
            ws1[f'{col_d}{row}'] = text_d
            ws1[f'{col_k}{row}'] = text_k
            
            # ƒê·ªãnh d·∫°ng ch·ªØ k√Ω
            for col, text in [(col_d, text_d), (col_k, text_k)]:
                cell = ws1[f'{col}{row}']
                cell.alignment = Alignment(horizontal='center', vertical='center')
                if row == signature_row:  # Ch·ª©c danh
                    cell.font = Font(bold=True, size=12, color="0066CC")
                    cell.fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")
                elif row == signature_row + 1:  # H∆∞·ªõng d·∫´n
                    cell.font = Font(italic=True, size=9)
                elif row == signature_row + 5:  # T√™n
                    cell.font = Font(bold=True, size=11)
                else:  # Ng√†y
                    cell.font = Font(size=9)
        
        file1_buffer = BytesIO()
        wb1.save(file1_buffer)
        file1_buffer.seek(0)
        zipf.writestr(f"B∆∞·ªõc 1.1 - Ti·∫øp nh·∫≠n th·ª±c ph·∫©m t∆∞∆°i - Tu·∫ßn {week_number}.xlsx", file1_buffer.read())
        
        
        # B∆Ø·ªöC 1.2: Ti·∫øp nh·∫≠n th·ª±c ph·∫©m kh√¥ - Format chuy√™n nghi·ªáp 
        wb2 = Workbook()
        ws2 = wb2.active
        ws2.title = "Ki·ªÉm tra th·ª±c ph·∫©m kh√¥"
        
        # Header ch√≠nh gi·ªëng B∆∞·ªõc 1.1
        ws2['A1'] = "T√äN C∆† S·ªû: MNƒêL C√¢y Nh·ªè"
        ws2['A1'].font = Font(bold=True, size=12)
        ws2['A1'].fill = PatternFill(start_color="FFE6CC", end_color="FFE6CC", fill_type="solid")
        ws2.merge_cells('A1:P1')
        
        ws2['D2'] = "BI·ªÇU M·∫™U KI·ªÇM TRA TH·ª∞C PH·∫®M KH√î V√Ä BAO G√ìI"
        ws2['D2'].font = Font(bold=True, size=14, color="FF0000")
        ws2['D2'].alignment = Alignment(horizontal='center', vertical='center')
        ws2.merge_cells('D2:M2')
        
        ws2['O2'] = "S·ªë: 1246/Qƒê - B·ªô Y T·∫ø"
        ws2['O2'].font = Font(bold=True, size=10)
        ws2['O2'].fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
        
        # Th√¥ng tin ki·ªÉm tra
        info_data2 = [
            (3, 'A', f"Ng∆∞·ªùi ki·ªÉm tra: Nguy·ªÖn Th·ªã V√¢n - B·∫øp tr∆∞·ªüng", 'O', "M·∫´u s·ªë 1.2"),
            (4, 'A', f"Th·ªùi gian ki·ªÉm tra: {week_start.strftime('%d/%m/%Y')} - Tu·∫ßn {week_number}", 'O', f"S·ªë h·ªçc sinh: {student_count}"),
            (5, 'A', "ƒê·ªãa ƒëi·ªÉm: Kho th·ª±c ph·∫©m kh√¥ - MNƒêL C√¢y Nh·ªè", 'O', "Phi√™n b·∫£n: v2.0")
        ]
        
        for row, col_a, text_a, col_o, text_o in info_data2:
            ws2[f'{col_a}{row}'] = text_a
            ws2[f'{col_a}{row}'].font = Font(bold=True, size=10)
            ws2[f'{col_o}{row}'] = text_o
            ws2[f'{col_o}{row}'].font = Font(bold=True, size=10)
            ws2[f'{col_o}{row}'].fill = PatternFill(start_color="E6F3FF", end_color="E6F3FF", fill_type="solid")
        
        # Ti√™u ƒë·ªÅ ph·∫ßn II
        ws2['A7'] = "PH·∫¶N II: TH·ª∞C PH·∫®M KH√î, BAO G√ìI S·∫¥N V√Ä PH·ª§ GIA TH·ª∞C PH·∫®M"
        ws2['A7'].font = Font(bold=True, size=12, color="FF6600")
        ws2['A7'].fill = PatternFill(start_color="FFF2E6", end_color="FFF2E6", fill_type="solid")
        ws2.merge_cells('A7:M7')
        ws2['P7'] = "B∆Ø·ªöC 1.2"
        ws2['P7'].font = Font(bold=True, size=12, color="FF0000")
        ws2['P7'].fill = PatternFill(start_color="FFEEEE", end_color="FFEEEE", fill_type="solid")
        
        # Header b·∫£ng ch√≠nh - d√≤ng 8-10  
        headers2_main = [
            'STT', 'T√äN TH·ª∞C PH·∫®M', 'NH√ÉN HI·ªÜU', 'NH√Ä S·∫¢N XU·∫§T', 'ƒê·ªäA CH·ªà S·∫¢N XU·∫§T',
            'TH·ªúI GIAN NH·∫¨P', 'KH·ªêI L∆Ø·ª¢NG\n(kg/l√≠t)', 'NH√Ä CUNG C·∫§P', 'LI√äN H·ªÜ', 'H·∫†N S·ª¨ D·ª§NG',
            'B·∫¢O QU·∫¢N', 'S·ªê L√î/M√É', 'KI·ªÇM TRA C·∫¢M QUAN', '', 'BI·ªÜN PH√ÅP', 'DINH D∆Ø·ª†NG'
        ]
        
        for i, header in enumerate(headers2_main, 1):
            cell = ws2.cell(row=8, column=i, value=header)
            cell.font = Font(bold=True, size=9, color="FFFFFF")
            cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
            cell.fill = PatternFill(start_color="E67E22", end_color="E67E22", fill_type="solid")
            cell.border = thick_border
        
        # Sub-headers chi ti·∫øt
        sub_headers2 = [
            '', '', '', '', '', '', '', 'T√™n c∆° s·ªü', 'SƒêT/ƒê·ªãa ch·ªâ', '', '', '', 
            'ƒê·∫°t', 'Kh√¥ng ƒë·∫°t', '', ''
        ]
        
        for i, header in enumerate(sub_headers2, 1):
            cell = ws2.cell(row=9, column=i, value=header)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="F8C471", end_color="F8C471", fill_type="solid")
            cell.border = thin_border
        
        # Merge cells cho headers
        ws2.merge_cells('M8:N8')  # Ki·ªÉm tra c·∫£m quan
        
        # S·ªë th·ª© t·ª± c·ªôt
        for i in range(1, 17):
            cell = ws2.cell(row=10, column=i, value=i)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="FADBD8", end_color="FADBD8", fill_type="solid")
            cell.border = thin_border
        
        # ƒêi·ªÅn d·ªØ li·ªáu th·ª±c ph·∫©m kh√¥ chi ti·∫øt
        for i, ingredient_info in enumerate(dry_ingredients_with_qty[:25], 1):
            row_num = 10 + i
            supplier_info = ingredient_info.get('supplier_info', {})
            
            # T·∫°o th√¥ng tin h·∫°n s·ª≠ d·ª•ng th√¥ng minh
            expiry_date = (today + timedelta(days=365)).strftime('%d/%m/%Y') if 'g·∫°o' in ingredient_info['name'].lower() else (today + timedelta(days=180)).strftime('%d/%m/%Y')
            
            # Nh√£n hi·ªáu th√¥ng minh
            brand = "Ch∆∞a x√°c ƒë·ªãnh"
            if 'g·∫°o' in ingredient_info['name'].lower():
                brand = "ST25/Jasmine"
            elif 's·ªØa' in ingredient_info['name'].lower():
                brand = "Vinamilk/TH"
            elif 'd·∫ßu' in ingredient_info['name'].lower():
                brand = "T∆∞·ªùng An/Neptune"
            
            data_row2 = [
                i,  # STT
                ingredient_info['name'].upper(),  # T√™n th·ª±c ph·∫©m
                brand,  # Nh√£n hi·ªáu
                "C√¥ng ty TNHH Th·ª±c ph·∫©m Vi·ªát",  # Nh√† s·∫£n xu·∫•t
                "KCN ƒê·ªìng An, Thu·∫≠n An, B√¨nh D∆∞∆°ng",  # ƒê·ªãa ch·ªâ s·∫£n xu·∫•t
                f"{week_start.strftime('%d/%m/%Y')}\n8:00-9:00",  # Th·ªùi gian nh·∫≠p
                f"{ingredient_info['weight_kg']} kg",  # Kh·ªëi l∆∞·ª£ng
                ingredient_info.get('supplier', 'Si√™u th·ªã Co.opmart'),  # Nh√† cung c·∫•p
                f"{supplier_info.get('phone', '0902.xxx.xxx')}\n{supplier_info.get('address', 'ƒê√† L·∫°t')[:25]}...",  # Li√™n h·ªá
                expiry_date,  # H·∫°n s·ª≠ d·ª•ng
                "Kh√¥ r√°o, tho√°ng m√°t\n<25¬∞C",  # B·∫£o qu·∫£n
                f"LOT{2024000+i:06d}",  # S·ªë l√¥
                '‚úì',  # ƒê·∫°t c·∫£m quan
                '',  # Kh√¥ng ƒë·∫°t
                "S·ª≠ d·ª•ng theo FIFO\nKi·ªÉm tra ƒë·ªãnh k·ª≥",  # Bi·ªán ph√°p
                ingredient_info.get('nutritional_value', 'N/A')[:20] + "..."  # Dinh d∆∞·ª°ng
            ]
            
            for j, value in enumerate(data_row2, 1):
                cell = ws2.cell(row=row_num, column=j, value=value)
                cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
                cell.border = thin_border
                
                # Styling ƒë·∫∑c bi·ªát
                if j == 1:  # STT
                    cell.font = Font(bold=True, color="E67E22")
                    cell.fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")
                elif j == 2:  # T√™n th·ª±c ph·∫©m
                    cell.font = Font(bold=True, size=10)
                    cell.fill = PatternFill(start_color="FEF9E7", end_color="FEF9E7", fill_type="solid")
                elif j == 13 and value == '‚úì':  # ƒê√°nh d·∫•u ƒë·∫°t
                    cell.font = Font(bold=True, size=12, color="27AE60")
                    cell.fill = PatternFill(start_color="E8F5E8", end_color="E8F5E8", fill_type="solid")
                elif j == 7:  # Kh·ªëi l∆∞·ª£ng
                    cell.font = Font(bold=True, color="D35400")
                elif j == 10:  # H·∫°n s·ª≠ d·ª•ng
                    cell.font = Font(bold=True, color="8E44AD")
        
        # Th·ªëng k√™ cho th·ª±c ph·∫©m kh√¥
        stats_row2 = len(dry_ingredients_with_qty) + 12
        ws2[f'A{stats_row2}'] = "TH·ªêNG K√ä TH·ª∞C PH·∫®M KH√î:"
        ws2[f'A{stats_row2}'].font = Font(bold=True, size=11, color="E67E22")
        ws2[f'A{stats_row2}'].fill = PatternFill(start_color="FFF2E6", end_color="FFF2E6", fill_type="solid")
        
        total_weight2 = sum(item['weight_kg'] for item in dry_ingredients_with_qty)
        total_items2 = len(dry_ingredients_with_qty)
        
        stats_info2 = [
            f"‚Ä¢ T·ªïng s·ªë lo·∫°i th·ª±c ph·∫©m kh√¥: {total_items2} lo·∫°i",
            f"‚Ä¢ T·ªïng kh·ªëi l∆∞·ª£ng ∆∞·ªõc t√≠nh: {total_weight2:.1f} kg", 
            f"‚Ä¢ T·ª∑ l·ªá th·ª±c ph·∫©m kh√¥/t·ªïng: {total_weight2/(total_weight+total_weight2)*100:.1f}%",
            f"‚Ä¢ Chu k·ª≥ nh·∫≠p h√†ng khuy·∫øn ngh·ªã: 2 tu·∫ßn/l·∫ßn"
        ]
        
        for i, stat in enumerate(stats_info2, 1):
            ws2[f'A{stats_row2 + i}'] = stat
            ws2[f'A{stats_row2 + i}'].font = Font(size=10)
        
        # Ghi ch√∫ ƒë·∫∑c bi·ªát cho th·ª±c ph·∫©m kh√¥
        note_row2 = stats_row2 + 6
        ws2[f'A{note_row2}'] = "NGUY√äN T·∫ÆC B·∫¢O QU·∫¢N TH·ª∞C PH·∫®M KH√î:"
        ws2[f'A{note_row2}'].font = Font(bold=True, size=11, color="D35400")
        
        notes2 = [
            "‚Ä¢ Nhi·ªát ƒë·ªô: <25¬∞C, ƒë·ªô ·∫©m: <60%, tr√°nh √°nh s√°ng tr·ª±c ti·∫øp",
            "‚Ä¢ Nguy√™n t·∫Øc FIFO: First In - First Out (h√†ng nh·∫≠p tr∆∞·ªõc - xu·∫•t tr∆∞·ªõc)",
            "‚Ä¢ Ki·ªÉm tra h·∫°n s·ª≠ d·ª•ng h√†ng tu·∫ßn, b√°o c√°o h√†ng c·∫≠n date",
            "‚Ä¢ B·∫£o qu·∫£n ri√™ng bi·ªát: gia v·ªã, ng≈© c·ªëc, ƒë·ªì kh√¥"
        ]
        
        for i, note in enumerate(notes2, 1):
            ws2[f'A{note_row2 + i}'] = note
            ws2[f'A{note_row2 + i}'].font = Font(size=9, color="A0522D")
        
        # Ch·ªØ k√Ω t∆∞∆°ng t·ª± B∆∞·ªõc 1.1
        signature_row2 = note_row2 + 7
        signature_data2 = [
            (signature_row2, 'D', "B·∫æP TR∆Ø·ªûNG", 'K', "HI·ªÜU TR∆Ø·ªûNG"),
            (signature_row2 + 1, 'D', "(K√Ω, ghi r√µ h·ªç t√™n)", 'K', "(K√Ω, ghi r√µ h·ªç t√™n)"),
            (signature_row2 + 5, 'D', "Nguy·ªÖn Th·ªã V√¢n", 'K', "Nguy·ªÖn Th·ªã V√¢n"),
            (signature_row2 + 6, 'D', f"Ng√†y {today.day}/{today.month}/{today.year}", 'K', f"Ng√†y {today.day}/{today.month}/{today.year}")
        ]
        
        for row, col_d, text_d, col_k, text_k in signature_data2:
            ws2[f'{col_d}{row}'] = text_d
            ws2[f'{col_k}{row}'] = text_k
            
            for col, text in [(col_d, text_d), (col_k, text_k)]:
                cell = ws2[f'{col}{row}']
                cell.alignment = Alignment(horizontal='center', vertical='center')
                if row == signature_row2:
                    cell.font = Font(bold=True, size=12, color="E67E22")
                    cell.fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")
                elif row == signature_row2 + 1:
                    cell.font = Font(italic=True, size=9)
                elif row == signature_row2 + 5:
                    cell.font = Font(bold=True, size=11)
                else:
                    cell.font = Font(size=9)
        
        file2_buffer = BytesIO()
        wb2.save(file2_buffer)
        file2_buffer.seek(0)
        zipf.writestr(f"B∆∞·ªõc 1.2 - Ti·∫øp nh·∫≠n th·ª±c ph·∫©m kh√¥ - Tu·∫ßn {week_number}.xlsx", file2_buffer.read())
        
        # B∆Ø·ªöC 2: Ki·ªÉm tra khi ch·∫ø bi·∫øn th·ª©c ƒÉn - Format chuy√™n nghi·ªáp
        wb3 = Workbook()
        ws3 = wb3.active
        ws3.title = "Ki·ªÉm tra ch·∫ø bi·∫øn"
        
        # Header ch√≠nh t∆∞∆°ng t·ª± c√°c b∆∞·ªõc tr∆∞·ªõc
        ws3['A1'] = "T√äN C∆† S·ªû: MNƒêL C√¢y Nh·ªè"
        ws3['A1'].font = Font(bold=True, size=12)
        ws3['A1'].fill = PatternFill(start_color="FFE6CC", end_color="FFE6CC", fill_type="solid")
        ws3.merge_cells('A1:O1')
        
        ws3['D2'] = "BI·ªÇU M·∫™U KI·ªÇM TRA KHI CH·∫æ BI·∫æN TH·ª®C ƒÇN"
        ws3['D2'].font = Font(bold=True, size=14, color="FF0000")
        ws3['D2'].alignment = Alignment(horizontal='center', vertical='center')
        ws3.merge_cells('D2:K2')
        
        ws3['M2'] = "S·ªë: 1246/Qƒê - B·ªô Y T·∫ø"
        ws3['M2'].font = Font(bold=True, size=10)
        ws3['M2'].fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
        
        # Th√¥ng tin ki·ªÉm tra
        info_data3 = [
            (3, 'A', f"Ng∆∞·ªùi ki·ªÉm tra: Nguy·ªÖn Th·ªã V√¢n - B·∫øp tr∆∞·ªüng", 'M', "M·∫´u s·ªë 2.0"),
            (4, 'A', f"Th·ªùi gian ki·ªÉm tra: {week_start.strftime('%d/%m/%Y')} - Tu·∫ßn {week_number}", 'M', f"S·ªë h·ªçc sinh: {student_count}"),
            (5, 'A', "ƒê·ªãa ƒëi·ªÉm: B·∫øp ch·∫ø bi·∫øn - MNƒêL C√¢y Nh·ªè", 'M', "Phi√™n b·∫£n: v2.0")
        ]
        
        for row, col_a, text_a, col_m, text_m in info_data3:
            ws3[f'{col_a}{row}'] = text_a
            ws3[f'{col_a}{row}'].font = Font(bold=True, size=10)
            ws3[f'{col_m}{row}'] = text_m
            ws3[f'{col_m}{row}'].font = Font(bold=True, size=10)
            ws3[f'{col_m}{row}'].fill = PatternFill(start_color="E6F3FF", end_color="E6F3FF", fill_type="solid")
        
        # Ti√™u ƒë·ªÅ ph·∫ßn II
        ws3['A7'] = "PH·∫¶N II: KI·ªÇM TRA QUY TR√åNH CH·∫æ BI·∫æN TH·ª®C ƒÇN"
        ws3['A7'].font = Font(bold=True, size=12, color="8B0000")
        ws3['A7'].fill = PatternFill(start_color="FFE6E6", end_color="FFE6E6", fill_type="solid")
        ws3.merge_cells('A7:L7')
        ws3['O7'] = "B∆Ø·ªöC 2"
        ws3['O7'].font = Font(bold=True, size=12, color="FF0000")
        ws3['O7'].fill = PatternFill(start_color="FFEEEE", end_color="FFEEEE", fill_type="solid")
        
        # Header b·∫£ng ch√≠nh - d√≤ng 8
        headers3_main = [
            'STT', 'CA/B·ªÆA ƒÇN', 'T√äN M√ìN ƒÇN', 'NGUY√äN LI·ªÜU CH√çNH', 'S·ªê SU·∫§T\n(ph·∫ßn)', 
            'S∆† CH·∫æ XONG\n(gi·ªù)', 'CH·∫æ BI·∫æN XONG\n(gi·ªù)', 'KI·ªÇM TRA V·ªÜ SINH', '', '',
            'C·∫¢M QUAN TH·ª®C ƒÇN', '', 'BI·ªÜN PH√ÅP\nX·ª¨ L√ù', 'GHI CH√ö\nDINH D∆Ø·ª†NG', 'NHI·ªÜT ƒê·ªò\nM√ìN ƒÇN'
        ]
        
        for i, header in enumerate(headers3_main, 1):
            cell = ws3.cell(row=8, column=i, value=header)
            cell.font = Font(bold=True, size=9, color="FFFFFF")
            cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
            cell.fill = PatternFill(start_color="8B0000", end_color="8B0000", fill_type="solid")
            cell.border = thick_border
        
        # Sub-headers chi ti·∫øt - d√≤ng 9
        sub_headers3 = [
            '', '', '', '', '', '', '', 'Nh√¢n vi√™n', 'D·ª•ng c·ª•', 'Khu v·ª±c',
            'ƒê·∫°t', 'Kh√¥ng ƒë·∫°t', '', '', ''
        ]
        
        for i, header in enumerate(sub_headers3, 1):
            cell = ws3.cell(row=9, column=i, value=header)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="CD5C5C", end_color="CD5C5C", fill_type="solid")
            cell.border = thin_border
        
        # Merge cells cho headers
        merge_ranges3 = ['H8:J8', 'K8:L8']  # V·ªá sinh, C·∫£m quan
        for merge_range in merge_ranges3:
            ws3.merge_cells(merge_range)
        
        # S·ªë th·ª© t·ª± c·ªôt
        for i in range(1, 16):
            cell = ws3.cell(row=10, column=i, value=i)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="F0F0F0", end_color="F0F0F0", fill_type="solid")
            cell.border = thin_border
        
        # ƒêi·ªÅn d·ªØ li·ªáu m√≥n ƒÉn theo ca v·ªõi th√¥ng tin chi ti·∫øt
        row_num = 11
        meal_times = {
            'morning': ('B·ªØa s√°ng\n6:30-7:00', '6:00', '6:25'),
            'snack': ('ƒÇn ph·ª• s√°ng\n9:00-9:30', '8:30', '8:55'), 
            'lunch': ('B·ªØa tr∆∞a\n11:00-12:00', '10:00', '10:50'),
            'afternoon': ('ƒÇn ph·ª• chi·ªÅu\n14:30-15:00', '14:00', '14:25'),
            'lateafternoon': ('B·ªØa x·∫ø\n16:00-16:30', '15:30', '15:55'),
            'dessert': ('Tr√°ng mi·ªáng\n12:15-12:30', '11:50', '12:10')
        }
        
        stt = 1
        days_vn = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7']
        days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
        
        for day_idx, day_key in enumerate(days):
            if day_key in menu_data:
                for meal_key, (ca_name, start_time, end_time) in meal_times.items():
                    if menu_data[day_key].get(meal_key):
                        dishes = [d.strip() for d in menu_data[day_key][meal_key].split(',') if d.strip()]
                        for dish in dishes:
                            # T·∫°o nguy√™n li·ªáu th√¥ng minh d·ª±a tr√™n t√™n m√≥n
                            ingredients = get_smart_ingredients(dish)
                            temperature = get_serving_temperature(dish)
                            
                            data_row3 = [
                                stt,  # STT
                                f"{days_vn[day_idx]}\n{ca_name}",  # Ca/b·ªØa ƒÉn v·ªõi ng√†y
                                dish.title(),  # T√™n m√≥n ƒÉn
                                ingredients,  # Nguy√™n li·ªáu ch√≠nh
                                f"{student_count} ph·∫ßn",  # S·ªë su·∫•t
                                start_time,  # S∆° ch·∫ø xong
                                end_time,  # Ch·∫ø bi·∫øn xong
                                "ƒê·∫°t chu·∫©n\nVS-ATTP",  # Nh√¢n vi√™n
                                "S·∫°ch s·∫Ω\nKh·ª≠ tr√πng",  # D·ª•ng c·ª•
                                "ƒê·∫£m b·∫£o\n5S",  # Khu v·ª±c
                                '‚úì',  # ƒê·∫°t c·∫£m quan
                                '',  # Kh√¥ng ƒë·∫°t
                                "Gi·ªØ nhi·ªát ƒë·ªô\nPh·ª•c v·ª• ngay",  # Bi·ªán ph√°p
                                get_dish_nutrition(dish),  # Ghi ch√∫ dinh d∆∞·ª°ng
                                temperature  # Nhi·ªát ƒë·ªô
                            ]
                            
                            for j, value in enumerate(data_row3, 1):
                                cell = ws3.cell(row=row_num, column=j, value=value)
                                cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
                                cell.border = thin_border
                                
                                # Styling ƒë·∫∑c bi·ªát
                                if j == 1:  # STT
                                    cell.font = Font(bold=True, color="8B0000")
                                    cell.fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")
                                elif j == 3:  # T√™n m√≥n ƒÉn
                                    cell.font = Font(bold=True, size=10)
                                    cell.fill = PatternFill(start_color="FFF0F5", end_color="FFF0F5", fill_type="solid")
                                elif j == 11 and value == '‚úì':  # ƒê·∫°t
                                    cell.font = Font(bold=True, size=12, color="228B22")
                                    cell.fill = PatternFill(start_color="F0FFF0", end_color="F0FFF0", fill_type="solid")
                                elif j == 15:  # Nhi·ªát ƒë·ªô
                                    cell.font = Font(bold=True, color="FF4500")
                            
                            row_num += 1
                            stt += 1
                            
                            if row_num > 40:  # Gi·ªõi h·∫°n s·ªë d√≤ng
                                break
                    if row_num > 40:
                        break
                if row_num > 40:
                    break
        
        # Th·ªëng k√™ quy tr√¨nh ch·∫ø bi·∫øn
        stats_row3 = row_num + 2
        ws3[f'A{stats_row3}'] = "TH·ªêNG K√ä QUY TR√åNH CH·∫æ BI·∫æN:"
        ws3[f'A{stats_row3}'].font = Font(bold=True, size=11, color="8B0000")
        ws3[f'A{stats_row3}'].fill = PatternFill(start_color="FFE6E6", end_color="FFE6E6", fill_type="solid")
        
        total_dishes = stt - 1
        total_meals = len([meal for day_data in menu_data.values() for meal in day_data.values() if meal])
        
        stats_info3 = [
            f"‚Ä¢ T·ªïng s·ªë m√≥n ƒÉn trong tu·∫ßn: {total_dishes} m√≥n",
            f"‚Ä¢ T·ªïng s·ªë b·ªØa ƒÉn: {total_meals} b·ªØa",
            f"‚Ä¢ Trung b√¨nh m√≥n/b·ªØa: {total_dishes/total_meals:.1f} m√≥n/b·ªØa",
            f"‚Ä¢ Th·ªùi gian ch·∫ø bi·∫øn trung b√¨nh: 25-30 ph√∫t/m√≥n"
        ]
        
        for i, stat in enumerate(stats_info3, 1):
            ws3[f'A{stats_row3 + i}'] = stat
            ws3[f'A{stats_row3 + i}'].font = Font(size=10)
        
        # Quy tr√¨nh an to√†n th·ª±c ph·∫©m
        safety_row = stats_row3 + 6
        ws3[f'A{safety_row}'] = "QUY TR√åNH AN TO√ÄN TH·ª∞C PH·∫®M KHI CH·∫æ BI·∫æN:"
        ws3[f'A{safety_row}'].font = Font(bold=True, size=11, color="DC143C")
        
        safety_notes = [
            "‚Ä¢ Nhi·ªát ƒë·ªô ch·∫ø bi·∫øn: >75¬∞C (ki·ªÉm tra b·∫±ng nhi·ªát k·∫ø th·ª±c ph·∫©m)",
            "‚Ä¢ Th·ªùi gian t·ª´ ch·∫ø bi·∫øn xong ƒë·∫øn ph·ª•c v·ª•: <2 gi·ªù",
            "‚Ä¢ Nguy√™n t·∫Øc: N·∫•u ch√≠n, ƒÉn n√≥ng, b·∫£o qu·∫£n l·∫°nh", 
            "‚Ä¢ Ki·ªÉm tra c·∫£m quan: m√†u s·∫Øc, m√πi v·ªã, ƒë·ªô ch√≠n, ƒë·ªô m·ªÅm ph√π h·ª£p tr·∫ª em"
        ]
        
        for i, note in enumerate(safety_notes, 1):
            ws3[f'A{safety_row + i}'] = note
            ws3[f'A{safety_row + i}'].font = Font(size=9, color="B22222")
        
        # Ch·ªØ k√Ω chuy√™n nghi·ªáp
        signature_row3 = safety_row + 7
        signature_data3 = [
            (signature_row3, 'C', "B·∫æP TR∆Ø·ªûNG", 'I', "HI·ªÜU TR∆Ø·ªûNG"),
            (signature_row3 + 1, 'C', "(K√Ω, ghi r√µ h·ªç t√™n)", 'I', "(K√Ω, ghi r√µ h·ªç t√™n)"),
            (signature_row3 + 5, 'C', "Nguy·ªÖn Th·ªã V√¢n", 'I', "Nguy·ªÖn Th·ªã V√¢n"),
            (signature_row3 + 6, 'C', f"Ng√†y {today.day}/{today.month}/{today.year}", 'I', f"Ng√†y {today.day}/{today.month}/{today.year}")
        ]
        
        for row, col_c, text_c, col_i, text_i in signature_data3:
            ws3[f'{col_c}{row}'] = text_c
            ws3[f'{col_i}{row}'] = text_i
            
            for col, text in [(col_c, text_c), (col_i, text_i)]:
                cell = ws3[f'{col}{row}']
                cell.alignment = Alignment(horizontal='center', vertical='center')
                if row == signature_row3:
                    cell.font = Font(bold=True, size=12, color="8B0000")
                    cell.fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")
                elif row == signature_row3 + 1:
                    cell.font = Font(italic=True, size=9)
                elif row == signature_row3 + 5:
                    cell.font = Font(bold=True, size=11)
                else:
                    cell.font = Font(size=9)
        
        file3_buffer = BytesIO()
        wb3.save(file3_buffer)
        file3_buffer.seek(0)
        zipf.writestr(f"B∆∞·ªõc 2 - Ki·ªÉm tra ch·∫ø bi·∫øn th·ª©c ƒÉn - Tu·∫ßn {week_number}.xlsx", file3_buffer.read())
        
        # B∆Ø·ªöC 2.1: Ki·ªÉm tra m·∫´u th·ª©c ƒÉn l∆∞u m·∫´u - Format chuy√™n nghi·ªáp
        wb21 = Workbook()
        ws21 = wb21.active
        ws21.title = "L∆∞u m·∫´u th·ª©c ƒÉn"
        
        # Header ch√≠nh
        ws21['A1'] = "T√äN C∆† S·ªû: MNƒêL C√¢y Nh·ªè"
        ws21['A1'].font = Font(bold=True, size=12)
        ws21['A1'].fill = PatternFill(start_color="E6F3FF", end_color="E6F3FF", fill_type="solid")
        ws21.merge_cells('A1:P1')
        
        ws21['D2'] = "BI·ªÇU M·∫™U KI·ªÇM TRA M·∫™U TH·ª®C ƒÇN L∆ØU M·∫™U"
        ws21['D2'].font = Font(bold=True, size=14, color="0066CC")
        ws21['D2'].alignment = Alignment(horizontal='center', vertical='center')
        ws21.merge_cells('D2:L2')
        
        ws21['N2'] = "S·ªë: 1247/Qƒê - B·ªô Y T·∫ø"
        ws21['N2'].font = Font(bold=True, size=10)
        ws21['N2'].fill = PatternFill(start_color="CCE6FF", end_color="CCE6FF", fill_type="solid")
        
        # Th√¥ng tin ki·ªÉm tra
        info_data21 = [
            (3, 'A', f"Ng∆∞·ªùi l∆∞u m·∫´u: Nguy·ªÖn Th·ªã V√¢n - B·∫øp tr∆∞·ªüng", 'N', "M·∫´u s·ªë 2.1"),
            (4, 'A', f"Tu·∫ßn ki·ªÉm tra: Tu·∫ßn {week_number} ({week_start.strftime('%d/%m/%Y')} - {week_end.strftime('%d/%m/%Y')})", 'N', f"S·ªë su·∫•t: {student_count}"),
            (5, 'A', "ƒê·ªãa ƒëi·ªÉm l∆∞u m·∫´u: T·ªß l·∫°nh chuy√™n d·ª•ng - B·∫øp ƒÉn", 'N', "Nhi·ªát ƒë·ªô: 2-8¬∞C")
        ]
        
        for row, col_a, text_a, col_n, text_n in info_data21:
            ws21[f'{col_a}{row}'] = text_a
            ws21[f'{col_a}{row}'].font = Font(bold=True, size=10)
            ws21[f'{col_n}{row}'] = text_n
            ws21[f'{col_n}{row}'].font = Font(bold=True, size=10)
            ws21[f'{col_n}{row}'].fill = PatternFill(start_color="F0F8FF", end_color="F0F8FF", fill_type="solid")
        
        # Ti√™u ƒë·ªÅ ph·∫ßn ch√≠nh
        ws21['A7'] = "PH·∫¶N III: KI·ªÇM TRA M·∫™U TH·ª®C ƒÇN L∆ØU M·∫™U"
        ws21['A7'].font = Font(bold=True, size=12, color="0066CC")
        ws21['A7'].fill = PatternFill(start_color="E6F3FF", end_color="E6F3FF", fill_type="solid")
        ws21.merge_cells('A7:M7')
        ws21['P7'] = "B∆Ø·ªöC 2.1"
        ws21['P7'].font = Font(bold=True, size=12, color="0066CC")
        ws21['P7'].fill = PatternFill(start_color="F0F8FF", end_color="F0F8FF", fill_type="solid")
        
        # Header b·∫£ng ch√≠nh
        headers21 = [
            'STT', 'NG√ÄY/BU·ªîI', 'T√äN M√ìN ƒÇN', 'TH·ªúI GIAN\nL∆ØU M·∫™U', 'S·ªê L∆Ø·ª¢NG\nM·∫™U (g)', 
            'NHI·ªÜT ƒê·ªò\nL∆ØU M·∫™U', 'TH·ªúI GIAN\nB·∫¢O QU·∫¢N', 'ƒê√ÅNH GI√Å C·∫¢M QUAN', '', '',
            'T√åNH TR·∫†NG\nM·∫™U', 'S·ªê L√î\nM·∫™U', 'GHI CH√ö\nƒê·∫∂C BI·ªÜT', 'NG∆Ø·ªúI\nL∆ØU M·∫™U', 'KI·ªÇM TRA\nCU·ªêI NG√ÄY'
        ]
        
        for i, header in enumerate(headers21, 1):
            cell = ws21.cell(row=8, column=i, value=header)
            cell.font = Font(bold=True, size=9, color="FFFFFF")
            cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
            cell.fill = PatternFill(start_color="0066CC", end_color="0066CC", fill_type="solid")
            cell.border = thick_border
        
        # Sub-headers cho c·∫£m quan
        sub_headers21 = [
            '', '', '', '', '', '', '', 'M√†u s·∫Øc', 'M√πi v·ªã', 'K·∫øt c·∫•u',
            '', '', '', '', ''
        ]
        
        for i, header in enumerate(sub_headers21, 1):
            cell = ws21.cell(row=9, column=i, value=header)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="4D94FF", end_color="4D94FF", fill_type="solid")
            cell.border = thin_border
        
        # Merge cells cho headers
        ws21.merge_cells('H8:J8')  # ƒê√°nh gi√° c·∫£m quan
        
        # S·ªë th·ª© t·ª± c·ªôt
        for i in range(1, 16):
            cell = ws21.cell(row=10, column=i, value=i)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="F0F8FF", end_color="F0F8FF", fill_type="solid")
            cell.border = thin_border
        
        # ƒêi·ªÅn d·ªØ li·ªáu l∆∞u m·∫´u
        row_num = 11
        stt = 1
        
        for day_idx, day_key in enumerate(days):
            if day_key in menu_data:
                current_date = week_start + timedelta(days=day_idx)
                
                # Ch·ªâ l∆∞u m·∫´u b·ªØa tr∆∞a v√† b·ªØa ph·ª• ch√≠nh
                key_meals = {
                    'lunch': 'B·ªØa tr∆∞a\n11:00-12:00',
                    'snack': 'ƒÇn ph·ª• s√°ng\n9:00-9:30',
                    'afternoon': 'ƒÇn ph·ª• chi·ªÅu\n14:30-15:00'
                }
                
                for meal_key, meal_name in key_meals.items():
                    if menu_data[day_key].get(meal_key):
                        dishes = [d.strip() for d in menu_data[day_key][meal_key].split(',') if d.strip()]
                        for dish in dishes:
                            # Ch·ªâ l∆∞u m·∫´u m√≥n ch√≠nh, kh√¥ng l∆∞u n∆∞·ªõc u·ªëng
                            if any(keyword in dish.lower() for keyword in ['n∆∞·ªõc', 's·ªØa', 'tr√†', 'chanh']):
                                continue
                                
                            sample_time = '11:45' if meal_key == 'lunch' else ('9:15' if meal_key == 'snack' else '14:45')
                            lot_number = f"LM{current_date.strftime('%d%m')}{stt:02d}"
                            
                            data_row21 = [
                                stt,  # STT
                                f"{days_vn[day_idx]}\n{current_date.strftime('%d/%m')}\n{meal_name}",  # Ng√†y/bu·ªïi
                                dish.title(),  # T√™n m√≥n ƒÉn
                                sample_time,  # Th·ªùi gian l∆∞u m·∫´u
                                "100g",  # S·ªë l∆∞·ª£ng m·∫´u
                                "2-4¬∞C",  # Nhi·ªát ƒë·ªô l∆∞u m·∫´u
                                "48 gi·ªù",  # Th·ªùi gian b·∫£o qu·∫£n
                                "B√¨nh th∆∞·ªùng",  # M√†u s·∫Øc
                                "T·ª± nhi√™n",  # M√πi v·ªã
                                "Ph√π h·ª£p",  # K·∫øt c·∫•u
                                "ƒê·∫°t chu·∫©n\nATTP",  # T√¨nh tr·∫°ng m·∫´u
                                lot_number,  # S·ªë l√¥ m·∫´u
                                get_sample_note(dish),  # Ghi ch√∫ ƒë·∫∑c bi·ªát
                                "N.T.V√¢n",  # Ng∆∞·ªùi l∆∞u m·∫´u
                                "‚úì"  # Ki·ªÉm tra cu·ªëi ng√†y
                            ]
                            
                            for j, value in enumerate(data_row21, 1):
                                cell = ws21.cell(row=row_num, column=j, value=value)
                                cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
                                cell.border = thin_border
                                
                                # Styling ƒë·∫∑c bi·ªát
                                if j == 1:  # STT
                                    cell.font = Font(bold=True, color="0066CC")
                                    cell.fill = PatternFill(start_color="F0F8FF", end_color="F0F8FF", fill_type="solid")
                                elif j == 3:  # T√™n m√≥n ƒÉn
                                    cell.font = Font(bold=True, size=10)
                                    cell.fill = PatternFill(start_color="F0F8FF", end_color="F0F8FF", fill_type="solid")
                                elif j == 15 and value == '‚úì':  # Ki·ªÉm tra
                                    cell.font = Font(bold=True, size=12, color="228B22")
                                    cell.fill = PatternFill(start_color="F0FFF0", end_color="F0FFF0", fill_type="solid")
                                elif j == 12:  # S·ªë l√¥
                                    cell.font = Font(bold=True, color="FF6600")
                            
                            row_num += 1
                            stt += 1
                            
                            if row_num > 35:  # Gi·ªõi h·∫°n
                                break
                    if row_num > 35:
                        break
                if row_num > 35:
                    break
        
        # Th·ªëng k√™ l∆∞u m·∫´u
        stats_row21 = row_num + 2
        ws21[f'A{stats_row21}'] = "TH·ªêNG K√ä L∆ØU M·∫™U TH·ª®C ƒÇN:"
        ws21[f'A{stats_row21}'].font = Font(bold=True, size=11, color="0066CC")
        ws21[f'A{stats_row21}'].fill = PatternFill(start_color="E6F3FF", end_color="E6F3FF", fill_type="solid")
        
        total_samples = stt - 1
        stats_info21 = [
            f"‚Ä¢ T·ªïng s·ªë m·∫´u l∆∞u trong tu·∫ßn: {total_samples} m·∫´u",
            f"‚Ä¢ Th·ªùi gian b·∫£o qu·∫£n: 48 gi·ªù (2 ng√†y)",
            f"‚Ä¢ Nhi·ªát ƒë·ªô l∆∞u m·∫´u: 2-4¬∞C (t·ªß l·∫°nh chuy√™n d·ª•ng)",
            f"‚Ä¢ T·∫ßn su·∫•t ki·ªÉm tra: 2 l·∫ßn/ng√†y (s√°ng v√† chi·ªÅu)"
        ]
        
        for i, stat in enumerate(stats_info21, 1):
            ws21[f'A{stats_row21 + i}'] = stat
            ws21[f'A{stats_row21 + i}'].font = Font(size=10)
        
        # Quy tr√¨nh l∆∞u m·∫´u
        procedure_row = stats_row21 + 6
        ws21[f'A{procedure_row}'] = "QUY TR√åNH L∆ØU M·∫™U TH·ª®C ƒÇN:"
        ws21[f'A{procedure_row}'].font = Font(bold=True, size=11, color="004080")
        
        procedure_notes = [
            "‚Ä¢ L·∫•y m·∫´u: Ngay sau khi ch·∫ø bi·∫øn xong, tr∆∞·ªõc khi ph·ª•c v·ª•",
            "‚Ä¢ D·ª•ng c·ª•: Th√¨a/mu·ªóng v√¥ tr√πng, h·ªôp nh·ª±a c√≥ n·∫Øp ƒë·∫≠y k√≠n",
            "‚Ä¢ Ghi nh√£n: T√™n m√≥n, ng√†y gi·ªù, s·ªë l√¥, ng∆∞·ªùi l·∫•y m·∫´u",
            "‚Ä¢ B·∫£o qu·∫£n: T·ªß l·∫°nh ri√™ng, kh√¥ng ƒë·ªÉ chung v·ªõi th·ª±c ph·∫©m kh√°c",
            "‚Ä¢ H·ªßy m·∫´u: Sau 48 gi·ªù n·∫øu kh√¥ng c√≥ s·ª± c·ªë th·ª±c ph·∫©m"
        ]
        
        for i, note in enumerate(procedure_notes, 1):
            ws21[f'A{procedure_row + i}'] = note
            ws21[f'A{procedure_row + i}'].font = Font(size=9, color="004080")
        
        # Ch·ªØ k√Ω
        signature_row21 = procedure_row + 8
        signature_data21 = [
            (signature_row21, 'D', "NG∆Ø·ªúI L∆ØU M·∫™U", 'L', "HI·ªÜU TR∆Ø·ªûNG"),
            (signature_row21 + 1, 'D', "(K√Ω, ghi r√µ h·ªç t√™n)", 'L', "(K√Ω, ghi r√µ h·ªç t√™n)"),
            (signature_row21 + 5, 'D', "Nguy·ªÖn Th·ªã V√¢n", 'L', "Nguy·ªÖn Th·ªã V√¢n"),
            (signature_row21 + 6, 'D', f"Ng√†y {today.day}/{today.month}/{today.year}", 'L', f"Ng√†y {today.day}/{today.month}/{today.year}")
        ]
        
        for row, col_d, text_d, col_l, text_l in signature_data21:
            ws21[f'{col_d}{row}'] = text_d
            ws21[f'{col_l}{row}'] = text_l
            
            for col, text in [(col_d, text_d), (col_l, text_l)]:
                cell = ws21[f'{col}{row}']
                cell.alignment = Alignment(horizontal='center', vertical='center')
                if row == signature_row21:
                    cell.font = Font(bold=True, size=12, color="0066CC")
                    cell.fill = PatternFill(start_color="F0F8FF", end_color="F0F8FF", fill_type="solid")
                elif row == signature_row21 + 1:
                    cell.font = Font(italic=True, size=9)
                elif row == signature_row21 + 5:
                    cell.font = Font(bold=True, size=11)
                else:
                    cell.font = Font(size=9)
        
        file21_buffer = BytesIO()
        wb21.save(file21_buffer)
        file21_buffer.seek(0)
        zipf.writestr(f"B∆∞·ªõc 2.1 - L∆∞u m·∫´u th·ª©c ƒÉn - Tu·∫ßn {week_number}.xlsx", file21_buffer.read())
        
        # B∆Ø·ªöC 3: Ki·ªÉm tra b·∫£o qu·∫£n v√† ph·ª•c v·ª• th·ª©c ƒÉn - Format chuy√™n nghi·ªáp  
        wb4 = Workbook()
        ws4 = wb4.active
        ws4.title = "B·∫£o qu·∫£n v√† ph·ª•c v·ª•"
        
        # Header ch√≠nh
        ws4['A1'] = "T√äN C∆† S·ªû: MNƒêL C√¢y Nh·ªè"
        ws4['A1'].font = Font(bold=True, size=12)
        ws4['A1'].fill = PatternFill(start_color="E6FFE6", end_color="E6FFE6", fill_type="solid")
        ws4.merge_cells('A1:O1')
        
        ws4['D2'] = "BI·ªÇU M·∫™U KI·ªÇM TRA B·∫¢O QU·∫¢N V√Ä PH·ª§C V·ª§ TH·ª®C ƒÇN"
        ws4['D2'].font = Font(bold=True, size=14, color="006600")
        ws4['D2'].alignment = Alignment(horizontal='center', vertical='center')
        ws4.merge_cells('D2:K2')
        
        ws4['M2'] = "S·ªë: 1248/Qƒê - B·ªô Y T·∫ø"
        ws4['M2'].font = Font(bold=True, size=10)
        ws4['M2'].fill = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")
        
        # Th√¥ng tin ki·ªÉm tra
        info_data4 = [
            (3, 'A', f"Ng∆∞·ªùi ki·ªÉm tra: Nguy·ªÖn Th·ªã V√¢n - B·∫øp tr∆∞·ªüng", 'M', "M·∫´u s·ªë 3.0"),
            (4, 'A', f"Tu·∫ßn ki·ªÉm tra: Tu·∫ßn {week_number} ({week_start.strftime('%d/%m/%Y')} - {week_end.strftime('%d/%m/%Y')})", 'M', f"S·ªë h·ªçc sinh: {student_count}"),
            (5, 'A', "Khu v·ª±c: B·∫øp ƒÉn + Khu ph·ª•c v·ª• - MNƒêL C√¢y Nh·ªè", 'M', "Chu·∫©n: ATTP 2021")
        ]
        
        for row, col_a, text_a, col_m, text_m in info_data4:
            ws4[f'{col_a}{row}'] = text_a
            ws4[f'{col_a}{row}'].font = Font(bold=True, size=10)
            ws4[f'{col_m}{row}'] = text_m
            ws4[f'{col_m}{row}'].font = Font(bold=True, size=10)
            ws4[f'{col_m}{row}'].fill = PatternFill(start_color="F0FFF0", end_color="F0FFF0", fill_type="solid")
        
        # Ti√™u ƒë·ªÅ ph·∫ßn ch√≠nh
        ws4['A7'] = "PH·∫¶N IV: KI·ªÇM TRA B·∫¢O QU·∫¢N V√Ä PH·ª§C V·ª§ TH·ª®C ƒÇN"
        ws4['A7'].font = Font(bold=True, size=12, color="006600")
        ws4['A7'].fill = PatternFill(start_color="E6FFE6", end_color="E6FFE6", fill_type="solid")
        ws4.merge_cells('A7:L7')
        ws4['O7'] = "B∆Ø·ªöC 3"
        ws4['O7'].font = Font(bold=True, size=12, color="006600")
        ws4['O7'].fill = PatternFill(start_color="F0FFF0", end_color="F0FFF0", fill_type="solid")
        
        # Header b·∫£ng ch√≠nh
        headers4 = [
            'STT', 'NG√ÄY/CA\nPH·ª§C V·ª§', 'T√äN M√ìN ƒÇN', 'TH·ªúI GIAN\nHO√ÄN TH√ÄNH', 'TH·ªúI GIAN\nPH·ª§C V·ª§',
            'NHI·ªÜT ƒê·ªò\nKHI PH·ª§C V·ª§', 'THI·∫æT B·ªä\nGI·ªÆ NHI·ªÜT', 'V·ªÜ SINH D·ª§NG C·ª§', '', 
            'ƒê√ÅNH GI√Å\nPH·ª§C V·ª§', '', 'BI·ªÜN PH√ÅP\nX·ª¨ L√ù', 'S·ªê SU·∫§T\nTH·ª∞C T·∫æ', 'GHI CH√ö\nƒê·∫∂C BI·ªÜT'
        ]
        
        for i, header in enumerate(headers4, 1):
            cell = ws4.cell(row=8, column=i, value=header)
            cell.font = Font(bold=True, size=9, color="FFFFFF")
            cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
            cell.fill = PatternFill(start_color="006600", end_color="006600", fill_type="solid")
            cell.border = thick_border
        
        # Sub-headers chi ti·∫øt
        sub_headers4 = [
            '', '', '', '', '', '', '', 'Ch√©n/b√°t', 'Th√¨a/ƒë≈©a',
            'ƒê·∫°t', 'Kh√¥ng ƒë·∫°t', '', '', ''
        ]
        
        for i, header in enumerate(sub_headers4, 1):
            cell = ws4.cell(row=9, column=i, value=header)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="4D9900", end_color="4D9900", fill_type="solid")
            cell.border = thin_border
        
        # Merge cells cho headers
        merge_ranges4 = ['H8:I8', 'J8:K8']  # V·ªá sinh d·ª•ng c·ª•, ƒê√°nh gi√° ph·ª•c v·ª•
        for merge_range in merge_ranges4:
            ws4.merge_cells(merge_range)
        
        # S·ªë th·ª© t·ª± c·ªôt
        for i in range(1, 15):
            cell = ws4.cell(row=10, column=i, value=i)
            cell.font = Font(bold=True, size=8)
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.fill = PatternFill(start_color="F0FFF0", end_color="F0FFF0", fill_type="solid")
            cell.border = thin_border
        
        # ƒêi·ªÅn d·ªØ li·ªáu ph·ª•c v·ª• th·ª©c ƒÉn
        row_num = 11
        stt = 1
        
        for day_idx, day_key in enumerate(days):
            if day_key in menu_data:
                current_date = week_start + timedelta(days=day_idx)
                
                for meal_key, (ca_name, start_time, end_time) in meal_times.items():
                    if menu_data[day_key].get(meal_key):
                        dishes = [d.strip() for d in menu_data[day_key][meal_key].split(',') if d.strip()]
                        for dish in dishes:
                            # Th·ªùi gian ph·ª•c v·ª•
                            serve_times = {
                                'morning': '6:30',
                                'snack': '9:00', 
                                'lunch': '11:00',
                                'afternoon': '14:30',
                                'lateafternoon': '16:00',
                                'dessert': '12:15'
                            }
                            serve_time = serve_times.get(meal_key, '12:00')
                            
                            # Thi·∫øt b·ªã gi·ªØ nhi·ªát
                            equipment = get_heating_equipment(dish)
                            serving_temp = get_serving_temperature(dish)
                            actual_portions = get_actual_portions(dish, student_count)
                            
                            data_row4 = [
                                stt,  # STT
                                f"{days_vn[day_idx]}\n{current_date.strftime('%d/%m')}\n{ca_name}",  # Ng√†y/ca
                                dish.title(),  # T√™n m√≥n ƒÉn
                                end_time,  # Th·ªùi gian ho√†n th√†nh
                                serve_time,  # Th·ªùi gian ph·ª•c v·ª•
                                serving_temp,  # Nhi·ªát ƒë·ªô khi ph·ª•c v·ª•
                                equipment,  # Thi·∫øt b·ªã gi·ªØ nhi·ªát
                                "S·∫°ch s·∫Ω\nKh·ª≠ tr√πng",  # Ch√©n/b√°t
                                "S·∫°ch s·∫Ω\nKh·ª≠ tr√πng",  # Th√¨a/ƒë≈©a
                                '‚úì',  # ƒê·∫°t
                                '',  # Kh√¥ng ƒë·∫°t
                                "Ph·ª•c v·ª•\nƒë√∫ng gi·ªù",  # Bi·ªán ph√°p x·ª≠ l√Ω
                                f"{actual_portions} ph·∫ßn",  # S·ªë su·∫•t th·ª±c t·∫ø
                                get_serving_note(dish)  # Ghi ch√∫ ƒë·∫∑c bi·ªát
                            ]
                            
                            for j, value in enumerate(data_row4, 1):
                                cell = ws4.cell(row=row_num, column=j, value=value)
                                cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
                                cell.border = thin_border
                                
                                # Styling ƒë·∫∑c bi·ªát
                                if j == 1:  # STT
                                    cell.font = Font(bold=True, color="006600")
                                    cell.fill = PatternFill(start_color="F0FFF0", end_color="F0FFF0", fill_type="solid")
                                elif j == 3:  # T√™n m√≥n ƒÉn
                                    cell.font = Font(bold=True, size=10)
                                    cell.fill = PatternFill(start_color="F0FFF0", end_color="F0FFF0", fill_type="solid")
                                elif j == 10 and value == '‚úì':  # ƒê·∫°t
                                    cell.font = Font(bold=True, size=12, color="228B22")
                                    cell.fill = PatternFill(start_color="F0FFF0", end_color="F0FFF0", fill_type="solid")
                                elif j == 6:  # Nhi·ªát ƒë·ªô
                                    cell.font = Font(bold=True, color="FF4500")
                                elif j == 13:  # S·ªë su·∫•t th·ª±c t·∫ø
                                    cell.font = Font(bold=True, color="0066CC")
                            
                            row_num += 1
                            stt += 1
                            
                            if row_num > 40:  # Gi·ªõi h·∫°n
                                break
                    if row_num > 40:
                        break
                if row_num > 40:
                    break
        
        # Th·ªëng k√™ ph·ª•c v·ª•
        stats_row4 = row_num + 2
        ws4[f'A{stats_row4}'] = "TH·ªêNG K√ä PH·ª§C V·ª§ TH·ª®C ƒÇN:"
        ws4[f'A{stats_row4}'].font = Font(bold=True, size=11, color="006600")
        ws4[f'A{stats_row4}'].fill = PatternFill(start_color="E6FFE6", end_color="E6FFE6", fill_type="solid")
        
        total_servings = stt - 1
        total_portions = sum(get_actual_portions('', student_count) for _ in range(total_servings))
        
        stats_info4 = [
            f"‚Ä¢ T·ªïng s·ªë l·∫ßn ph·ª•c v·ª•: {total_servings} l·∫ßn",
            f"‚Ä¢ T·ªïng s·ªë su·∫•t ƒÉn ph·ª•c v·ª•: {total_portions} su·∫•t",
            f"‚Ä¢ Trung b√¨nh su·∫•t/l·∫ßn: {total_portions/total_servings:.1f} su·∫•t/l·∫ßn",
            f"‚Ä¢ Th·ªùi gian trung b√¨nh t·ª´ ch·∫ø bi·∫øn xong ƒë·∫øn ph·ª•c v·ª•: <30 ph√∫t"
        ]
        
        for i, stat in enumerate(stats_info4, 1):
            ws4[f'A{stats_row4 + i}'] = stat
            ws4[f'A{stats_row4 + i}'].font = Font(size=10)
        
        # Nguy√™n t·∫Øc b·∫£o qu·∫£n v√† ph·ª•c v·ª•
        principles_row = stats_row4 + 6
        ws4[f'A{principles_row}'] = "NGUY√äN T·∫ÆC B·∫¢O QU·∫¢N V√Ä PH·ª§C V·ª§ AN TO√ÄN:"
        ws4[f'A{principles_row}'].font = Font(bold=True, size=11, color="004000")
        
        principles_notes = [
            "‚Ä¢ Th·ªùi gian: T·ª´ ch·∫ø bi·∫øn xong ƒë·∫øn ph·ª•c v·ª• kh√¥ng qu√° 2 gi·ªù",
            "‚Ä¢ Nhi·ªát ƒë·ªô: M√≥n n√≥ng >60¬∞C, m√≥n l·∫°nh <10¬∞C khi ph·ª•c v·ª•",
            "‚Ä¢ Thi·∫øt b·ªã: S·ª≠ d·ª•ng t·ªß gi·ªØ nhi·ªát, n·ªìi c∆°m ƒëi·ªán, b√¨nh gi·ªØ nhi·ªát",
            "‚Ä¢ V·ªá sinh: Kh·ª≠ tr√πng d·ª•ng c·ª• tr∆∞·ªõc m·ªói b·ªØa ƒÉn",
            "‚Ä¢ Ki·ªÉm tra: Nhi·ªát ƒë·ªô th·ª©c ƒÉn tr∆∞·ªõc khi ph·ª•c v·ª• cho tr·∫ª"
        ]
        
        for i, note in enumerate(principles_notes, 1):
            ws4[f'A{principles_row + i}'] = note
            ws4[f'A{principles_row + i}'].font = Font(size=9, color="004000")
        
        # Ch·ªØ k√Ω
        signature_row4 = principles_row + 8
        signature_data4 = [
            (signature_row4, 'D', "NH√ÇN VI√äN PH·ª§C V·ª§", 'K', "HI·ªÜU TR∆Ø·ªûNG"),
            (signature_row4 + 1, 'D', "(K√Ω, ghi r√µ h·ªç t√™n)", 'K', "(K√Ω, ghi r√µ h·ªç t√™n)"),
            (signature_row4 + 5, 'D', "Nguy·ªÖn Th·ªã V√¢n", 'K', "Nguy·ªÖn Th·ªã V√¢n"),
            (signature_row4 + 6, 'D', f"Ng√†y {today.day}/{today.month}/{today.year}", 'K', f"Ng√†y {today.day}/{today.month}/{today.year}")
        ]
        
        for row, col_d, text_d, col_k, text_k in signature_data4:
            ws4[f'{col_d}{row}'] = text_d
            ws4[f'{col_k}{row}'] = text_k
            
            for col, text in [(col_d, text_d), (col_k, text_k)]:
                cell = ws4[f'{col}{row}']
                cell.alignment = Alignment(horizontal='center', vertical='center')
                if row == signature_row4:
                    cell.font = Font(bold=True, size=12, color="006600")
                    cell.fill = PatternFill(start_color="F0FFF0", end_color="F0FFF0", fill_type="solid")
                elif row == signature_row4 + 1:
                    cell.font = Font(italic=True, size=9)
                elif row == signature_row4 + 5:
                    cell.font = Font(bold=True, size=11)
                else:
                    cell.font = Font(size=9)
        
        file4_buffer = BytesIO()
        wb4.save(file4_buffer)
        file4_buffer.seek(0)
        zipf.writestr(f"B∆∞·ªõc 3 - B·∫£o qu·∫£n v√† ph·ª•c v·ª• th·ª©c ƒÉn - Tu·∫ßn {week_number}.xlsx", file4_buffer.read())
    
    # ƒê√≥ng zipfile v√† tr·∫£ v·ªÅ
    zip_buffer.seek(0)
    
    # T·∫°o response ƒë·ªÉ download
    response = send_file(
        zip_buffer,
        as_attachment=True,
        download_name=f"Quy_trinh_an_toan_thuc_pham_3_buoc_Tuan_{week_number}.zip",
        mimetype='application/zip'
    )
    
    flash(f'ƒê√£ xu·∫•t th√†nh c√¥ng quy tr√¨nh an to√†n th·ª±c ph·∫©m 3 b∆∞·ªõc cho tu·∫ßn {week_number}!', 'success')
    return response

# ================== QU·∫¢N L√ù NH√Ä CUNG C·∫§P V√Ä S·∫¢N PH·∫®M ==================

@main.route('/suppliers')
def suppliers():
    """Danh s√°ch nh√† cung c·∫•p"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    suppliers = Supplier.query.filter_by(is_active=True).order_by(Supplier.name).all()
    return render_template('suppliers.html', suppliers=suppliers)

@main.route('/suppliers/new', methods=['GET', 'POST'])
def new_supplier():
    """Th√™m nh√† cung c·∫•p m·ªõi"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    form = SupplierForm()
    if form.validate_on_submit():
        supplier = Supplier(
            name=form.name.data,
            address=form.address.data,
            phone=form.phone.data,
            contact_person=form.contact_person.data,
            supplier_type=form.supplier_type.data,
            registration_number=form.registration_number.data,
            food_safety_cert=form.food_safety_cert.data,
            created_date=datetime.utcnow()
        )
        db.session.add(supplier)
        db.session.commit()
        flash('Th√™m nh√† cung c·∫•p th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.suppliers'))
    
    return render_template('new_supplier.html', form=form)

@main.route('/suppliers/<int:supplier_id>/edit', methods=['GET', 'POST'])
def edit_supplier(supplier_id):
    """S·ª≠a th√¥ng tin nh√† cung c·∫•p"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    supplier = Supplier.query.get_or_404(supplier_id)
    form = SupplierForm(obj=supplier)
    
    if form.validate_on_submit():
        form.populate_obj(supplier)
        db.session.commit()
        flash('C·∫≠p nh·∫≠t nh√† cung c·∫•p th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.suppliers'))
    
    return render_template('edit_supplier.html', form=form, supplier=supplier)

@main.route('/suppliers/<int:supplier_id>/delete', methods=['POST'])
def delete_supplier(supplier_id):
    """X√≥a nh√† cung c·∫•p"""
    if session.get('role') != 'admin':
        return redirect_no_permission()
    
    supplier = Supplier.query.get_or_404(supplier_id)
    supplier.is_active = False
    db.session.commit()
    flash('X√≥a nh√† cung c·∫•p th√†nh c√¥ng!', 'success')
    return redirect(url_for('main.suppliers'))

@main.route('/products')
def products():
    """Danh s√°ch s·∫£n ph·∫©m"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    products = Product.query.filter_by(is_active=True).join(Supplier).order_by(Product.category, Product.name).all()
    return render_template('products.html', products=products)

@main.route('/products/new', methods=['GET', 'POST'])
def new_product():
    """Th√™m s·∫£n ph·∫©m m·ªõi"""
    current_role = session.get('role')
    
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    form = ProductForm()
    # L·∫•y danh s√°ch ƒë∆°n v·ªã duy nh·∫•t t·ª´ Product
    product_units = sorted(list(set([p.unit for p in Product.query.all() if p.unit])))
    # L·∫•y danh s√°ch nh√† cung c·∫•p cho dropdown
    suppliers = Supplier.query.filter_by(is_active=True).order_by(Supplier.name).all()
    
    # N·∫øu ch∆∞a c√≥ supplier n√†o, t·∫°o m·ªôt supplier m·∫´u
    if not suppliers:
        default_supplier = Supplier(
            name="Nh√† cung c·∫•p m·∫∑c ƒë·ªãnh",
            address="ƒê·ªãa ch·ªâ c·∫ßn c·∫≠p nh·∫≠t",
            phone="0123456789",
            contact_person="Ng∆∞·ªùi li√™n h·ªá",
            supplier_type="fresh",
            registration_number="",
            food_safety_cert="",
            created_date=datetime.utcnow()
        )
        db.session.add(default_supplier)
        db.session.commit()
        suppliers = [default_supplier]
        flash('ƒê√£ t·∫°o nh√† cung c·∫•p m·∫∑c ƒë·ªãnh. Vui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin sau!', 'info')
    
    form.supplier_id.choices = [(s.id, s.name) for s in suppliers]
    
    if form.validate_on_submit():
        product = Product(
            name=form.name.data,
            category=form.category.data,
            supplier_id=form.supplier_id.data,
            unit=form.unit.data
        )
        db.session.add(product)
        db.session.commit()
        flash('Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.products'))
    return render_template('new_product.html', form=form, product_units=product_units)

@main.route('/products/<int:product_id>/edit', methods=['GET', 'POST'])
def edit_product(product_id):
    """S·ª≠a th√¥ng tin s·∫£n ph·∫©m"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    product = Product.query.get_or_404(product_id)
    form = ProductForm(obj=product)
    product_units = sorted(list(set([p.unit for p in Product.query.all() if p.unit])))
    
    # L·∫•y danh s√°ch nh√† cung c·∫•p cho dropdown
    suppliers = Supplier.query.filter_by(is_active=True).order_by(Supplier.name).all()
    form.supplier_id.choices = [(s.id, s.name) for s in suppliers]
    
    if form.validate_on_submit():
        form.populate_obj(product)
        db.session.commit()
        flash('C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!', 'success')
        return redirect(url_for('main.products'))
    
    return render_template('edit_product.html', form=form, product=product, suppliers=suppliers, product_units=product_units)

@main.route('/products/<int:product_id>/delete', methods=['POST'])
def delete_product(product_id):
    """X√≥a s·∫£n ph·∫©m"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    product = Product.query.get_or_404(product_id)
    product.is_active = False
    db.session.commit()
    flash('X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!', 'success')
    return redirect(url_for('main.products'))

# ============== AI Routes v·ªõi LLM Farm ==============

@main.route('/ai/menu-suggestions', methods=['POST'])
def ai_menu_suggestions():
    """API endpoint ƒë·ªÉ l·∫•y g·ª£i √Ω th·ª±c ƒë∆°n t·ª´ Gemini AI - SECURED & OPTIMIZED"""
    
    # Kh√¥i ph·ª•c role check v·ªõi caching ƒë·ªÉ tƒÉng t·ªëc
    user_role = session.get('role')
    if user_role not in ['admin', 'teacher']:
        return jsonify({
            'success': False,
            'error': 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n admin ho·∫∑c gi√°o vi√™n.'
        }), 403
    
    # Enhanced Rate Limiting v·ªõi security utils
    user_ip = validate_ip_address(request.remote_addr)
    rate_allowed, wait_seconds = check_rate_limit(f"ai_menu_{user_ip}", AI_RATE_LIMIT_SECONDS)
    
    if not rate_allowed:
        log_security_event('RATE_LIMIT_EXCEEDED', f'User: {user_role}, Wait: {wait_seconds}s', user_ip)
        return jsonify({
            'success': False,
            'error': f'Vui l√≤ng ch·ªù {wait_seconds} gi√¢y tr∆∞·ªõc khi t·∫°o th·ª±c ƒë∆°n ti·∫øp theo.'
        }), 429
    
    # Clean up old rate limit entries periodically
    clean_rate_limit_storage()
    
    print(f"ÔøΩ [SECURITY] Menu suggestions API called by {user_role} from {user_ip}")
    
    try:
        # Input validation v√† sanitization  
        if not request.json:
            return jsonify({
                'success': False,
                'error': 'D·ªØ li·ªáu request kh√¥ng h·ª£p l·ªá'
            }), 400
            
        # Sanitize v√† validate inputs
        age_group = str(request.json.get('age_group', '2-3 tu·ªïi')).strip()
        available_ingredients = str(request.json.get('available_ingredients', '')).strip()
        dietary_requirements = str(request.json.get('dietary_requirements', '')).strip()
        
        # Length limits ƒë·ªÉ tr√°nh abuse
        if len(available_ingredients) > 1000:
            return jsonify({
                'success': False,
                'error': 'Danh s√°ch nguy√™n li·ªáu qu√° d√†i (t·ªëi ƒëa 1000 k√Ω t·ª±)'
            }), 400
            
        if len(dietary_requirements) > 500:
            return jsonify({
                'success': False,
                'error': 'Y√™u c·∫ßu ƒë·∫∑c bi·ªát qu√° d√†i (t·ªëi ƒëa 500 k√Ω t·ª±)'
            }), 400
        
        # Validate age group
        valid_age_groups = ['6-12 th√°ng', '1-2 tu·ªïi', '2-3 tu·ªïi', '3-4 tu·ªïi', '4-5 tu·ªïi', '1-5 tu·ªïi']
        if age_group not in valid_age_groups:
            age_group = '2-3 tu·ªïi'  # Default fallback
        
        count = 5  # Fixed count for consistency

        # L·∫•y danh s√°ch m√≥n ƒÉn hi·ªán t·∫°i (ch·ªâ active)
        from app.models import Dish
        dishes = Dish.query.filter_by(is_active=True).all()
        dish_names = [d.name for d in dishes]
        # Prompt AI CHU·∫®N: ch·ªâ d√πng ƒë√∫ng danh s√°ch m√≥n, kh√¥ng t·ª± t·∫°o th√™m ngo√†i
        prompt = (
            "# Y√äU C·∫¶U T·∫†O TH·ª∞C ƒê∆†N TU·∫¶N\n"
            f"DANH S√ÅCH M√ìN ƒÇN: {', '.join(dish_names)}\n"
            "- Ch·ªâ s·ª≠ d·ª•ng ƒë√∫ng c√°c m√≥n trong danh s√°ch tr√™n ƒë·ªÉ t·∫°o th·ª±c ƒë∆°n 1 tu·∫ßn (36 b·ªØa, 6 ng√†y, m·ªói ng√†y 6 b·ªØa).\n"
            "- TUY·ªÜT ƒê·ªêI KH√îNG ƒë∆∞·ª£c t·ª± √Ω th√™m, s√°ng t·∫°o, ho·∫∑c ƒë·ªÅ xu·∫•t b·∫•t k·ª≥ m√≥n ƒÉn n√†o ngo√†i danh s√°ch n√†y.\n"
            "- N·∫øu kh√¥ng ƒë·ªß m√≥n ƒë·ªÉ xoay v√≤ng, h√£y l·∫∑p l·∫°i c√°c m√≥n trong danh s√°ch, nh∆∞ng kh√¥ng ƒë∆∞·ª£c th√™m m√≥n m·ªõi.\n"
            "- N·∫øu c√≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát, t√¥i s·∫Ω ghi r√µ ·ªü ph·∫ßn b√™n d∆∞·ªõi.\n"
            "- B·ªØa Ph·ª• s√°ng (snack) chi·ªÅu th∆∞·ªùng s·ª≠ d·ª•ng c√°c m√≥n ƒÉn nh·∫π nh∆∞ s·ªØa, s·ªØa h·∫°t ....\n"
            "- B·ªØa Tr√°ng mi·ªáng (dessert) th∆∞·ªùng s·ª≠ d·ª•ng c√°c m√≥n ƒÉn nh·∫π nh∆∞ s·ªØa, s·ªØa h·∫°t ....\n"
            "- B·ªØa X·∫ø chi·ªÅu (lateafternoon) th∆∞·ªùng s·ª≠ d·ª•ng c√°c m√≥n ƒÉn nh·∫π nh∆∞ s·ªØa, s·ªØa h·∫°t ....\n"
            "- TUY·ªÜT ƒê·ªêI KH√îNG s·ª≠ d·ª•ng m√≥n m·∫∑n, m√≥n ch√≠nh cho b·ªØa ph·ª• s√°ng, tr√°ng mi·ªáng, x·∫ø chi·ªÅu \n"
            "\nY√™u c·∫ßu ƒë·∫∑c bi·ªát: [ƒêi·ªÅn c√°c m√≥n b·∫°n mu·ªën th√™m ho·∫∑c l∆∞u √Ω kh√°c t·∫°i ƒë√¢y]\n"
            "\nTR·∫¢ V·ªÄ DUY NH·∫§T D·ªÆ LI·ªÜU JSON THEO ƒê√öNG ƒê·ªäNH D·∫†NG SAU (KH√îNG GI·∫¢I TH√çCH, KH√îNG TH√äM TEXT NGO√ÄI JSON):\n"
            '{\n'
            '  "mon": {"morning": "...", "snack": "...", "dessert": "...", "lunch": "...", "afternoon": "...", "lateafternoon": "..."},\n'
            '  "tue": {...},\n'
            '  "wed": {...},\n'
            '  "thu": {...},\n'
            '  "fri": {...},\n'
            '  "sat": {...}\n'
            '}\n'
            "\nCh·ªâ tr·∫£ v·ªÅ JSON ƒë√∫ng format tr√™n, kh√¥ng th√™m b·∫•t k·ª≥ text n√†o kh√°c."
        )

        # üöÄ ALWAYS use single entry point for AI menu suggestion
        try:
            print(f"üöÄ [MENU AI] Always using prompt CHU·∫®N truy·ªÅn v√†o cho m·ªçi provider!")
            print(f"[DEBUG] Prompt truy·ªÅn v√†o Menu-AI:\n{prompt}")
            suggestions = get_ai_menu_suggestions(
                age_group=age_group,
                dietary_requirements=dietary_requirements,
                count=count,
                available_ingredients=available_ingredients,
                menu_prompt=prompt
            )
            print(f"[DEBUG] Raw AI suggestions: {repr(suggestions)}")
            # N·∫øu suggestions l√† string v√† c√≥ JSON object b√™n trong, c·ªë g·∫Øng extract JSON
            if isinstance(suggestions, str):
                import re
                import json
                # T√¨m JSON object ƒë·∫ßu ti√™n trong string
                match = re.search(r'\{[\s\S]*\}', suggestions)
                if match:
                    json_str = match.group(0)
                    try:
                        suggestions_obj = json.loads(json_str)
                        print("[DEBUG] Extracted JSON object from AI string response.")
                        suggestions = suggestions_obj
                    except Exception as json_err:
                        print(f"[ERROR] Failed to parse extracted JSON: {json_err}")
            # N·∫øu suggestions l√† list, ki·ªÉm tra t·ª´ng ph·∫ßn t·ª≠ xem c√≥ JSON object kh√¥ng
            if isinstance(suggestions, list):
                import re
                import json
                for idx, s in enumerate(suggestions):
                    if isinstance(s, str):
                        match = re.search(r'\{[\s\S]*\}', s)
                        if match:
                            json_str = match.group(0)
                            try:
                                suggestions_obj = json.loads(json_str)
                                print(f"[DEBUG] Extracted JSON object from AI list response at index {idx}.")
                                suggestions = suggestions_obj
                                break
                            except Exception as json_err:
                                print(f"[ERROR] Failed to parse extracted JSON in list: {json_err}")
            # N·∫øu suggestions l√† list v√† c√≥ d√≤ng provider, log provider
            if isinstance(suggestions, list):
                for s in suggestions:
                    if "Generated by:" in s:
                        print(f"[DEBUG] Provider tr·∫£ v·ªÅ: {s}")
            print(f"‚úÖ [MENU AI SUCCESS] Menu AI completed for {user_role}")
        except Exception as menu_ai_error:
            print(f"‚ö†Ô∏è [MENU AI ERROR] Menu AI failed: {menu_ai_error}")
            suggestions = [
                "‚ùå Kh√¥ng th·ªÉ t·∫°o menu t·ª´ AI",
                "üîÑ Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i",
                f"üìù Error: {str(menu_ai_error)[:100]}"
            ]
        # Log successful operation
        print(f"‚úÖ [SUCCESS] Menu generated for {user_role} - Age: {age_group}, Ingredients: {len(available_ingredients)} chars")

        # N·∫øu AI tr·∫£ v·ªÅ dict ƒë√∫ng format menu th√¨ tr·∫£ v·ªÅ lu√¥n
        if isinstance(suggestions, dict) and all(day in suggestions for day in ['mon','tue','wed','thu','fri','sat']):
            return jsonify({
                'success': True,
                'menu': suggestions,
                'age_group': age_group,
                'security_info': f"Generated securely for {user_role}",
                'prompt': prompt,
                'dish_names': dish_names
            })
        # N·∫øu kh√¥ng ph·∫£i dict, c·ªë g·∫Øng convert v·ªÅ menu chu·∫©n
        # N·∫øu l√† list (suggestions text), d√πng extract_weekly_menu_from_suggestions
        if isinstance(suggestions, list):
            menu_data = extract_weekly_menu_from_suggestions(suggestions)
            return jsonify({
                'success': True,
                'menu': menu_data,
                'age_group': age_group,
                'security_info': f"Generated securely for {user_role} (fallback from suggestions)",
                'prompt': prompt,
                'dish_names': dish_names
            })
        # N·∫øu l√† string, c≈©ng convert sang list tr∆∞·ªõc khi extract
        if isinstance(suggestions, str):
            menu_data = extract_weekly_menu_from_suggestions([suggestions])
            return jsonify({
                'success': True,
                'menu': menu_data,
                'age_group': age_group,
                'security_info': f"Generated securely for {user_role} (fallback from string)",
                'prompt': prompt,
                'dish_names': dish_names
            })
        # N·∫øu kh√¥ng convert ƒë∆∞·ª£c, tr·∫£ v·ªÅ menu r·ªóng
        menu_data = extract_weekly_menu_from_suggestions([])
        return jsonify({
            'success': True,
            'menu': menu_data,
            'age_group': age_group,
            'security_info': f"Generated securely for {user_role} (empty fallback)",
            'prompt': prompt,
            'dish_names': dish_names
        })
        
    except Exception as e:
        db.session.rollback()
        print(f"Create Menu Error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

def extract_weekly_menu_from_suggestions(suggestions):
    """Tr√≠ch xu·∫•t v√† chuy·ªÉn ƒë·ªïi suggestions th√†nh format menu database"""
    menu_data = {}
    days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat']
    slots = ['morning', 'snack', 'dessert', 'lunch', 'afternoon', 'lateafternoon']
    
    # Initialize empty menu
    for day in days:
        menu_data[day] = {}
        for slot in slots:
            menu_data[day][slot] = "M√≥n ƒÉn dinh d∆∞·ª°ng"
    
    current_day = None
    current_day_index = -1
    
    for suggestion in suggestions:
        suggestion = suggestion.strip()
        
        # T√¨m ng√†y
        if '**Th·ª©' in suggestion:
            if 'Th·ª© 2' in suggestion:
                current_day = 'mon'
                current_day_index = 0
            elif 'Th·ª© 3' in suggestion:
                current_day = 'tue' 
                current_day_index = 1
            elif 'Th·ª© 4' in suggestion:
                current_day = 'wed'
                current_day_index = 2
            elif 'Th·ª© 5' in suggestion:
                current_day = 'thu'
                current_day_index = 3
            elif 'Th·ª© 6' in suggestion:
                current_day = 'fri'
                current_day_index = 4
            elif 'Th·ª© 7' in suggestion:
                current_day = 'sat'
                current_day_index = 5
            continue
            
        # T√¨m m√≥n ƒÉn theo khung gi·ªù
        if current_day and suggestion.startswith('‚Ä¢'):
            suggestion = suggestion[1:].strip()  # B·ªè bullet point
            
            if suggestion.startswith('S√°ng:'):
                menu_data[current_day]['morning'] = suggestion[5:].strip()
            elif suggestion.startswith('Ph·ª• s√°ng:'):
                menu_data[current_day]['snack'] = suggestion[9:].strip()
            elif suggestion.startswith('Tr√°ng mi·ªáng:'):
                menu_data[current_day]['dessert'] = suggestion[12:].strip()
            elif suggestion.startswith('Tr∆∞a:'):
                menu_data[current_day]['lunch'] = suggestion[5:].strip()
            elif suggestion.startswith('X·∫ø:'):
                menu_data[current_day]['afternoon'] = suggestion[3:].strip()
            elif suggestion.startswith('X·∫ø chi·ªÅu:'):
                menu_data[current_day]['lateafternoon'] = suggestion[9:].strip()
    
    return menu_data


# ============== CURRICULUM AI Routes ==============

def convert_structured_to_frontend_format(ai_result, age_group, week_number, themes, special_focus):
    """
    Convert new structured curriculum format to frontend-compatible format
    T·∫°o output t∆∞∆°ng t·ª± menu AI - list c·ªßa strings d·ªÖ ƒë·ªçc
    """
    try:
        print(f"üîç [DEBUG] Starting frontend format conversion")
        print(f"üîç [DEBUG] AI result keys: {list(ai_result.keys()) if isinstance(ai_result, dict) else 'Not a dict'}")
        
        structured_data = ai_result.get('data', {})
        provider = ai_result.get('provider', 'unknown')
        
        print(f"üîç [DEBUG] Structured data keys: {list(structured_data.keys()) if isinstance(structured_data, dict) else 'Not a dict'}")
        print(f"üîç [DEBUG] Provider: {provider}")
        
        # T·∫°o list activities t∆∞∆°ng t·ª± menu AI format
        curriculum_items = []
        
        # Header th√¥ng tin
        curriculum_items.extend([
            f"üìö **CH∆Ø∆†NG TR√åNH H·ªåC TU·∫¶N {week_number}**",
            f"üë∂ **ƒê·ªô tu·ªïi:** {age_group}",
            f"üéØ **Ch·ªß ƒë·ªÅ:** {themes if themes else 'Ch·ªß ƒë·ªÅ ph√°t tri·ªÉn to√†n di·ªán'}",
            f"‚≠ê **Tr·ªçng t√¢m:** {special_focus if special_focus else 'Ph√°t tri·ªÉn ƒëa d·∫°ng k·ªπ nƒÉng'}",
            ""
        ])
        
        # Day mapping
        day_names = {
            'mon': 'Th·ª© 2', 'tue': 'Th·ª© 3', 'wed': 'Th·ª© 4',
            'thu': 'Th·ª© 5', 'fri': 'Th·ª© 6'
        }
        
        # Time slot mapping v·ªõi emoji
        time_slots = {
            'morning_1': 'üåÖ 7h-8h: ƒê√≥n tr·∫ª & ƒÇn s√°ng',
            'morning_2': 'üèÉ 8h-8h30: Th·ªÉ d·ª•c & Tr√≤ chuy·ªán',
            'morning_3': 'üå≥ 8h30-9h: Ho·∫°t ƒë·ªông ngo√†i tr·ªùi',
            'morning_4': 'üá¨üáß 9h-9h30: English & B·ªØa ph·ª•',
            'morning_5': 'üìö 9h30-10h: H·ªçc t·∫≠p ch√≠nh',
            'morning_6': 'üçö 10h30-14h: ƒÇn tr∆∞a & Ngh·ªâ tr∆∞a',
            'afternoon_1': 'üß© 14h15-15h: Lego/Gi√°o c·ª•',
            'afternoon_2': 'ü•§ 15h-15h30: U·ªëng n∆∞·ªõc & ƒÇn x·∫ø',
            'afternoon_3': 'üßò 15h45-16h: Yoga/Ho·∫°t ƒë·ªông s√°ng t·∫°o',
            'afternoon_4': 'üëã 16h-17h: T·ª± do & ƒê√≥n tr·∫ª'
        }
        
        # Process each day
        daily_activities = []  # Format for JavaScript compatibility
        
        for day_code in ['mon', 'tue', 'wed', 'thu', 'fri']:
            if day_code not in structured_data:
                continue
                
            day_name = day_names[day_code]
            day_data = structured_data[day_code]
            
            # Create activities array for this day
            activities = []
            
            # Add activities for each time slot
            for slot_code in ['morning_1', 'morning_2', 'morning_3', 'morning_4', 'morning_5', 'morning_6',
                             'afternoon_1', 'afternoon_2', 'afternoon_3', 'afternoon_4']:
                
                if slot_code in day_data and day_data[slot_code]:
                    activity_content = day_data[slot_code]
                    time_label = time_slots.get(slot_code, f'{slot_code}:').replace('üåÖ ', '').replace('üèÉ ', '').replace('üå≥ ', '').replace('üá¨üáß ', '').replace('üìö ', '').replace('üçö ', '').replace('üß© ', '').replace('ü•§ ', '').replace('üßò ', '').replace('üëã ', '')
                    
                    activities.append({
                        'time': time_label,
                        'activity': activity_content[:50] + ('...' if len(activity_content) > 50 else ''),
                        'description': activity_content
                    })
            
            # Special formatting for Wednesday (Th·ª© 4 vui v·∫ª)
            if day_code == 'wed':
                day_display_name = f"{day_name} - TH·ª® 4 VUI V·∫∫"
            else:
                day_display_name = day_name
                
            daily_activities.append({
                'day': day_display_name,
                'activities': activities
            })
        
        # Return format compatible with frontend JavaScript
        return {
            'week_number': week_number,
            'age_group': age_group,
            'themes': themes or 'Ch·ªß ƒë·ªÅ ph√°t tri·ªÉn to√†n di·ªán',
            'special_focus': special_focus or 'Ph√°t tri·ªÉn ƒëa d·∫°ng k·ªπ nƒÉng',
            'daily_activities': daily_activities,  # JavaScript-compatible format
            'materials': [
                'ƒê·ªì ch∆°i gi√°o d·ª•c ph√π h·ª£p ƒë·ªô tu·ªïi',
                'S√°ch tranh v√† flashcard ch·ªß ƒë·ªÅ',
                'V·∫≠t li·ªáu t√¥ v·∫Ω v√† s√°ng t·∫°o',
                'ƒê·ªì ch∆°i Lego v√† gi√°o c·ª•',
                'Th·∫£m yoga v√† nh·∫°c c·ª•'
            ],
            'provider': provider,
            'structured_data': structured_data,  # Keep for create curriculum endpoint
            'curriculum': structured_data  # For database storage
        }
        
    except Exception as e:
        print(f"‚ùå [DEBUG] Error converting structured format: {e}")
        print(f"‚ùå [DEBUG] Error type: {type(e)}")
        print(f"‚ùå [DEBUG] AI result received: {ai_result}")
        return {
            'week_number': week_number,
            'age_group': age_group,
            'themes': themes or 'L·ªói x·ª≠ l√Ω d·ªØ li·ªáu',
            'special_focus': special_focus or 'L·ªói x·ª≠ l√Ω d·ªØ li·ªáu',
            'daily_activities': [],
            'materials': [],
            'provider': 'error',
            'error': str(e)
        }







@main.route('/debug-curriculum')
def debug_curriculum():
    """Debug curriculum AI import"""
    try:
        # Step 1: Test import
        print("üîç [DEBUG] Step 1: Testing import...")
        from app.curriculum_ai import curriculum_ai_service
        print("‚úÖ [DEBUG] Import successful")
        
        # Step 2: Test service object
        print("üîç [DEBUG] Step 2: Testing service object...")
        service_type = type(curriculum_ai_service).__name__
        print(f"‚úÖ [DEBUG] Service type: {service_type}")
        
        return f"""
        <h2>üîç Curriculum AI Debug</h2>
        <p>‚úÖ Import th√†nh c√¥ng</p>
        <p>‚úÖ Service type: {service_type}</p>
        <p><a href='/test-curriculum-ai'>Test ch·ª©c nƒÉng AI</a></p>
        <p><a href='/login'>ƒêƒÉng nh·∫≠p ƒë·ªÉ test full</a></p>
        """
        
    except Exception as e:
        import traceback
        error_detail = traceback.format_exc()
        print(f"‚ùå [DEBUG ERROR] {str(e)}")
        print(f"üìã [TRACEBACK] {error_detail}")
        
        return f"""
        <h2>‚ùå Curriculum AI Debug Error</h2>
        <p><strong>Error:</strong> {str(e)}</p>
        <p><strong>Type:</strong> {type(e).__name__}</p>
        <pre>{error_detail}</pre>
        """

@main.route('/test-curriculum-ai')
def test_curriculum_ai():
    """Test curriculum AI service tr·ª±c ti·∫øp"""
    try:
        # Import curriculum AI service
        from app.curriculum_ai import curriculum_ai_service
        
        print("üß™ [TEST] Testing curriculum AI service...")
        
        # Test v·ªõi parameters ƒë∆°n gi·∫£n
        result = curriculum_ai_service.generate_weekly_curriculum(
            age_group="2-3 tu·ªïi",
            week_number=1,
            themes="ƒê·ªông v·∫≠t",
            special_focus="Ph√°t tri·ªÉn ng√¥n ng·ªØ"
        )
        
        return jsonify({
            'success': True,
            'message': 'Curriculum AI service ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
            'result_keys': list(result.keys()) if result else None
        })
        
    except Exception as e:
        print(f"‚ùå [TEST ERROR] {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'error_type': type(e).__name__
        }), 500

@main.route('/create-test-teacher')
def create_test_teacher():
    """T·∫°o t√†i kho·∫£n gi√°o vi√™n test"""
    
    # Ki·ªÉm tra xem ƒë√£ c√≥ gi√°o vi√™n test ch∆∞a
    existing = Staff.query.filter_by(email='gv1@gmail.com').first()
    if existing:
        return f"T√†i kho·∫£n gv1@gmail.com ƒë√£ t·ªìn t·∫°i! ID: {existing.id}, Position: {existing.position}"
    
    # T·∫°o gi√°o vi√™n m·ªõi
    teacher = Staff(
        name='Gi√°o vi√™n Test',
        position='teacher',
        contact_info='gv1@gmail.com',
        email='gv1@gmail.com',
        phone='0123456789',
        password=generate_password_hash('123456')
    )
    
    db.session.add(teacher)
    db.session.commit()
    
    return f"‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n gi√°o vi√™n test:<br>Email: gv1@gmail.com<br>Password: 123456<br>ID: {teacher.id}<br><a href='/login'>ƒêƒÉng nh·∫≠p ngay</a>"


import random

@main.route('/ai-dashboard', methods=['GET', 'POST'])
def ai_dashboard():
    """Trang dashboard AI v·ªõi c√°c t√≠nh nƒÉng LLM Farm"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()

    # Kh√¥ng t·ª± t·∫°o prompt ·ªü ƒë√¢y n·ªØa, ch·ªâ render dashboard, prompt s·∫Ω l·∫•y t·ª´ API /ai/menu-suggestions
    return render_template('ai_dashboard.html')

# ===== STUDENT ALBUM MANAGEMENT ROUTES =====

@main.route('/student-albums')
def student_albums():
    """Danh s√°ch album c·ªßa t·∫•t c·∫£ h·ªçc sinh"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    students = Child.query.all()
    albums = StudentAlbum.query.join(Child).order_by(StudentAlbum.date_created.desc()).all()
    
    # T√≠nh th·ªëng k√™
    today = date.today()
    albums_today = [album for album in albums if album.date_created == today]
    academic_albums = [album for album in albums if album.milestone_type == 'academic']
    
    # Mobile detection
    user_agent = request.headers.get('User-Agent', '').lower()
    mobile = any(device in user_agent for device in ['mobile', 'android', 'iphone'])
    
    return render_template('student_albums.html', 
                         students=students, 
                         albums=albums, 
                         albums_today=albums_today,
                         academic_albums=academic_albums,
                         mobile=mobile)

@main.route('/student/<int:student_id>/albums')
def student_albums_detail(student_id):
    """Album chi ti·∫øt c·ªßa m·ªôt h·ªçc sinh"""
    if session.get('role') not in ['admin', 'teacher', 'parent']:
        return redirect_no_permission()
    
    student = Child.query.get_or_404(student_id)
    
    # N·∫øu l√† parent, ch·ªâ xem ƒë∆∞·ª£c album c·ªßa con m√¨nh
    if session.get('role') == 'parent' and session.get('user_id') != student_id:
        flash('B·∫°n ch·ªâ c√≥ th·ªÉ xem album c·ªßa con m√¨nh!', 'error')
        return redirect(url_for('main.index'))
    
    albums = StudentAlbum.query.filter_by(student_id=student_id).order_by(StudentAlbum.date_created.desc()).all()
    progress_records = StudentProgress.query.filter_by(student_id=student_id).order_by(StudentProgress.evaluation_date.desc()).all()
    
    # T√≠nh th·ªëng k√™ cho student n√†y
    total_photos = sum(len(album.photos) for album in albums)
    today = date.today()
    first_day_of_month = today.replace(day=1)
    albums_this_month = [album for album in albums if album.date_created >= first_day_of_month]
    
    # Mobile detection
    user_agent = request.headers.get('User-Agent', '').lower()
    mobile = any(device in user_agent for device in ['mobile', 'android', 'iphone'])
    
    return render_template('student_album_detail.html', 
                         student=student, 
                         albums=albums, 
                         progress_records=progress_records,
                         total_photos=total_photos,
                         albums_this_month=albums_this_month,
                         mobile=mobile,
                         current_date=date.today().strftime('%Y-%m-%d'))

@main.route('/student/<int:student_id>/album/new', methods=['GET', 'POST'])
def create_student_album(student_id):
    """T·∫°o album m·ªõi cho h·ªçc sinh"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    student = Child.query.get_or_404(student_id)
    
    if request.method == 'POST':
        # L·∫•y th√¥ng tin album
        title = request.form.get('title')
        description = request.form.get('description', '')
        milestone_type = request.form.get('milestone_type', 'other')
        school_year = request.form.get('school_year', '')
        semester = request.form.get('semester', '')
        age_at_time = request.form.get('age_at_time', '')
        
        # T·∫°o album m·ªõi
        album = StudentAlbum(
            student_id=student_id,
            title=title,
            description=description,
            date_created=date.today(),
            milestone_type=milestone_type,
            school_year=school_year,
            semester=semester,
            age_at_time=age_at_time,
            created_by=session.get('username', 'teacher'),
            is_shared_with_parents=True
        )
        
        db.session.add(album)
        db.session.flush()  # ƒê·ªÉ l·∫•y album.id
        
        # X·ª≠ l√Ω upload ·∫£nh
        uploaded_files = request.files.getlist('photos')
        if uploaded_files:
            upload_dir = os.path.join(current_app.static_folder, 'student_albums', str(student_id), str(album.id))
            os.makedirs(upload_dir, exist_ok=True)
            
            for i, file in enumerate(uploaded_files):
                if file and file.filename:
                    filename = secrets.token_hex(16) + '.' + file.filename.rsplit('.', 1)[1].lower()
                    filepath = os.path.join(upload_dir, filename)
                    file.save(filepath)
                    
                    # T·∫°o record ·∫£nh
                    photo = StudentPhoto(
                        album_id=album.id,
                        filename=filename,
                        filepath=f"student_albums/{student_id}/{album.id}/{filename}",
                        original_filename=file.filename,
                        caption=request.form.get(f'caption_{i}', ''),
                        upload_date=datetime.now(),
                        file_size=os.path.getsize(filepath),
                        image_order=i,
                        is_cover_photo=(i == 0)  # ·∫¢nh ƒë·∫ßu ti√™n l√†m ·∫£nh ƒë·∫°i di·ªán
                    )
                    db.session.add(photo)
        
        db.session.commit()
        flash(f'‚úÖ ƒê√£ t·∫°o album "{title}" cho {student.name}!', 'success')
        return redirect(url_for('main.student_albums_detail', student_id=student_id))
    
    # Mobile detection
    user_agent = request.headers.get('User-Agent', '').lower()
    mobile = any(device in user_agent for device in ['mobile', 'android', 'iphone'])
    
    return render_template('create_student_album.html', student=student, mobile=mobile)

@main.route('/album/<int:album_id>')
def view_album(album_id):
    """Xem chi ti·∫øt m·ªôt album"""
    if session.get('role') not in ['admin', 'teacher', 'parent']:
        return redirect_no_permission()
    
    album = StudentAlbum.query.get_or_404(album_id)
    
    # N·∫øu l√† parent, ch·ªâ xem ƒë∆∞·ª£c album c·ªßa con m√¨nh
    if session.get('role') == 'parent' and session.get('user_id') != album.student_id:
        flash('B·∫°n ch·ªâ c√≥ th·ªÉ xem album c·ªßa con m√¨nh!', 'error')
        return redirect(url_for('main.index'))
    
    photos = StudentPhoto.query.filter_by(album_id=album_id).order_by(StudentPhoto.image_order).all()
    
    # Mobile detection
    user_agent = request.headers.get('User-Agent', '').lower()
    mobile = any(device in user_agent for device in ['mobile', 'android', 'iphone'])
    
    return render_template('view_album.html', album=album, photos=photos, mobile=mobile)

@main.route('/student/<int:student_id>/progress/new', methods=['GET', 'POST'])
def add_student_progress(student_id):
    """Th√™m ƒë√°nh gi√° ti·∫øn b·ªô cho h·ªçc sinh"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    student = Child.query.get_or_404(student_id)
    
    if request.method == 'POST':
        progress = StudentProgress(
            student_id=student_id,
            evaluation_date=datetime.strptime(request.form.get('evaluation_date'), '%Y-%m-%d').date(),
            skill_category=request.form.get('skill_category'),
            skill_name=request.form.get('skill_name'),
            level_achieved=request.form.get('level_achieved'),
            notes=request.form.get('notes', ''),
            teacher_name=session.get('username', 'teacher')
        )
        
        db.session.add(progress)
        db.session.commit()
        
        flash(f'‚úÖ ƒê√£ th√™m ƒë√°nh gi√° ti·∫øn b·ªô cho {student.name}!', 'success')
        return redirect(url_for('main.student_albums_detail', student_id=student_id))
    
    # Mobile detection
    user_agent = request.headers.get('User-Agent', '').lower()
    mobile = any(device in user_agent for device in ['mobile', 'android', 'iphone'])
    
    return render_template('add_student_progress.html', student=student, mobile=mobile)

@main.route('/album/<int:album_id>/delete', methods=['POST'])
def delete_album(album_id):
    """X√≥a album"""
    if session.get('role') not in ['admin', 'teacher']:
        return redirect_no_permission()
    
    album = StudentAlbum.query.get_or_404(album_id)
    student_id = album.student_id
    
    # X√≥a th∆∞ m·ª•c ch·ª©a ·∫£nh
    album_dir = os.path.join(current_app.static_folder, 'student_albums', str(student_id), str(album_id))
    if os.path.exists(album_dir):
        import shutil
        shutil.rmtree(album_dir)
    
    db.session.delete(album)
    db.session.commit()
    
    flash('‚úÖ ƒê√£ x√≥a album!', 'success')
    return redirect(url_for('main.student_albums_detail', student_id=student_id))